<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.gys.mapper.GaiaSdSaleDMapper">
    <select id="querySalesSummaryOfSalesmenReport"
            parameterType="com.gys.report.entity.GetSalesSummaryOfSalesmenReportInData"
            resultType="com.gys.report.entity.GetSalesSummaryOfSalesmenReportOutData">
        SELECT
        users.*,
        unions.*
        FROM
        (
        SELECT DISTINCT
        d.USER_ID AS sellerCode,
        d.USER_NAM AS sellerName,
        d.USER_STA AS userSta
        FROM
        GAIA_AUTHCONFI_DATA a
        LEFT JOIN GAIA_FRANCHISEE b ON ( a.CLIENT = b.CLIENT )
        LEFT JOIN GAIA_STORE_DATA c ON ( a.CLIENT = c.CLIENT AND a.AUTHOBJ_SITE = c.STO_CODE )
        LEFT JOIN GAIA_USER_DATA d ON ( a.CLIENT = d.CLIENT AND a.AUTHCONFI_USER = d.USER_ID )
        WHERE
        a.CLIENT = #{clientId}
        <if test="queryUserId!=null and queryUserId!=''">
            and d.USER_ID = #{queryUserId}
        </if>
        AND a.AUTH_GROUP_ID NOT IN ( 'SD_23', 'SD_24' )
        AND d.USER_NAM IS NOT NULL
        ORDER BY
        d.USER_ID ASC
        ) AS users
        LEFT JOIN
        (SELECT
        d.GSSD_SALER_ID sellerId,
        u.USER_NAM sellerName,
        y.selledDays salesDays,
        CONVERT (IFNULL( SUM( d.GSSD_AMT - t.GSSH_BILL_NO_RETURN * ( d.GSSD_ADD_AMT + d.GSSD_ADD_TAX ) ), 0 ),DECIMAL (
        19, 2 )) AS grossProfitAmt,
        IFNULL(CONVERT (IFNULL( SUM( d.GSSD_AMT - t.GSSH_BILL_NO_RETURN * ( d.GSSD_ADD_AMT + d.GSSD_ADD_TAX ) ), 0 ) /
        SUM( d.GSSD_AMT ) * 100,DECIMAL ( 19, 2 )),0) AS grossProfitRate,
        CONVERT (SUM( abs( d.GSSD_PRC1 ) * d.GSSD_QTY ) - SUM( d.GSSD_AMT ),DECIMAL ( 19, 2 )) AS discountAmt,
        IFNULL(CONVERT (( SUM( abs( d.GSSD_PRC1 ) * d.GSSD_QTY ) - SUM( d.GSSD_AMT ) ) / SUM( abs( d.GSSD_PRC1 ) *
        d.GSSD_QTY ) * 100,DECIMAL ( 10, 2 )),0) AS discountRate,
        CONVERT ( SUM( d.GSSD_AMT ), DECIMAL ( 19, 2 ) ) ssAmount,
        z.tradedTime customersAmt,
        CONVERT ( SUM( d.GSSD_AMT ) / z.tradedTime, DECIMAL ( 19, 2 ) ) visitUnitPrice,
        CONVERT ( z.tradedTime / y.selledDays, DECIMAL ( 19, 2 ) ) daliyAveCustomersNum,
        CONVERT ( SUM( d.GSSD_AMT ) / y.selledDays, DECIMAL ( 19, 2 ) ) daliygsddRmbAmt,
        z.tradedTime AS tradedTime
        FROM
        GAIA_SD_SALE_D d
        LEFT JOIN GAIA_USER_DATA u ON d.GSSD_SALER_ID = u.USER_ID AND d.CLIENT = u.CLIENT
        LEFT JOIN GAIA_SD_SALE_H h ON d.GSSD_BR_ID = h.GSSH_BR_ID AND d.CLIENT = h.CLIENT AND d.GSSD_BILL_NO =
        h.GSSH_BILL_NO
        LEFT JOIN (SELECT (CASE IFNULL(GSSH_BILL_NO_RETURN, 1 ) WHEN 1 THEN 1 ELSE -1 END)
        GSSH_BILL_NO_RETURN,GSSH_BILL_NO,GSSH_DATE,GSSH_BR_ID FROM GAIA_SD_SALE_H
        WHERE GSSH_DATE <![CDATA[ <= ]]> #{queryEndDate} AND GSSH_DATE <![CDATA[ >= ]]> #{queryStartDate}
        AND CLIENT = #{clientId} AND GSSH_BR_ID = #{brId}) t ON t.GSSH_BILL_NO = h.GSSH_BILL_NO AND t.GSSH_DATE =
        h.GSSH_DATE AND t.GSSH_BR_ID = h.GSSH_BR_ID
        LEFT JOIN (SELECT COUNT( * ) selledDays,s.GSSD_SALER_ID FROM
        (SELECT hs.*,ds.GSSD_SALER_ID,CONVERT( SUM( ds.GSSD_AMT ),DECIMAL(19,4) ) AS gssdAmt FROM GAIA_SD_SALE_H hs
        LEFT JOIN GAIA_SD_SALE_D ds ON ds.CLIENT = hs.CLIENT AND ds.GSSD_BILL_NO = hs.GSSH_BILL_NO AND ds.GSSD_BR_ID =
        hs.GSSH_BR_ID
        WHERE hs.GSSH_HIDE_FLAG = '0' AND hs.CLIENT = #{clientId} <!-- AND hs.GSSH_BR_ID = #{brId}-->
        AND hs.GSSH_DATE <![CDATA[>=]]> #{queryStartDate} AND hs.GSSH_DATE <![CDATA[<=]]> #{queryEndDate}
        GROUP BY ds.CLIENT,ds.GSSD_SALER_ID,hs.GSSH_DATE) s
        GROUP BY s.GSSD_SALER_ID
        ) y
        ON y.GSSD_SALER_ID = d.GSSD_SALER_ID
        LEFT JOIN (SELECT count(*) tradedTime,s.GSSD_SALER_ID FROM
        (SELECT hs.*,ds.GSSD_SALER_ID FROM GAIA_SD_SALE_H hs
        LEFT JOIN GAIA_SD_SALE_D ds ON ds.CLIENT = hs.CLIENT AND ds.GSSD_BILL_NO = hs.GSSH_BILL_NO AND ds.GSSD_BR_ID =
        hs.GSSH_BR_ID
        WHERE hs.GSSH_HIDE_FLAG = '0' AND hs.CLIENT = #{clientId} <!-- AND hs.GSSH_BR_ID = #{brId}-->
        AND hs.GSSH_DATE <![CDATA[>=]]> #{queryStartDate} AND hs.GSSH_DATE <![CDATA[<=]]> #{queryEndDate}
        GROUP BY hs.CLIENT,hs.GSSH_BR_ID,ds.GSSD_SALER_ID,hs.GSSH_BILL_NO) s GROUP BY s.GSSD_SALER_ID) z ON
        z.GSSD_SALER_ID = d.GSSD_SALER_ID
        WHERE d.CLIENT = #{clientId} and h.GSSH_HIDE_FLAG = '0' <!-- AND h.GSSH_BR_ID = #{brId}-->
        <if test="queryStartDate != null and queryStartDate != ''">
            AND d.GSSD_DATE <![CDATA[>=]]> #{queryStartDate}
        </if>
        <if test="queryEndDate != null and queryEndDate != ''">
            AND d.GSSD_DATE <![CDATA[<=]]> #{queryEndDate}
        </if>
        <if test="queryUserId != null and queryUserId != ''">
            AND d.GSSD_SALER_ID = #{queryUserId}
        </if>
        AND d.GSSD_SALER_ID IS NOT NULL
        GROUP BY d.GSSD_SALER_ID
        ORDER BY d.GSSD_SALER_ID ASC ) unions ON users.sellerCode = unions.sellerId
    </select>

    <select id="getSalespersonsSalesDetails"
            resultType="com.gys.report.entity.SalespersonsSalesDetailsOutData">
        select * from (
        SELECT
        sto.CLIENT,
        sto.STO_CODE stoCode,
        IFNULL( sto.STO_SHORT_NAME, sto.STO_NAME ) stoName,
        DATE_FORMAT(CONCAT(sale.GSSD_DATE,sale.GSSH_TIME),'%Y-%m-%d %H:%i:%s') saleDate,
        sale.GSSD_BILL_NO billNo,
        pb.PRO_SELF_CODE selfCode,
        IFNULL( pb.PRO_NAME, pb.PRO_COMMONNAME ) proName,
        pb.PRO_COMMONNAME proCommonName,
        pb.PRO_DEPICT as proDepict,
        pb.PRO_SPECS specs,
        pb.PRO_REGISTER_NO proRegisterNo,
        pb.PRO_UNIT unit,
        pb.PRO_FACTORY_CODE factoryCode,
        pb.PRO_FACTORY_NAME factoryName,
        pb.PRO_MED_ID medProdctCode,
        pb.PRO_IF_MED,
        pb.PRO_ZDY1 AS zdy1,
        pb.PRO_ZDY2 AS zdy2,
        pb.PRO_ZDY3 AS zdy3,
        pb.PRO_ZDY4 AS zdy4,
        pb.PRO_ZDY5 AS zdy5,
        pb.PRO_SLAE_CLASS AS proSaleClass,
        pb.PRO_SCLASS AS prosClass,
        case pb.PRO_TSSX when '1' then '防疫'
        else '' end AS proTssx,
        case pb.PRO_NO_PURCHASE
        when '1' then '是'
        when '0' then '否'
        end AS purchase,
        pb.PRO_POSITION proPosition,
        CASE
        WHEN pb.PRO_IF_MED = '1' THEN
        '是'
        WHEN pb.PRO_MED_ID IS NOT NULL THEN
        '是' ELSE '否'
        END ifMed,
        sale.GSSD_PRC1 prcOne,
        sale.GSSD_QTY qty,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) AS amountReceivable,
        sale.GSSD_AMT amt,
        sale.GSSD_ADD_AMT addAmt,
        sale.GSSD_ADD_TAX addTxa,
        sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX includeTaxSale,
        sale.GSSD_AMT - (sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX) grossProfitMargin,
        IFNULL((sale.GSSD_AMT - sale.GSSD_ADD_AMT - sale.GSSD_ADD_TAX)
        / sale.GSSD_AMT
        * 100,0) grossProfitRate,
        ABS(sale.GSSD_QTY) as jdQty,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) - sale.GSSD_AMT discount,
        IFNULL((sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) - sale.GSSD_AMT )/( sale.GSSD_PRC1 * sale.GSSD_QTY )* 100 ,0)discountRate,
        sale.GSSD_SALER_ID salerId,
        ud1.USER_NAM salerName,
        sale.GSSD_DOCTOR_ID doctorId,
        ud2.USER_NAM doctorName,
        sale.GSSH_EMP empId,
        ud3.USER_NAM empName,
        sale.GSSH_HYK_NO hykNo,
        gsmb.GSMB_NAME hykName,
        gsmb.GSMB_MOBILE hykMobile,
        gsmb.GSMB_MEMBER_ID memberId,
        concat( pc.PRO_BIG_CLASS_CODE, '-', pc.PRO_BIG_CLASS_NAME ) bigClass,
        concat( pc.PRO_MID_CLASS_CODE, '-', pc.PRO_MID_CLASS_NAME ) midClass,
        concat( pc.PRO_CLASS_CODE, '-', pc.PRO_CLASS_NAME ) proClass,
        pb.PRO_CLASS,
        sale.GSSD_BATCH_NO batchNo,
        sale.GSSD_VALID_DATE validData,
        sale.expiryDay,
        sale.BAT_SUPPLIER_CODE  AS supplierCode,
        sale.BAT_SUPPLIER_NAME  AS supplierName,
        msg.payName,
        sale.GSSD_PRO_STATUS as saleStatus,
        sto.STO_ATTRIBUTE stoAttribute,
        sto.STO_IF_DTP stoIfDtp,
        sto.STO_IF_MEDICALCARE stoIfMedical,
        sto.STO_TAX_CLASS stoTaxClass,
        ifnull(sale.GSSH_REGISTER_VOUCHER_ID,'') thirdVoucherId
        FROM
        (
        SELECT
        ssd.CLIENT,
        ssd.GSSD_BR_ID,
        ssd.GSSD_BILL_NO,
        ssd.GSSD_DATE,
        ssh.GSSH_TIME,
        ssd.GSSD_PRC1,
        ssd.GSSD_QTY,
        ssd.GSSD_AMT,
        ssd.GSSD_PRO_ID,
        ssd.GSSD_MOV_TAX,
        ssd.GSSD_SALER_ID,
        ssd.GSSD_DOCTOR_ID,
        ssh.GSSH_EMP,
        ssh.GSSH_HYK_NO,
        ssd.GSSD_BATCH_NO,
        ssd.GSSD_BATCH,
        ssd.GSSD_VALID_DATE,
        ssd.GSSD_SERIAL,
        bi.BAT_SUPPLIER_CODE,
        bi.BAT_SUPPLIER_NAME,
        ssd.GSSD_PRO_STATUS,
        DATEDIFF(date_format( ssd.GSSD_VALID_DATE, '%Y-%m-%d' ),date_format( ssd.GSSD_DATE , '%Y-%m-%d' )) expiryDay,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_AMT ELSE ssd.GSSD_ADD_AMT * - 1
        END
        AS GSSD_ADD_AMT,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_TAX ELSE ssd.GSSD_ADD_TAX * - 1
        END
        AS GSSD_ADD_TAX,
        ssh.GSSH_REGISTER_VOUCHER_ID
        FROM
        GAIA_SD_SALE_H ssh
        LEFT JOIN GAIA_SD_SALE_D ssd ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND
        ssd.GSSD_BR_ID = ssh.GSSH_BR_ID)
        left join   GAIA_SD_BATCH_CHANGE sbc ON ssd.CLIENT = sbc.CLIENT
        AND ssd.GSSD_BR_ID = sbc.GSBC_BR_ID
        AND ssd.GSSD_BILL_NO = sbc.GSBC_VOUCHER_ID
        AND ssd.GSSD_SERIAL = sbc.GSBC_SERIAL
        AND ssd.GSSD_PRO_ID = sbc.GSBC_PRO_ID
        AND ssd.GSSD_BATCH_NO = sbc.GSBC_BATCH_NO
        LEFT JOIN GAIA_BATCH_INFO bi ON sbc.CLIENT = bi.CLIENT

        AND sbc.GSBC_BATCH_NO = bi.BAT_BATCH_NO
        AND sbc.GSBC_BATCH = bi.BAT_BATCH
        LEFT JOIN GAIA_SUPPLIER_BUSINESS sb ON bi.BAT_SUPPLIER_CODE = sb.SUP_SELF_CODE
        AND bi.CLIENT = sb.CLIENT
        AND bi.BAT_SITE_CODE = sb.SUP_SITE
        WHERE
        ssh.CLIENT = #{clientId}
        AND ssh.GSSH_HIDE_FLAG = '0'
        <if test="memberCarArr != null and memberCarArr.length > 0">
            AND ssh.GSSH_HYK_NO IN
            <foreach collection="memberCarArr" open="(" separator="," item="item" close=")">
                #{item}
            </foreach>
        </if>
        <if test="brId != null and brId != ''">
            AND ssd.GSSD_BR_ID = #{brId}
        </if>
        <if test="saleStatusList != null and saleStatusList.size() > 0">
            and ssd.GSSD_PRO_STATUS in
            <foreach collection="saleStatusList" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and ssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="queryUserId != null and queryUserId != ''">
            AND ssd.GSSD_SALER_ID = #{queryUserId}
        </if>
        <if test="empUserId != null and empUserId != ''">
            AND ssh.GSSH_EMP = #{empUserId}
        </if>

        <if test="queryDoctorId != null and queryDoctorId != ''">
            AND ssd.GSSD_DOCTOR_ID = #{queryDoctorId}
        </if>
        <if test="proArr != null and proArr.length > 0 ">
            and ssd.GSSD_PRO_ID IN
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="queryStartDate != null and queryStartDate != ''">
            and ssd.GSSD_DATE &gt;= #{queryStartDate}
        </if>
        <if test="queryEndDate != null and queryEndDate != ''">
            and ssd.GSSD_DATE &lt;= #{queryEndDate}
        </if>

        <if test="batchNo != null and batchNo != ''">
            AND ssd.GSSD_BATCH_NO = #{batchNo}
        </if>

        <if test="billNoArr != null and billNoArr.length > 0">
            AND ssd.GSSD_BILL_NO IN
            <foreach collection="billNoArr" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="thirdVoucherId != null and thirdVoucherId != ''">
            and ssh.GSSH_REGISTER_VOUCHER_ID = #{thirdVoucherId}
        </if>
        GROUP BY ssd.CLIENT,ssd.GSSD_BR_ID,ssd.GSSD_BILL_NO, ssd.GSSD_SERIAL,ssd.GSSD_PRO_ID,ssd.GSSD_BATCH_NO
        ) sale
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON ( pb.CLIENT = sale.CLIENT AND pb.PRO_SITE = sale.GSSD_BR_ID AND
        pb.PRO_SELF_CODE = sale.GSSD_PRO_ID )
        LEFT JOIN GAIA_STORE_DATA sto ON ( sto.CLIENT = sale.CLIENT AND sto.STO_CODE = sale.GSSD_BR_ID )
        LEFT JOIN GAIA_USER_DATA ud1 ON ( ud1.CLIENT = sale.CLIENT AND ud1.USER_ID = sale.GSSD_SALER_ID )
        LEFT JOIN GAIA_USER_DATA ud2 ON ( ud2.CLIENT = sale.CLIENT AND ud2.USER_ID = sale.GSSD_DOCTOR_ID )
        LEFT JOIN GAIA_USER_DATA ud3 ON ( ud3.CLIENT = sale.CLIENT AND ud3.USER_ID = sale.GSSH_EMP )
        LEFT JOIN GAIA_SD_MEMBER_CARD gsmc on gsmc.CLIENT=sale.client and gsmc.GSMBC_CARD_ID=sale.GSSH_HYK_NO
        LEFT JOIN GAIA_SD_MEMBER_BASIC gsmb on gsmb.CLIENT=gsmc.CLIENT and gsmb.GSMB_MEMBER_ID=gsmc.GSMBC_MEMBER_ID
        LEFT JOIN (
        SELECT
        *
        FROM
        (
        SELECT
        PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS
        )
        proClass
        GROUP BY
        classId
        ) pc ON pc.classId = pb.PRO_CLASS
        LEFT JOIN (
        SELECT
        GSSPM_BR_ID,
        GSSPM_BILL_NO,
        GROUP_CONCAT(GSSPM_NAME SEPARATOR ';') payName
        FROM
        GAIA_SD_SALE_PAY_MSG
        WHERE
        CLIENT = #{clientId}
        AND GSSPM_TYPE = '1'
        <if test="brId != null and brId != ''">
            AND GSSPM_BR_ID = #{brId}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and GSSPM_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        GROUP BY
        GSSPM_BILL_NO
        ) msg ON msg.GSSPM_BR_ID = sale.GSSD_BR_ID AND msg.GSSPM_BILL_NO = sale.GSSD_BILL_NO
        WHERE 1=1
        AND not EXISTS (select 1 from GAIA_SALES_CATALOG where CLIENT = pb.CLIENT and PRO_SELF_CODE=pb.PRO_SELF_CODE and
        IS_DELETE = 0 and `STATUS` in (1,2))
        <if test="flag == 1">
            AND (pb.PRO_OUT != '1' OR pb.PRO_OUT is null)
        </if>
        <if test="zdy1 != null and zdy1.length > 0">
            and pb.PRO_ZDY1 in
            <foreach collection="zdy1" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy2 != null and zdy2.length > 0">
            and pb.PRO_ZDY2 in
            <foreach collection="zdy2" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy3 != null and zdy3.length > 0">
            and pb.PRO_ZDY3 in
            <foreach collection="zdy3" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy4 != null and zdy4.length > 0">
            and pb.PRO_ZDY4 in
            <foreach collection="zdy4" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy5 != null and zdy5.length > 0">
            and pb.PRO_ZDY5 in
            <foreach collection="zdy5" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="saleClass != null and saleClass.length > 0">
            and pb.PRO_SLAE_CLASS in
            <foreach collection="saleClass" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="proPosition != null and proPosition.length > 0">
            and pb.PRO_POSITION in
            <foreach collection="proPosition" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="specialType != null and specialType!=''">
            <choose>
                <when test="specialType == '0'.toString()">
                    and  (pb.PRO_CLASS like '1%' or pb.PRO_CLASS like '2%')
                </when>
                <when test="specialType == '1'.toString()">
                    and pb.PRO_CLASS like '5%'
                </when>
                <when test="specialType == '2'.toString()">
                    and pb.PRO_CONTROL_CLASS like '5%'
                </when>
                <when test="specialType == '3'.toString()">
                    and pb.PRO_CLASS like '4%'
                </when>
            </choose>
        </if>
        <!--<if test="proSaleClass != null and proSaleClass != ''">-->
            <!--AND pb.PRO_SLAE_CLASS = #{proSaleClass}-->
        <!--</if>-->
        <if test="proSaleClassList != null and proSaleClassList.size > 0">
            AND pb.PRO_SLAE_CLASS in
            <foreach collection="proSaleClassList" separator="," open="(" close=")" item="proSaleClass" >
                #{proSaleClass}
            </foreach>
        </if>
        <if test="purchase != null and purchase != ''">
            and pb.PRO_NO_PURCHASE = #{purchase}
        </if>
        <if test="payName != null and payName.length > 0">
            and
            <foreach collection="payName" item="item" index="index" open="(" close=")" separator="OR">
                msg.payName like CONCAT('%',#{item},'%')
            </foreach>
        </if>
        <if test="proTssx != null and proTssx.size() > 0">
            AND pb.PRO_TSSX in
            <foreach collection="proTssx" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        ) tab
        where 1=1
        <if test="memberName != null and memberName != ''">
            AND (tab.hykName LIKE '%${memberName}%' OR tab.hykMobile LIKE '%${memberName}%' OR tab.hykNo LIKE
            '%${memberName}%')
        </if>
        <if test="supplierCode != null and supplierCode != ''">
            AND tab.supplierCode = #{supplierCode}
        </if>
        <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
            AND (tab.amt-tab.addAmt-tab.addTxa)/tab.amt*100 &lt;= #{grossProfitRateMax} +0
        </if>
        <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
            AND (tab.amt-tab.addAmt-tab.addTxa)/tab.amt*100 &gt;= #{grossProfitRateMin} +0
        </if>
        <if test="classArrs != null and classArrs.size > 0">
            and tab.PRO_CLASS in
            <foreach collection="classArrs" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="expiryDay != null and expiryDay !=''">
            and tab.expiryDay &lt;=#{expiryDay}
        </if>
        <if test="factory != null and factory != ''">
            AND (tab.factoryCode LIKE '%${factory}%' OR tab.factoryName LIKE '%${factory}%')
        </if>
        <if test="medProdctStatus != null and medProdctStatus != ''">
            <if test="medProdctStatus == '1'.toString() ">
                AND ( tab.PRO_IF_MED = #{medProdctStatus} OR ifnull(tab.medProdctCode,'') != '')
            </if>
            <if test="medProdctStatus == '0'.toString() ">
                AND (tab.PRO_IF_MED = #{medProdctStatus} OR (ifnull(tab.medProdctCode,'') = '' AND ifnull(tab.PRO_IF_MED
                ,'') = ''))
            </if>
        </if>
        <include refid="STORE_PERSON_SALE_DETAIL" />
        ORDER BY
        saleDate,
        stoCode,
        selfCode
    </select>
<!--q-->
    <sql id="STORE_PERSON_SALE_DETAIL">
        <trim prefix="AND (" prefixOverrides="OR" suffix=")" >
            <if test="stoGssgTypes!=null and stoGssgTypes.size">
                EXISTS (
                SELECT 1 FROM GAIA_SD_STORES_GROUP gssg WHERE tab.CLIENT = gssg.CLIENT AND tab.stoCode = gssg.GSSG_BR_ID
                AND (gssg.GSSG_TYPE,gssg.GSSG_ID) IN
                <foreach collection="stoGssgTypes" item="stoGssgType" open="(" close=")" separator="," >
                    (#{stoGssgType.gssgType},#{stoGssgType.gssgId})
                </foreach>
                )
            </if>
            <if test="stoAttributes!=null and stoAttributes.size">
                OR tab.stoAttribute IN
                <foreach collection="stoAttributes" item="stoAttribute" open="(" close=")" separator="," >
                    #{stoAttribute}
                </foreach>
            </if>
            <if test="stoAttribute==''" >
                OR tab.stoAttribute IS NOT NULL AND tab.stoAttribute != ''
            </if>
            <if test="stoIfMedicals!=null and stoIfMedicals.size">
                OR tab.stoIfMedical IN
                <foreach collection="stoIfMedicals" item="stoIfMedical" open="(" close=")" separator="," >
                    #{stoIfMedical}
                </foreach>
            </if>
            <if test="stoIfMedical==''" >
                OR tab.stoIfMedical IS NOT NULL AND tab.stoIfMedical != ''
            </if>
            <if test="stoTaxClasss!=null and stoTaxClasss.size">
                OR tab.stoTaxClass IN
                <foreach collection="stoTaxClasss" item="stoTaxClass" open="(" close=")" separator="," >
                    #{stoTaxClass}
                </foreach>
            </if>
            <if test="stoTaxClass==''" >
                OR tab.stoTaxClass IS NOT NULL AND tab.stoTaxClass != ''
            </if>
            <if test="stoIfDtps!=null and stoIfDtps.size">
                OR tab.stoIfDtp IN
                <foreach collection="stoIfDtps" item="stoIfDtp" open="(" close=")" separator="," >
                    #{stoIfDtp}
                </foreach>
            </if>
            <if test="stoIfDtp==''" >
                OR tab.stoIfDtp IS NOT NULL AND tab.stoIfDtp != ''
            </if>
        </trim>
    </sql>

    <!--<select id="getSalespersonsSalesDetails"-->
            <!--resultType="com.gys.report.entity.SalespersonsSalesDetailsOutData">-->
        <!--select * from (-->
        <!--SELECT-->
        <!--sto.STO_CODE stoCode,-->
        <!--IFNULL( sto.STO_SHORT_NAME, sto.STO_NAME ) stoName,-->
        <!--DATE_FORMAT(CONCAT(sale.GSSD_DATE,sale.GSSH_TIME),'%Y-%m-%d %H:%i:%s') saleDate,-->
        <!--sale.GSSD_BILL_NO billNo,-->
        <!--pb.PRO_SELF_CODE selfCode,-->
        <!--IFNULL( pb.PRO_NAME, pb.PRO_COMMONNAME ) proName,-->
        <!--pb.PRO_COMMONNAME proCommonName,-->
        <!--pb.PRO_SPECS specs,-->
        <!--pb.PRO_UNIT unit,-->
        <!--pb.PRO_FACTORY_CODE factoryCode,-->
        <!--pb.PRO_FACTORY_NAME factoryName,-->
        <!--pb.PRO_MED_ID medProdctCode,-->
        <!--pb.PRO_IF_MED,-->
        <!--pb.PRO_ZDY1 AS zdy1,-->
        <!--pb.PRO_ZDY2 AS zdy2,-->
        <!--pb.PRO_ZDY3 AS zdy3,-->
        <!--pb.PRO_ZDY4 AS zdy4,-->
        <!--pb.PRO_ZDY5 AS zdy5,-->
        <!--pb.PRO_SLAE_CLASS AS proSaleClass,-->
        <!--pb.PRO_SCLASS AS prosClass,-->
        <!--case pb.PRO_NO_PURCHASE-->
        <!--when '1' then '是'-->
        <!--when '0' then '否'-->
        <!--end AS purchase,-->
        <!--pb.PRO_POSITION proPosition,-->
        <!--CASE-->
        <!--WHEN pb.PRO_IF_MED = '1' THEN-->
        <!--'是'-->
        <!--WHEN pb.PRO_MED_ID IS NOT NULL THEN-->
        <!--'是' ELSE '否'-->
        <!--END ifMed,-->
        <!--sale.GSSD_PRC1 prcOne,-->
        <!--sale.GSSD_QTY qty,-->
        <!--sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) AS amountReceivable,-->
        <!--sale.GSSD_AMT amt,-->
        <!--sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX includeTaxSale,-->
        <!--sale.GSSD_AMT - (sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX) grossProfitMargin,-->
        <!--(sale.GSSD_AMT - sale.GSSD_ADD_AMT - sale.GSSD_ADD_TAX)-->
        <!--/ sale.GSSD_AMT-->
        <!--* 100 grossProfitRate,-->
        <!--sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) - sale.GSSD_AMT discount,-->
        <!--(sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) - sale.GSSD_AMT )/( sale.GSSD_PRC1 * sale.GSSD_QTY )* 100 discountRate,-->
        <!--sale.GSSD_SALER_ID salerId,-->
        <!--ud1.USER_NAM salerName,-->
        <!--sale.GSSD_DOCTOR_ID doctorId,-->
        <!--ud2.USER_NAM doctorName,-->
        <!--sale.GSSH_EMP empId,-->
        <!--ud3.USER_NAM empName,-->
        <!--sale.GSSH_HYK_NO hykNo,-->
        <!--gsmb.GSMB_NAME hykName,-->
        <!--gsmb.GSMB_MOBILE hykMobile,-->
        <!--gsmb.GSMB_MEMBER_ID memberId,-->
        <!--concat( pc.PRO_BIG_CLASS_CODE, '-', pc.PRO_BIG_CLASS_NAME ) bigClass,-->
        <!--concat( pc.PRO_MID_CLASS_CODE, '-', pc.PRO_MID_CLASS_NAME ) midClass,-->
        <!--concat( pc.PRO_CLASS_CODE, '-', pc.PRO_CLASS_NAME ) proClass,-->
        <!--pb.PRO_CLASS,-->
        <!--sale.GSSD_BATCH_NO batchNo,-->
        <!--sale.GSSD_VALID_DATE validData,-->
        <!--sale.expiryDay,-->
        <!--ifnull(bi.BAT_SUPPLIER_CODE,bi2.BAT_SUPPLIER_CODE) AS supplierCode,-->
        <!--ifnull(bi.BAT_SUPPLIER_NAME,bi2.BAT_SUPPLIER_NAME) AS supplierName,-->
        <!--msg.payName-->
        <!--FROM-->
        <!--(-->
        <!--SELECT-->
        <!--ssd.CLIENT,-->
        <!--ssd.GSSD_BR_ID,-->
        <!--ssd.GSSD_BILL_NO,-->
        <!--ssd.GSSD_DATE,-->
        <!--ssh.GSSH_TIME,-->
        <!--ssd.GSSD_PRC1,-->
        <!--ssd.GSSD_QTY,-->
        <!--ssd.GSSD_AMT,-->
        <!--ssd.GSSD_PRO_ID,-->
        <!--ssd.GSSD_MOV_TAX,-->
        <!--ssd.GSSD_SALER_ID,-->
        <!--ssd.GSSD_DOCTOR_ID,-->
        <!--ssh.GSSH_EMP,-->
        <!--ssh.GSSH_HYK_NO,-->
        <!--ssd.GSSD_BATCH_NO,-->
        <!--ssd.GSSD_BATCH,-->
        <!--ssd.GSSD_VALID_DATE,-->
        <!--DATEDIFF(date_format( ssd.GSSD_VALID_DATE, '%Y-%m-%d' ),date_format( ssd.GSSD_DATE , '%Y-%m-%d' )) expiryDay,-->
        <!--CASE-->
        <!--WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN-->
        <!--ssd.GSSD_ADD_AMT ELSE ssd.GSSD_ADD_AMT * - 1-->
        <!--END-->
        <!--AS GSSD_ADD_AMT,-->
        <!--CASE-->
        <!--WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN-->
        <!--ssd.GSSD_ADD_TAX ELSE ssd.GSSD_ADD_TAX * - 1-->
        <!--END-->
        <!--AS GSSD_ADD_TAX-->
        <!--FROM-->
        <!--GAIA_SD_SALE_H ssh-->
        <!--LEFT JOIN GAIA_SD_SALE_D ssd ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND-->
        <!--ssd.GSSD_BR_ID = ssh.GSSH_BR_ID AND ssd.GSSD_DATE = ssh.GSSH_DATE)-->
        <!--WHERE-->
        <!--ssh.CLIENT = #{clientId}-->
        <!--AND ssh.GSSH_HIDE_FLAG = '0'-->
        <!--<if test="brId != null and brId != ''">-->
            <!--AND ssd.GSSD_BR_ID = #{brId}-->
        <!--</if>-->
        <!--<if test="siteArr != null and siteArr.length > 0">-->
            <!--and ssd.GSSD_BR_ID in-->
            <!--<foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">-->
                <!--#{item}-->
            <!--</foreach>-->
        <!--</if>-->
        <!--<if test="queryUserId != null and queryUserId != ''">-->
            <!--AND ssd.GSSD_SALER_ID = #{queryUserId}-->
        <!--</if>-->
        <!--<if test="empUserId != null and empUserId != ''">-->
            <!--AND ssh.GSSH_EMP = #{empUserId}-->
        <!--</if>-->

        <!--<if test="queryDoctorId != null and queryDoctorId != ''">-->
            <!--AND ssd.GSSD_DOCTOR_ID = #{queryDoctorId}-->
        <!--</if>-->
        <!--<if test="proArr != null and proArr.length > 0 ">-->
            <!--and ssd.GSSD_PRO_ID IN-->
            <!--<foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">-->
                <!--#{item}-->
            <!--</foreach>-->
        <!--</if>-->
        <!--<if test="queryStartDate != null and queryStartDate != ''">-->
            <!--and ssd.GSSD_DATE &gt;= #{queryStartDate}-->
        <!--</if>-->
        <!--<if test="queryEndDate != null and queryEndDate != ''">-->
            <!--and ssd.GSSD_DATE &lt;= #{queryEndDate}-->
        <!--</if>-->

        <!--<if test="batchNo != null and batchNo != ''">-->
            <!--AND ssd.GSSD_BATCH_NO = #{batchNo}-->
        <!--</if>-->

        <!--<if test="billNoArr != null and billNoArr.length > 0">-->
            <!--AND ssd.GSSD_BILL_NO IN-->
            <!--<foreach collection="billNoArr" item="item" open="(" separator="," close=")">-->
                <!--#{item}-->
            <!--</foreach>-->
        <!--</if>-->
        <!--) sale-->
        <!--LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON ( pb.CLIENT = sale.CLIENT AND pb.PRO_SITE = sale.GSSD_BR_ID AND-->
        <!--pb.PRO_SELF_CODE = sale.GSSD_PRO_ID )-->
        <!--LEFT JOIN GAIA_STORE_DATA sto ON ( sto.CLIENT = sale.CLIENT AND sto.STO_CODE = sale.GSSD_BR_ID )-->
        <!--LEFT JOIN GAIA_USER_DATA ud1 ON ( ud1.CLIENT = sale.CLIENT AND ud1.USER_ID = sale.GSSD_SALER_ID )-->
        <!--LEFT JOIN GAIA_USER_DATA ud2 ON ( ud2.CLIENT = sale.CLIENT AND ud2.USER_ID = sale.GSSD_DOCTOR_ID )-->
        <!--LEFT JOIN GAIA_USER_DATA ud3 ON ( ud3.CLIENT = sale.CLIENT AND ud3.USER_ID = sale.GSSH_EMP )-->
        <!--LEFT JOIN GAIA_SD_MEMBER_CARD gsmc on gsmc.CLIENT=sale.client and gsmc.GSMBC_CARD_ID=sale.GSSH_HYK_NO-->
        <!--LEFT JOIN GAIA_SD_MEMBER_BASIC gsmb on gsmb.CLIENT=gsmc.CLIENT and gsmb.GSMB_MEMBER_ID=gsmc.GSMBC_MEMBER_ID-->
        <!--LEFT JOIN GAIA_BATCH_INFO bi ON (sale.CLIENT = bi.CLIENT AND sale.GSSD_BR_ID = bi.BAT_SITE_CODE AND-->
        <!--sale.GSSD_PRO_ID = bi.BAT_PRO_CODE AND sale.GSSD_BATCH = bi.BAT_BATCH)-->
        <!--LEFT JOIN GAIA_BATCH_INFO bi2 ON (sale.CLIENT = bi2.CLIENT AND sto.STO_DC_CODE = bi2.BAT_SITE_CODE AND-->
        <!--sale.GSSD_PRO_ID = bi2.BAT_PRO_CODE AND sale.GSSD_BATCH = bi2.BAT_BATCH)-->
        <!--LEFT JOIN (-->
        <!--SELECT-->
        <!--*-->
        <!--FROM-->
        <!--(-->
        <!--SELECT-->
        <!--PRO_BIG_CLASS_CODE AS classId,-->
        <!--PRO_BIG_CLASS_CODE,-->
        <!--PRO_BIG_CLASS_NAME,-->
        <!--NULL AS PRO_MID_CLASS_CODE,-->
        <!--NULL AS PRO_MID_CLASS_NAME,-->
        <!--NULL AS PRO_CLASS_CODE,-->
        <!--NULL AS PRO_CLASS_NAME-->
        <!--FROM-->
        <!--GAIA_PRODUCT_CLASS UNION ALL-->
        <!--SELECT-->
        <!--PRO_MID_CLASS_CODE AS classId,-->
        <!--PRO_BIG_CLASS_CODE,-->
        <!--PRO_BIG_CLASS_NAME,-->
        <!--PRO_MID_CLASS_CODE,-->
        <!--PRO_MID_CLASS_NAME,-->
        <!--NULL AS PRO_CLASS_CODE,-->
        <!--NULL AS PRO_CLASS_NAME-->
        <!--FROM-->
        <!--GAIA_PRODUCT_CLASS UNION ALL-->
        <!--SELECT-->
        <!--PRO_CLASS_CODE AS classId,-->
        <!--PRO_BIG_CLASS_CODE,-->
        <!--PRO_BIG_CLASS_NAME,-->
        <!--PRO_MID_CLASS_CODE,-->
        <!--PRO_MID_CLASS_NAME,-->
        <!--PRO_CLASS_CODE,-->
        <!--PRO_CLASS_NAME-->
        <!--FROM-->
        <!--GAIA_PRODUCT_CLASS-->
        <!--)-->
        <!--proClass-->
        <!--GROUP BY-->
        <!--classId-->
        <!--) pc ON pc.classId = pb.PRO_CLASS-->
        <!--LEFT JOIN (-->
        <!--SELECT-->
        <!--GSSPM_BR_ID,-->
        <!--GSSPM_BILL_NO,-->
        <!--GROUP_CONCAT(GSSPM_NAME SEPARATOR ';') payName-->
        <!--FROM-->
        <!--GAIA_SD_SALE_PAY_MSG-->
        <!--WHERE-->
        <!--CLIENT = #{clientId}-->
        <!--AND GSSPM_TYPE = '1'-->
        <!--<if test="brId != null and brId != ''">-->
            <!--AND GSSPM_BR_ID = #{brId}-->
        <!--</if>-->
        <!--<if test="siteArr != null and siteArr.length > 0">-->
            <!--and GSSPM_BR_ID in-->
            <!--<foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">-->
                <!--#{item}-->
            <!--</foreach>-->
        <!--</if>-->
        <!--GROUP BY-->
        <!--GSSPM_BILL_NO-->
        <!--) msg ON msg.GSSPM_BR_ID = sale.GSSD_BR_ID AND msg.GSSPM_BILL_NO = sale.GSSD_BILL_NO-->
        <!--WHERE 1=1-->
        <!--AND not EXISTS (select 1 from GAIA_SALES_CATALOG where CLIENT = pb.CLIENT and PRO_SELF_CODE=pb.PRO_SELF_CODE and-->
        <!--IS_DELETE = 0 and `STATUS` in (1,2))-->
        <!--<if test="flag == 1">-->
            <!--AND (pb.PRO_OUT != '1' OR pb.PRO_OUT is null)-->
        <!--</if>-->
        <!--<if test="zdy1 != null and zdy1.length > 0">-->
            <!--and pb.PRO_ZDY1 in-->
            <!--<foreach collection="zdy1" item="item" index="index" open="(" separator="," close=")">-->
                <!--#{item}-->
            <!--</foreach>-->
        <!--</if>-->
        <!--<if test="zdy2 != null and zdy2.length > 0">-->
            <!--and pb.PRO_ZDY2 in-->
            <!--<foreach collection="zdy2" item="item" index="index" open="(" separator="," close=")">-->
                <!--#{item}-->
            <!--</foreach>-->
        <!--</if>-->
        <!--<if test="zdy3 != null and zdy3.length > 0">-->
            <!--and pb.PRO_ZDY3 in-->
            <!--<foreach collection="zdy3" item="item" index="index" open="(" separator="," close=")">-->
                <!--#{item}-->
            <!--</foreach>-->
        <!--</if>-->
        <!--<if test="zdy4 != null and zdy4.length > 0">-->
            <!--and pb.PRO_ZDY4 in-->
            <!--<foreach collection="zdy4" item="item" index="index" open="(" separator="," close=")">-->
                <!--#{item}-->
            <!--</foreach>-->
        <!--</if>-->
        <!--<if test="zdy5 != null and zdy5.length > 0">-->
            <!--and pb.PRO_ZDY5 in-->
            <!--<foreach collection="zdy5" item="item" index="index" open="(" separator="," close=")">-->
                <!--#{item}-->
            <!--</foreach>-->
        <!--</if>-->
        <!--<if test="saleClass != null and saleClass.length > 0">-->
            <!--and pb.PRO_SLAE_CLASS in-->
            <!--<foreach collection="saleClass" item="item" index="index" open="(" separator="," close=")">-->
                <!--#{item}-->
            <!--</foreach>-->
        <!--</if>-->
        <!--<if test="proPosition != null and proPosition.length > 0">-->
            <!--and pb.PRO_POSITION in-->
            <!--<foreach collection="proPosition" item="item" index="index" open="(" separator="," close=")">-->
                <!--#{item}-->
            <!--</foreach>-->
        <!--</if>-->
        <!--<if test="specialType != null and specialType!=''">-->
            <!--<choose>-->
                <!--<when test="specialType == '0'.toString()">-->
                    <!--and  (pb.PRO_CLASS like '1%' or pb.PRO_CLASS like '2%')-->
                <!--</when>-->
                <!--<when test="specialType == '1'.toString()">-->
                    <!--and pb.PRO_CLASS like '5%'-->
                <!--</when>-->
                <!--<when test="specialType == '2'.toString()">-->
                    <!--and pb.PRO_CONTROL_CLASS like '5%'-->
                <!--</when>-->
                <!--<when test="specialType == '3'.toString()">-->
                    <!--and pb.PRO_CLASS like '4%'-->
                <!--</when>-->
            <!--</choose>-->
        <!--</if>-->
        <!--<if test="proSaleClass != null and proSaleClass != ''">-->
            <!--AND pb.PRO_SLAE_CLASS = #{proSaleClass}-->
        <!--</if>-->
        <!--<if test="purchase != null and purchase != ''">-->
            <!--and pb.PRO_NO_PURCHASE = #{purchase}-->
        <!--</if>-->
        <!--<if test="payName != null and payName.length > 0">-->
            <!--and-->
            <!--<foreach collection="payName" item="item" index="index" open="(" close=")" separator="OR">-->
                <!--msg.payName like CONCAT('%',#{item},'%')-->
            <!--</foreach>-->
        <!--</if>-->
        <!--) tab-->
        <!--where 1=1-->
        <!--<if test="memberName != null and memberName != ''">-->
            <!--AND (tab.hykName LIKE '%${memberName}%' OR tab.hykMobile LIKE '%${memberName}%' OR tab.hykNo LIKE-->
            <!--'%${memberName}%')-->
        <!--</if>-->
        <!--<if test="supplierCode != null and supplierCode != ''">-->
            <!--AND tab.supplierCode = #{supplierCode}-->
        <!--</if>-->
        <!--<if test="grossProfitRateMax != null and grossProfitRateMax != ''">-->
            <!--AND replace(tab.grossProfitRate,'%','') &lt;= #{grossProfitRateMax} +0-->
        <!--</if>-->
        <!--<if test="grossProfitRateMin != null and grossProfitRateMin != ''">-->
            <!--AND replace(tab.grossProfitRate,'%','') &gt;= #{grossProfitRateMin} +0-->
        <!--</if>-->
        <!--<if test="classArrs != null and classArrs.size > 0">-->
            <!--and tab.PRO_CLASS in-->
            <!--<foreach collection="classArrs" item="item" index="index" open="(" separator="," close=")">-->
                <!--#{item}-->
            <!--</foreach>-->
        <!--</if>-->
        <!--<if test="expiryDay != null and expiryDay !=''">-->
            <!--and tab.expiryDay &lt;=#{expiryDay}-->
        <!--</if>-->
        <!--<if test="factory != null and factory != ''">-->
            <!--AND (tab.factoryCode LIKE '%${factory}%' OR tab.factoryName LIKE '%${factory}%')-->
        <!--</if>-->
        <!--<if test="medProdctStatus != null and medProdctStatus != ''">-->
            <!--<if test="medProdctStatus == '1'.toString() ">-->
                <!--AND ( tab.PRO_IF_MED = #{medProdctStatus} OR ifnull(tab.medProdctCode,'') != '')-->
            <!--</if>-->
            <!--<if test="medProdctStatus == '0'.toString() ">-->
                <!--AND (tab.PRO_IF_MED = #{medProdctStatus} OR (ifnull(tab.medProdctCode,'') = '' AND ifnull(tab.PRO_IF_MED-->
                <!--,'') = ''))-->
            <!--</if>-->
        <!--</if>-->
        <!--ORDER BY-->
        <!--saleDate,-->
        <!--stoCode,-->
        <!--selfCode-->
    <!--</select>-->
    <select id="getSalespersonsSalesByPro"
            resultType="com.gys.report.entity.SalespersonsSalesDetailsOutData">
        select
        tab.selfCode,
        tab.proName,
        tab.proCommonName,
        tab.specs,
        tab.unit,
        tab.factoryName,
        tab.medProdctCode,
        tab.ifMed,
        tab.proTssx,
        tab.proRegisterNo,
        sum(tab.qty) qty,
        sum(tab.amountReceivable) amountReceivable,
        sum(tab.amt) amt,
        sum(tab.includeTaxSale) includeTaxSale,
        sum(tab.grossProfitMargin) grossProfitMargin,
        concat(round(sum(tab.grossProfitMargin)/ sum(tab.amt)* 100, 2),'%' ) grossProfitRate,
        sum(tab.discount) discount,
        concat(round(sum(tab.discount)/sum(tab.amountReceivable),2),'%') discountRate,
        tab.bigClass,
        tab.midClass,
        tab.proClass,
        tab.validData,
        tab.saleStatus
        from (
        SELECT
        pb.PRO_SELF_CODE selfCode,
        IFNULL( pb.PRO_NAME, pb.PRO_COMMONNAME ) proName,
        pb.PRO_COMMONNAME proCommonName,
        pb.PRO_SPECS specs,
        pb.PRO_UNIT unit,
        pb.PRO_FACTORY_NAME factoryName,
        pb.PRO_FACTORY_CODE factoryCode,
        pb.PRO_MED_ID medProdctCode,
        pb.PRO_REGISTER_NO proRegisterNo,
        pb.PRO_IF_MED,
        CASE
        WHEN pb.PRO_IF_MED = '1' THEN
        '是'
        WHEN pb.PRO_MED_ID IS NOT NULL THEN
        '是' ELSE '否'
        END ifMed,
        case pb.PRO_TSSX when '1' then '防疫'
        else '' end AS proTssx,
        sale.GSSD_PRC1 prcOne,
        sale.GSSD_QTY qty,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) AS amountReceivable,
        sale.GSSD_AMT amt,
        sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX includeTaxSale,
        sale.GSSD_AMT - (sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX) grossProfitMargin,
        (sale.GSSD_AMT - sale.GSSD_ADD_AMT - sale.GSSD_ADD_TAX)
        / sale.GSSD_AMT
        * 100 grossProfitRate,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) - sale.GSSD_AMT discount,
        sale.GSSD_SALER_ID salerId,
        ud1.USER_NAM salerName,
        sale.GSSD_DOCTOR_ID doctorId,
        ud2.USER_NAM doctorName,
        sale.GSSH_HYK_NO hykNo,
        gsmb.GSMB_NAME hykName,
        gsmb.GSMB_MOBILE hykMobile,
        gsmb.GSMB_MEMBER_ID memberId,
        concat( pc.PRO_BIG_CLASS_CODE, '-', pc.PRO_BIG_CLASS_NAME ) bigClass,
        concat( pc.PRO_MID_CLASS_CODE, '-', pc.PRO_MID_CLASS_NAME ) midClass,
        concat( pc.PRO_CLASS_CODE, '-', pc.PRO_CLASS_NAME ) proClass,
        pc.PRO_BIG_CLASS_CODE,
        pc.PRO_MID_CLASS_CODE,
        pc.PRO_CLASS_CODE,
        sale.GSSD_VALID_DATE validData,
        sale.GSSD_PRO_STATUS as saleStatus,
        sale.expiryDay
        FROM
        (
        SELECT
        ssd.CLIENT,
        ssd.GSSD_BR_ID,
        ssd.GSSD_BILL_NO,
        ssd.GSSD_DATE,
        ssd.GSSD_PRC1,
        ssd.GSSD_QTY,
        ssd.GSSD_AMT,
        ssd.GSSD_PRO_ID,
        ssd.GSSD_MOV_TAX,
        ssd.GSSD_SALER_ID,
        ssd.GSSD_DOCTOR_ID,
        ssh.GSSH_HYK_NO,
        ssd.GSSD_VALID_DATE,
        ssd.GSSD_PRO_STATUS,
        DATEDIFF(date_format( ssd.GSSD_VALID_DATE, '%Y-%m-%d' ),date_format( now(), '%Y-%m-%d' )) expiryDay,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_AMT ELSE ssd.GSSD_ADD_AMT * - 1
        END
        GSSD_ADD_AMT,

        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_TAX ELSE ssd.GSSD_ADD_TAX * - 1
        END
        GSSD_ADD_TAX
        FROM
        GAIA_SD_SALE_H ssh
        LEFT JOIN GAIA_SD_SALE_D ssd ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND
        ssd.GSSD_BR_ID = ssh.GSSH_BR_ID AND ssd.GSSD_DATE = ssh.GSSH_DATE)
        WHERE
        ssh.CLIENT = #{clientId}
        AND ssh.GSSH_HIDE_FLAG = '0'
        <if test="siteArr != null and siteArr.length > 0">
            and ssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="saleStatusList != null and saleStatusList.size() > 0">
            and ssd.GSSD_PRO_STATUS in
            <foreach collection="saleStatusList" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="queryUserId != null and queryUserId != ''">
            AND ssd.GSSD_SALER_ID = #{queryUserId}
        </if>
        <if test="queryDoctorId != null and queryDoctorId != ''">
            AND ssd.GSSD_DOCTOR_ID = #{queryDoctorId}
        </if>
        <if test="queryStartDate != null and queryStartDate != ''">
            and ssd.GSSD_DATE &gt;= #{queryStartDate}
        </if>
        <if test="queryEndDate != null and queryEndDate != ''">
            and ssd.GSSD_DATE &lt;= #{queryEndDate}
        </if>
        <if test="proArr != null and proArr.length > 0 ">
            and ssd.GSSD_PRO_ID IN
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="billNoArr != null and billNoArr.length > 0">
            AND ssd.GSSD_BILL_NO IN
            <foreach collection="billNoArr" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        ) sale
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON ( pb.CLIENT = sale.CLIENT AND pb.PRO_SITE = sale.GSSD_BR_ID AND pb.
        PRO_SELF_CODE = sale.GSSD_PRO_ID )
        LEFT JOIN GAIA_STORE_DATA sto ON ( sto.CLIENT = sale.CLIENT AND sto.STO_CODE = sale.GSSD_BR_ID )
        LEFT JOIN GAIA_USER_DATA ud1 ON ( ud1.CLIENT = sale.CLIENT AND ud1.USER_ID = sale.GSSD_SALER_ID )
        LEFT JOIN GAIA_USER_DATA ud2 ON ( ud2.CLIENT = sale.CLIENT AND ud2.USER_ID = sale.GSSD_DOCTOR_ID )
        LEFT JOIN GAIA_SD_MEMBER_CARD gsmc on gsmc.CLIENT=sale.client and gsmc.GSMBC_CARD_ID=sale.GSSH_HYK_NO
        LEFT JOIN GAIA_SD_MEMBER_BASIC gsmb on gsmb.CLIENT=gsmc.CLIENT and gsmb.GSMB_MEMBER_ID=gsmc.GSMBC_MEMBER_ID

        LEFT JOIN (
        SELECT
        *
        FROM
        (
        SELECT
        PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS
        )
        proClass
        GROUP BY
        classId
        ) pc ON pc.classId = pb.PRO_CLASS
        where not EXISTS (select 1 from GAIA_SALES_CATALOG where CLIENT = pb.CLIENT and PRO_SELF_CODE=pb.PRO_SELF_CODE
        and IS_DELETE = 0 and `STATUS` in (1,2))
        <if test="proTssx != null and proTssx.size() > 0">
            AND pb.PRO_TSSX in
            <foreach collection="proTssx" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        ) tab
        where 1=1
        <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
            AND replace(tab.grossProfitRate,'%','') &lt;= #{grossProfitRateMax} +0
        </if>
        <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
            AND replace(tab.grossProfitRate,'%','') &gt;= #{grossProfitRateMin} +0
        </if>
        <if test="proClass != null and proClass != ''">
            AND (tab.PRO_BIG_CLASS_CODE = #{proClass} OR tab.PRO_MID_CLASS_CODE = #{proClass} OR tab.PRO_CLASS_CODE =
            #{proClass})
        </if>
        <if test="memberName != null and memberName != ''">
            AND (tab.hykName LIKE '%${memberName}%' OR tab.hykMobile LIKE '%${memberName}%' OR tab.hykNo LIKE
            '%${memberName}%')
        </if>
        <if test="factory != null and factory != ''">
            AND (tab.factoryCode LIKE '%${factory}%' OR tab.factoryName LIKE '%${factory}%')
        </if>
        <if test="medProdctStatus != null and medProdctStatus != ''">
            <if test="medProdctStatus == '1'.toString() ">
                AND ( tab.PRO_IF_MED = #{medProdctStatus} OR ifnull(tab.medProdctCode,'') != '')
            </if>
            <if test="medProdctStatus == '0'.toString() ">
                AND (tab.PRO_IF_MED = #{medProdctStatus} OR (ifnull(tab.medProdctCode,'') = '' AND ifnull(tab.PRO_IF_MED
                ,'') = ''))
            </if>
        </if>
        <if test="expiryDay != null and expiryDay !=''">
            and tab.expiryDay &lt;=#{expiryDay}
        </if>
        GROUP BY tab.selfCode
    </select>
    <select id="getSalespersonsSalesByUser"
            resultType="com.gys.report.entity.SalespersonsSalesDetailsOutData">
        select
        <if test="userType == '1'.toString()">
            tab.doctorId userCode,
            tab.doctorName userName,
        </if>
        <if test="userType == '2'.toString()">
            tab.hykMobile userCode,
            tab.hykName userName,
        </if>
        tab.selfCode,
        tab.proName,
        tab.specs,
        tab.unit,
        tab.factoryName,
        tab.medProdctCode,
        tab.ifMed,
        tab.bigClass,
        tab.midClass,
        tab.proClass,
        tab.proRegisterNo,
        sum(tab.qty) qty,
        sum(tab.amountReceivable) amountReceivable,
        sum(tab.amt) amt,
        sum(tab.includeTaxSale) includeTaxSale,
        ifnull(sum(tab.grossProfitMargin),0.00) grossProfitMargin,
        concat(round(sum(tab.grossProfitMargin)/ sum(tab.amt)* 100, 2),'%' ) grossProfitRate,
        ifnull(sum(tab.discount),0.00) discount,
        concat(round(sum(tab.discount)/sum(tab.amountReceivable)*100,2),'%') discountRate,
        tab.validData,
        tab.saleStatus,
        tab.proTssx,
        tab.expiryDay
        from (
        SELECT
        pb.PRO_SELF_CODE selfCode,
        IFNULL( pb.PRO_NAME, pb.PRO_COMMONNAME ) proName,
        pb.PRO_SPECS specs,
        pb.PRO_UNIT unit,
        pb.PRO_FACTORY_NAME factoryName,
        pb.PRO_FACTORY_CODE factoryCode,
        pb.PRO_MED_ID medProdctCode,
        pb.PRO_REGISTER_NO proRegisterNo,
        pb.PRO_IF_MED,
        CASE
        WHEN pb.PRO_IF_MED = '1' THEN
        '是'
        WHEN pb.PRO_MED_ID IS NOT NULL THEN
        '是' ELSE '否'
        END ifMed,
        case pb.PRO_TSSX when '1' then '防疫'
        else '' end AS proTssx,
        sale.GSSD_PRC1 prcOne,
        sale.GSSD_QTY qty,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) AS amountReceivable,
        sale.GSSD_AMT amt,
        sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX includeTaxSale,
        sale.GSSD_AMT - (sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX) grossProfitMargin,
        (sale.GSSD_AMT - sale.GSSD_ADD_AMT - sale.GSSD_ADD_TAX)
        / sale.GSSD_AMT
        * 100 grossProfitRate,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) - sale.GSSD_AMT discount,
        sale.GSSD_SALER_ID salerId,
        ud1.USER_NAM salerName,
        sale.GSSD_DOCTOR_ID doctorId,
        ud2.USER_NAM doctorName,
        sale.GSSH_HYK_NO hykNo,
        gsmb.GSMB_NAME hykName,
        gsmb.GSMB_MOBILE hykMobile,
        gsmb.GSMB_MEMBER_ID memberId,
        concat( pc.PRO_BIG_CLASS_CODE, '-', pc.PRO_BIG_CLASS_NAME ) bigClass,
        concat( pc.PRO_MID_CLASS_CODE, '-', pc.PRO_MID_CLASS_NAME ) midClass,
        concat( pc.PRO_CLASS_CODE, '-', pc.PRO_CLASS_NAME ) proClass,
        pc.PRO_BIG_CLASS_CODE,
        pc.PRO_MID_CLASS_CODE,
        pc.PRO_CLASS_CODE,
        sale.GSSD_VALID_DATE validData,
        sale.GSSD_PRO_STATUS as saleStatus,
        sale.expiryDay
        FROM
        (
        SELECT
        ssd.CLIENT,
        ssd.GSSD_BR_ID,
        ssd.GSSD_BILL_NO,
        ssd.GSSD_DATE,
        ssd.GSSD_PRC1,
        ssd.GSSD_QTY,
        ssd.GSSD_AMT,
        ssd.GSSD_PRO_ID,
        ssd.GSSD_MOV_TAX,
        ssd.GSSD_SALER_ID,
        ssd.GSSD_DOCTOR_ID,
        ssh.GSSH_HYK_NO,
        ssd.GSSD_VALID_DATE,
        ssd.GSSD_PRO_STATUS,
        DATEDIFF(date_format( ssd.GSSD_VALID_DATE, '%Y-%m-%d' ),date_format( now(), '%Y-%m-%d' )) expiryDay,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_AMT ELSE ssd.GSSD_ADD_AMT * - 1
        END
        GSSD_ADD_AMT,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_TAX ELSE ssd.GSSD_ADD_TAX * - 1
        END
        GSSD_ADD_TAX
        FROM
        GAIA_SD_SALE_H ssh
        LEFT JOIN GAIA_SD_SALE_D ssd ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND
        ssd.GSSD_BR_ID = ssh.GSSH_BR_ID AND ssd.GSSD_DATE = ssh.GSSH_DATE)
        WHERE
        ssh.CLIENT = #{clientId}
        AND ssh.GSSH_HIDE_FLAG = '0'
        <if test="siteArr != null and siteArr.length > 0">
            and ssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="saleStatusList != null and saleStatusList.size() > 0">
            and ssd.GSSD_PRO_STATUS in
            <foreach collection="saleStatusList" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="queryUserId != null and queryUserId != ''">
            AND ssd.GSSD_SALER_ID = #{queryUserId}
        </if>
        <if test="queryDoctorId != null and queryDoctorId != ''">
            AND ssd.GSSD_DOCTOR_ID = #{queryDoctorId}
        </if>
        <if test="queryStartDate != null and queryStartDate != ''">
            and ssd.GSSD_DATE &gt;= #{queryStartDate}
        </if>
        <if test="queryEndDate != null and queryEndDate != ''">
            and ssd.GSSD_DATE &lt;= #{queryEndDate}
        </if>
        <if test="proArr != null and proArr.length > 0 ">
            and ssd.GSSD_PRO_ID IN
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="billNoArr != null and billNoArr.length > 0">
            AND ssd.GSSD_BILL_NO IN
            <foreach collection="billNoArr" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        ) sale
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON ( pb.CLIENT = sale.CLIENT AND pb.PRO_SITE = sale.GSSD_BR_ID AND pb.
        PRO_SELF_CODE = sale.GSSD_PRO_ID )
        LEFT JOIN GAIA_STORE_DATA sto ON ( sto.CLIENT = sale.CLIENT AND sto.STO_CODE = sale.GSSD_BR_ID )
        LEFT JOIN GAIA_USER_DATA ud1 ON ( ud1.CLIENT = sale.CLIENT AND ud1.USER_ID = sale.GSSD_SALER_ID )
        LEFT JOIN GAIA_USER_DATA ud2 ON ( ud2.CLIENT = sale.CLIENT AND ud2.USER_ID = sale.GSSD_DOCTOR_ID )
        LEFT JOIN GAIA_SD_MEMBER_CARD gsmc on gsmc.CLIENT=sale.client and gsmc.GSMBC_CARD_ID=sale.GSSH_HYK_NO
        LEFT JOIN GAIA_SD_MEMBER_BASIC gsmb on gsmb.CLIENT=gsmc.CLIENT and gsmb.GSMB_MEMBER_ID=gsmc.GSMBC_MEMBER_ID

        LEFT JOIN (
        SELECT
        *
        FROM
        (
        SELECT
        PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS
        )
        proClass
        GROUP BY
        classId
        ) pc ON pc.classId = pb.PRO_CLASS
        where not EXISTS (select 1 from GAIA_SALES_CATALOG where CLIENT = pb.CLIENT and PRO_SELF_CODE=pb.PRO_SELF_CODE
        and IS_DELETE = 0 and `STATUS` in (1,2))
        <if test="proTssx != null and proTssx.size() > 0">
            AND pb.PRO_TSSX in
            <foreach collection="proTssx" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>

        ) tab
        where 1=1
        <if test="userType == '1'.toString()">
            AND tab.doctorId is not null AND tab.doctorId != ''
        </if>
        <if test="userType == '2'.toString()">
            AND (IFNULL(tab.hykMobile,'') != '' OR IFNULL(tab.memberId,'') != '')
        </if>
        <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
            AND replace(tab.grossProfitRate,'%','') &lt;= #{grossProfitRateMax} +0
        </if>
        <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
            AND replace(tab.grossProfitRate,'%','') &gt;= #{grossProfitRateMin} +0
        </if>
        <if test="proClass != null and proClass != ''">
            AND (tab.PRO_BIG_CLASS_CODE = #{proClass} OR tab.PRO_MID_CLASS_CODE = #{proClass} OR tab.PRO_CLASS_CODE =
            #{proClass})
        </if>
        <if test="memberName != null and memberName != ''">
            AND (tab.hykName LIKE '%${memberName}%' OR tab.hykMobile LIKE '%${memberName}%' OR tab.hykNo LIKE
            '%${memberName}%')
        </if>
        <if test="factory != null and factory != ''">
            AND (tab.factoryCode LIKE '%${factory}%' OR tab.factoryName LIKE '%${factory}%')
        </if>
        <if test="medProdctStatus != null and medProdctStatus != ''">
            <if test="medProdctStatus == '1'.toString() ">
                AND ( tab.PRO_IF_MED = #{medProdctStatus} OR ifnull(tab.medProdctCode,'') != '')
            </if>
            <if test="medProdctStatus == '0'.toString() ">
                AND (tab.PRO_IF_MED = #{medProdctStatus} OR (ifnull(tab.medProdctCode,'') = '' AND ifnull(tab.PRO_IF_MED
                ,'') = ''))
            </if>
        </if>
        <if test="expiryDay != null and expiryDay !=''">
            and tab.expiryDay &lt;=#{expiryDay}
        </if>
        GROUP BY tab.selfCode,
        <if test="userType == '1'.toString()">
            tab.doctorId
        </if>
        <if test="userType == '2'.toString()">
            tab.hykMobile
        </if>
    </select>
    <select id="queryCountSalesSummar"
            parameterType="com.gys.report.entity.GetSalesSummaryOfSalesmenReportInData"
            resultType="com.gys.report.entity.GetSalesSummaryOfSalesmenReportOutData">
        SELECT sum(a.grossProfitAmt) grossProfitAmt,
        CONCAT(CONVERT (IFNULL( sum(a.grossProfitAmt), 0 ) / sum(a.ssAmount) * 100,DECIMAL ( 19, 2 )),'%') AS
        grossProfitRate,
        sum(a.discountAmt) discountAmt,
        CONCAT(CONVERT (sum(a.discountAmt)/sum(a.receivableAmt) * 100,DECIMAL ( 10, 2)),'%') discountRate,
        sum(a.ssAmount) ssAmount,
        CONVERT (sum(a.ssAmount)/sum(a.selledDays),DECIMAL ( 10, 2 )) daliygsddRmbAmt,
        CONVERT ( sum(a.tradedTime) / sum(a.selledDays), DECIMAL ( 19, 2 ) ) daliyAveCustomersNum,
        sum(a.tradedTime) customersAmt,
        CONVERT ( sum(a.ssAmount) / sum(a.tradedTime), DECIMAL ( 19, 2 ) ) visitUnitPrice
        from (
        SELECT
        d.GSSD_SALER_ID sellerCode,
        u.USER_NAM sellerName,
        IFNULL( SUM( d.GSSD_AMT - t.GSSH_BILL_NO_RETURN * ( d.GSSD_ADD_AMT + d.GSSD_ADD_TAX ) ), 0 ) AS grossProfitAmt,
        SUM( abs( d.GSSD_PRC1 ) * d.GSSD_QTY ) - SUM( d.GSSD_AMT ) AS discountAmt,
        IFNULL( SUM( t.GSSH_BILL_NO_RETURN * d.GSSD_ADD_AMT ), 0 ) AS costAmt,
        SUM( d.GSSD_AMT ) ssAmount,
        SUM( abs( d.GSSD_PRC1 ) * d.GSSD_QTY ) AS receivableAmt,
        SUM( d.GSSD_AMT ) / y.selledDays dailyPayAmt,
        y.selledDays,
        z.tradedTime
        FROM
        GAIA_SD_SALE_D d
        LEFT JOIN GAIA_USER_DATA u ON d.GSSD_SALER_ID = u.USER_ID AND d.CLIENT = u.CLIENT
        LEFT JOIN GAIA_SD_SALE_H h ON d.GSSD_BR_ID = h.GSSH_BR_ID AND d.CLIENT = h.CLIENT AND d.GSSD_BILL_NO =
        h.GSSH_BILL_NO
        LEFT JOIN (SELECT (CASE IFNULL(GSSH_BILL_NO_RETURN, 1 ) WHEN 1 THEN 1 ELSE -1 END)
        GSSH_BILL_NO_RETURN,GSSH_BILL_NO,GSSH_DATE,GSSH_BR_ID FROM GAIA_SD_SALE_H
        WHERE GSSH_DATE <![CDATA[ <= ]]> #{queryEndDate} AND GSSH_DATE <![CDATA[ >= ]]> #{queryStartDate}
        AND CLIENT = #{clientId} AND GSSH_BR_ID = #{brId}) t ON t.GSSH_BILL_NO = h.GSSH_BILL_NO AND t.GSSH_DATE =
        h.GSSH_DATE AND t.GSSH_BR_ID = h.GSSH_BR_ID
        LEFT JOIN (SELECT COUNT( * ) selledDays,s.GSSD_SALER_ID FROM
        (SELECT hs.*,ds.GSSD_SALER_ID,CONVERT( SUM( ds.GSSD_AMT ),DECIMAL(19,4) ) AS gssdAmt FROM GAIA_SD_SALE_H hs
        LEFT JOIN GAIA_SD_SALE_D ds ON ds.CLIENT = hs.CLIENT AND ds.GSSD_BILL_NO = hs.GSSH_BILL_NO AND ds.GSSD_BR_ID =
        hs.GSSH_BR_ID
        WHERE hs.GSSH_HIDE_FLAG = '0' AND hs.CLIENT = #{clientId} AND hs.GSSH_BR_ID = #{brId}
        AND hs.GSSH_DATE <![CDATA[>=]]> #{queryStartDate} AND hs.GSSH_DATE <![CDATA[<=]]> #{queryEndDate}
        GROUP BY ds.CLIENT,ds.GSSD_SALER_ID,hs.GSSH_DATE) s
        GROUP BY s.GSSD_SALER_ID
        ) y
        ON y.GSSD_SALER_ID = d.GSSD_SALER_ID
        LEFT JOIN (SELECT count(*) tradedTime,s.GSSD_SALER_ID FROM
        (SELECT hs.*,ds.GSSD_SALER_ID FROM GAIA_SD_SALE_H hs
        LEFT JOIN GAIA_SD_SALE_D ds ON ds.CLIENT = hs.CLIENT AND ds.GSSD_BILL_NO = hs.GSSH_BILL_NO AND ds.GSSD_BR_ID =
        hs.GSSH_BR_ID AND hs.GSSH_DATE = ds.GSSD_DATE
        WHERE hs.GSSH_HIDE_FLAG = '0' AND hs.CLIENT = #{clientId} AND hs.GSSH_BR_ID = #{brId}
        AND hs.GSSH_DATE <![CDATA[>=]]> #{queryStartDate} AND hs.GSSH_DATE <![CDATA[<=]]> #{queryEndDate}
        GROUP BY hs.CLIENT,hs.GSSH_BR_ID,ds.GSSD_SALER_ID,hs.GSSH_BILL_NO) s GROUP BY s.GSSD_SALER_ID) z ON
        z.GSSD_SALER_ID = d.GSSD_SALER_ID
        WHERE d.CLIENT = #{clientId} and h.GSSH_HIDE_FLAG = '0' AND h.GSSH_BR_ID = #{brId}
        <if test="queryStartDate != null and queryStartDate != ''">
            AND d.GSSD_DATE <![CDATA[>=]]> #{queryStartDate}
        </if>
        <if test="queryEndDate != null and queryEndDate != ''">
            AND d.GSSD_DATE <![CDATA[<=]]> #{queryEndDate}
        </if>
        <if test="queryUserId != null and queryUserId != ''">
            AND d.GSSD_SALER_ID = #{queryUserId}
        </if>
        AND d.GSSD_SALER_ID IS NOT NULL
        GROUP BY d.GSSD_SALER_ID
        ORDER BY d.GSSD_SALER_ID ) a
    </select>
    <select id="getSalespersonsSalesDetailsTotal"
            resultType="com.gys.report.entity.SalespersonsSalesDetailsOutTotal">
        select
        SUM(qty) qty,
        ROUND(SUM(amountReceivable),6) amountReceivable,
        ROUND(SUM(amt),6) amt,
        SUM(includeTaxSale) includeTaxSale,
        SUM(grossProfitMargin) grossProfitMargin,
        CONCAT(ROUND(SUM(grossProfitMargin)/ SUM(amt)*100,2),'%') grossProfitRate,
        ROUND(SUM(discount),6) discount,
        CONCAT(ROUND(SUM(discount)/SUM(amountReceivable)*100,2),'%') discountRate
        from (
        SELECT
        sto.STO_CODE stoCode,
        IFNULL( sto.STO_SHORT_NAME, sto.STO_NAME ) stoName,
        sale.GSSD_DATE saleDate,
        sale.GSSD_BILL_NO billNo,
        pb.PRO_SELF_CODE selfCode,
        IFNULL( pb.PRO_NAME, pb.PRO_COMMONNAME ) proName,
        pb.PRO_COMMONNAME proCommonName,
        pb.PRO_SPECS specs,
        pb.PRO_UNIT unit,
        pb.PRO_FACTORY_CODE factoryCode,
        pb.PRO_FACTORY_NAME factoryName,
        pb.PRO_MED_ID medProdctCode,
        pb.PRO_IF_MED,
        CASE
        WHEN pb.PRO_IF_MED = '1' THEN
        '是'
        WHEN pb.PRO_MED_ID IS NOT NULL THEN
        '是' ELSE '否'
        END ifMed,
        sale.GSSD_QTY qty,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) AS amountReceivable,
        sale.GSSD_AMT amt,
        sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX includeTaxSale,
        sale.GSSD_AMT - (sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX) grossProfitMargin,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) - sale.GSSD_AMT discount,
        sale.GSSD_SALER_ID salerId,
        ud1.USER_NAM salerName,
        sale.GSSD_DOCTOR_ID doctorId,
        ud2.USER_NAM doctorName,
        sale.GSSH_HYK_NO hykNo,
        gsmb.GSMB_NAME hykName,
        gsmb.GSMB_MOBILE hykMobile,
        gsmb.GSMB_MEMBER_ID memberId,
        concat( pc.PRO_BIG_CLASS_CODE, '-', pc.PRO_BIG_CLASS_NAME ) bigClass,
        concat( pc.PRO_MID_CLASS_CODE, '-', pc.PRO_MID_CLASS_NAME ) midClass,
        concat( pc.PRO_CLASS_CODE, '-', pc.PRO_CLASS_NAME ) proClass,
        pb.PRO_CLASS,
        sale.GSSD_BATCH_NO batchNo,
        sale.GSSD_VALID_DATE validData,
        sale.expiryDay,
        ifnull(bi.BAT_SUPPLIER_CODE,bi2.BAT_SUPPLIER_CODE) AS supplierCode,
        ifnull(bi.BAT_SUPPLIER_NAME,bi2.BAT_SUPPLIER_NAME) AS supplierName
        FROM
        (
        SELECT
        ssd.CLIENT,
        ssd.GSSD_BR_ID,
        ssd.GSSD_BILL_NO,
        ssd.GSSD_DATE,
        ssd.GSSD_PRC1,
        ssd.GSSD_QTY,
        ssd.GSSD_AMT,
        ssd.GSSD_PRO_ID,
        ssd.GSSD_MOV_TAX,
        ssd.GSSD_SALER_ID,
        ssd.GSSD_DOCTOR_ID,
        ssh.GSSH_HYK_NO,
        ssd.GSSD_BATCH_NO,
        ssd.GSSD_BATCH,
        ssd.GSSD_VALID_DATE,
        DATEDIFF(date_format( ssd.GSSD_VALID_DATE, '%Y-%m-%d' ),date_format( ssd.GSSD_DATE, '%Y-%m-%d' )) expiryDay,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_AMT ELSE ssd.GSSD_ADD_AMT * - 1
        END
        AS GSSD_ADD_AMT,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_TAX ELSE ssd.GSSD_ADD_TAX* - 1
        END
        AS GSSD_ADD_TAX
        FROM
        GAIA_SD_SALE_H ssh
        LEFT JOIN GAIA_SD_SALE_D ssd ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND
        ssd.GSSD_BR_ID = ssh.GSSH_BR_ID )
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON ( ssh.CLIENT = pb.CLIENT AND pb.PRO_SITE = ssd.GSSD_BR_ID AND pb.
        PRO_SELF_CODE = ssd.GSSD_PRO_ID )
        WHERE
        ssh.CLIENT = #{clientId}
        AND ssh.GSSH_HIDE_FLAG = '0'
        <if test="memberCarArr != null and memberCarArr.length > 0">
            AND ssh.GSSH_HYK_NO IN
            <foreach collection="memberCarArr" open="(" separator="," item="item" close=")">
                #{item}
            </foreach>
        </if>
        <if test="brId != null and brId != ''">
            AND ssd.GSSD_BR_ID = #{brId}
        </if>
        <if test="saleStatusList != null and saleStatusList.size() > 0">
            and ssd.GSSD_PRO_STATUS in
            <foreach collection="saleStatusList" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and ssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="queryUserId != null and queryUserId != ''">
            AND ssd.GSSD_SALER_ID = #{queryUserId}
        </if>
        <if test="empUserId != null and empUserId != ''">
            AND ssh.GSSH_EMP = #{empUserId}
        </if>
        <if test="queryDoctorId != null and queryDoctorId != ''">
            AND ssd.GSSD_DOCTOR_ID = #{queryDoctorId}
        </if>
        <if test="proArr != null and proArr.length > 0 ">
            and ssd.GSSD_PRO_ID IN
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="queryStartDate != null and queryStartDate != ''">
            and ssd.GSSD_DATE &gt;= #{queryStartDate}
        </if>
        <if test="queryEndDate != null and queryEndDate != ''">
            and ssd.GSSD_DATE &lt;= #{queryEndDate}
        </if>

        <if test="batchNo != null and batchNo != ''">
            AND ssd.GSSD_BATCH_NO = #{batchNo}
        </if>

        <if test="billNoArr != null and billNoArr.length > 0">
            AND ssd.GSSD_BILL_NO IN
            <foreach collection="billNoArr" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        ) sale
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON ( pb.CLIENT = sale.CLIENT AND pb.PRO_SITE = sale.GSSD_BR_ID AND pb.
        PRO_SELF_CODE = sale.GSSD_PRO_ID )
        LEFT
        JOIN GAIA_STORE_DATA sto ON ( sto.CLIENT = sale.CLIENT AND sto.STO_CODE = sale.GSSD_BR_ID )
        LEFT JOIN GAIA_USER_DATA ud1 ON ( ud1.CLIENT = sale.CLIENT AND ud1.USER_ID = sale.GSSD_SALER_ID )
        LEFT JOIN GAIA_USER_DATA ud2 ON ( ud2.CLIENT = sale.CLIENT AND ud2.USER_ID = sale.GSSD_DOCTOR_ID )
        LEFT JOIN GAIA_SD_MEMBER_CARD gsmc on gsmc.CLIENT=sale.client and gsmc.GSMBC_CARD_ID=sale.GSSH_HYK_NO
        LEFT JOIN GAIA_SD_MEMBER_BASIC gsmb on gsmb.CLIENT=gsmc.CLIENT and gsmb.GSMB_MEMBER_ID=gsmc.GSMBC_MEMBER_ID
        LEFT JOIN GAIA_BATCH_INFO bi ON (sale.CLIENT = bi.CLIENT AND sale.GSSD_BR_ID = bi.BAT_SITE_CODE
        AND sale.GSSD_PRO_ID = bi.BAT_PRO_CODE AND sale.GSSD_BATCH = bi.BAT_BATCH)
        LEFT JOIN GAIA_BATCH_INFO bi2 ON (sale.CLIENT = bi2.CLIENT AND sto.STO_DC_CODE = bi2.BAT_SITE_CODE
        AND sale.GSSD_PRO_ID = bi2.BAT_PRO_CODE AND sale.GSSD_BATCH = bi2.BAT_BATCH)
        LEFT JOIN (
        SELECT
        *
        FROM
        (
        SELECT
        PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS
        )
        proClass
        GROUP BY
        classId
        ) pc ON pc.classId = pb.PRO_CLASS
        LEFT JOIN (
        SELECT
        GSSPM_BR_ID,
        GSSPM_BILL_NO,
        GROUP_CONCAT(GSSPM_NAME SEPARATOR ';') payName
        FROM
        GAIA_SD_SALE_PAY_MSG
        WHERE
        CLIENT = #{clientId}
        AND GSSPM_TYPE = '1'
        <if test="brId != null and brId != ''">
            AND GSSPM_BR_ID = #{brId}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and GSSPM_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        GROUP BY
        GSSPM_BILL_NO
        ) msg ON msg.GSSPM_BR_ID = sale.GSSD_BR_ID AND msg.GSSPM_BILL_NO = sale.GSSD_BILL_NO
        WHERE 1=1
        AND not EXISTS (select 1 from GAIA_SALES_CATALOG where CLIENT = pb.CLIENT and PRO_SELF_CODE=pb.PRO_SELF_CODE and
        IS_DELETE = 0 and `STATUS` in (1,2))
        <if test="specialType != null and specialType!=''">
            <choose>
                <when test="specialType == '0'.toString()">
                    and  (pb.PRO_CLASS like '1%' or pb.PRO_CLASS like '2%')
                </when>
                <when test="specialType == '1'.toString()">
                    and pb.PRO_CLASS like '5%'
                </when>
                <when test="specialType == '2'.toString()">
                    and pb.PRO_CONTROL_CLASS like '3%'
                </when>
                <when test="specialType == '3'.toString()">
                    and pb.PRO_CLASS like '4%'
                </when>
            </choose>
        </if>
        <if test="flag == 1">
            AND (pb.PRO_OUT != '1' OR pb.PRO_OUT is null)
        </if>
        <if test="zdy1 != null and zdy1.length > 0">
            and pb.PRO_ZDY1 in
            <foreach collection="zdy1" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy2 != null and zdy2.length > 0">
            and pb.PRO_ZDY2 in
            <foreach collection="zdy2" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy3 != null and zdy3.length > 0">
            and pb.PRO_ZDY3 in
            <foreach collection="zdy3" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy4 != null and zdy4.length > 0">
            and pb.PRO_ZDY4 in
            <foreach collection="zdy4" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy5 != null and zdy5.length > 0">
            and pb.PRO_ZDY5 in
            <foreach collection="zdy5" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="saleClass != null and saleClass.length > 0">
            and pb.PRO_SLAE_CLASS in
            <foreach collection="saleClass" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="proPosition != null and proPosition.length > 0">
            and pb.PRO_POSITION in
            <foreach collection="proPosition" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="prosClass != null and prosClass.length > 0">
            and pb.PRO_SCLASS in
            <foreach collection="prosClass" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="purchase != null and purchase != ''">
            and pb.PRO_NO_PURCHASE = #{purchase}
        </if>
        <if test="payName != null and payName.length > 0">
            and
            <foreach collection="payName" item="item" index="index" open="(" close=")" separator="OR">
                msg.payName like CONCAT('%',#{item},'%')
            </foreach>
        </if>
        <if test="proSaleClassList != null and proSaleClassList.size > 0">
            AND pb.PRO_SLAE_CLASS in
            <foreach collection="proSaleClassList" separator="," open="(" close=")" item="proSaleClass" >
                #{proSaleClass}
            </foreach>
        </if>
        <if test="proTssx != null and proTssx.size() > 0">
            AND pb.PRO_TSSX in
            <foreach collection="proTssx" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        ) tab
        where 1=1
        <if test="memberName != null and memberName != ''">
            AND (tab.hykName LIKE '%${memberName}%' OR tab.hykMobile LIKE '%${memberName}%' OR tab.hykNo LIKE
            '%${memberName}%')
        </if>
        <if test="supplierCode != null and supplierCode != ''">
            AND tab.supplierCode = #{supplierCode}
        </if>
        <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
            AND replace(grossProfitMargin / amt * 100,'%','') &lt;= #{grossProfitRateMax} +0
        </if>
        <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
            AND replace(grossProfitMargin / amt * 100,'%','') &gt;= #{grossProfitRateMin} +0
        </if>
        <if test="classArrs != null and classArrs.size > 0">
            and tab.PRO_CLASS in
            <foreach collection="classArrs" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="expiryDay != null and expiryDay !=''">
            and tab.expiryDay &lt;=#{expiryDay}
        </if>
        <if test="factory != null and factory != ''">
            AND (tab.factoryCode LIKE '%${factory}%' OR tab.factoryName LIKE '%${factory}%')
        </if>
        <if test="medProdctStatus != null and medProdctStatus != ''">
            <if test="medProdctStatus == '1'.toString() ">
                AND ( tab.PRO_IF_MED = #{medProdctStatus} OR ifnull(tab.medProdctCode,'') != '')
            </if>
            <if test="medProdctStatus == '0'.toString() ">
                AND (tab.PRO_IF_MED = #{medProdctStatus} OR (ifnull(tab.medProdctCode,'') = '' AND ifnull(tab.PRO_IF_MED
                ,'') = ''))
            </if>
        </if>
    </select>
    <select id="getSalespersonsSalesByDoctor"
            resultType="com.gys.report.entity.SalespersonsSalesDetailsOutData">
        select
        tab.doctorId doctorId,
        tab.doctorName doctorName,
        tab.salerId,
        tab.salerName,
        tab.GSSD_BR_ID stoCode,
        tab.STO_NAME stoName,
        tab.selfCode,
        tab.proName,
        tab.specs,
        tab.unit,
        tab.factoryName,
        tab.medProdctCode,
        tab.ifMed,
        tab.bigClass,
        tab.midClass,
        tab.proClass,
        tab.proTssx,
        tab.proRegisterNo,
        sum(tab.qty) qty,
        sum(tab.amountReceivable) amountReceivable,
        sum(tab.amt) amt,
        sum(tab.includeTaxSale) includeTaxSale,
        ifnull(sum(tab.grossProfitMargin),0.00) grossProfitMargin,
        concat(round(sum(tab.grossProfitMargin)/ sum(tab.amt)* 100, 2),'%' ) grossProfitRate,
        ifnull(sum(tab.discount),0.00) discount,
        concat(round(sum(tab.discount)/sum(tab.amountReceivable)*100,2),'%') discountRate,
        tab.validData,
        tab.expiryDay,
        tab.saleStatus
        from (
        SELECT
        pb.PRO_SELF_CODE selfCode,
        IFNULL( pb.PRO_NAME, pb.PRO_COMMONNAME ) proName,
        pb.PRO_SPECS specs,
        pb.PRO_UNIT unit,
        pb.PRO_FACTORY_NAME factoryName,
        pb.PRO_FACTORY_CODE factoryCode,
        pb.PRO_MED_ID medProdctCode,
        pb.PRO_REGISTER_NO proRegisterNo,
        pb.PRO_IF_MED,
        CASE
        WHEN pb.PRO_IF_MED = '1' THEN
        '是'
        WHEN pb.PRO_MED_ID IS NOT NULL THEN
        '是' ELSE '否'
        END ifMed,
        case pb.PRO_TSSX when '1' then '防疫'
        else '' end AS proTssx,
        sale.GSSD_PRC1 prcOne,
        sale.GSSD_QTY qty,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) AS amountReceivable,
        sale.GSSD_AMT amt,
        sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX includeTaxSale,
        sale.GSSD_AMT - (sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX) grossProfitMargin,
        (sale.GSSD_AMT - sale.GSSD_ADD_AMT - sale.GSSD_ADD_TAX)
        / sale.GSSD_AMT
        * 100 grossProfitRate,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) - sale.GSSD_AMT discount,
        sale.GSSD_SALER_ID salerId,
        ud1.USER_NAM salerName,
        sale.GSSD_DOCTOR_ID doctorId,
        ud2.USER_NAM doctorName,
        sale.GSSH_HYK_NO hykNo,
        gsmb.GSMB_NAME hykName,
        gsmb.GSMB_MOBILE hykMobile,
        gsmb.GSMB_MEMBER_ID memberId,
        concat( pc.PRO_BIG_CLASS_CODE, '-', pc.PRO_BIG_CLASS_NAME ) bigClass,
        concat( pc.PRO_MID_CLASS_CODE, '-', pc.PRO_MID_CLASS_NAME ) midClass,
        concat( pc.PRO_CLASS_CODE, '-', pc.PRO_CLASS_NAME ) proClass,
        pc.PRO_BIG_CLASS_CODE,
        pc.PRO_MID_CLASS_CODE,
        pc.PRO_CLASS_CODE,
        sale.GSSD_VALID_DATE validData,
        sale.expiryDay,
        sale.GSSD_BR_ID,
        sale.GSSD_PRO_STATUS as saleStatus,
        IFNULL(sto.STO_SHORT_NAME,sto.STO_NAME) STO_NAME
        FROM
        (
        SELECT
        ssd.CLIENT,
        ssd.GSSD_BR_ID,
        ssd.GSSD_BILL_NO,
        ssd.GSSD_DATE,
        ssd.GSSD_PRC1,
        ssd.GSSD_QTY,
        ssd.GSSD_AMT,
        ssd.GSSD_PRO_ID,
        ssd.GSSD_MOV_TAX,
        ssd.GSSD_SALER_ID,
        ssd.GSSD_DOCTOR_ID,
        ssh.GSSH_HYK_NO,
        ssd.GSSD_VALID_DATE,
        ssd.GSSD_PRO_STATUS,
        DATEDIFF(date_format( ssd.GSSD_VALID_DATE, '%Y-%m-%d' ),date_format( now(), '%Y-%m-%d' )) expiryDay,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_AMT ELSE ssd.GSSD_ADD_AMT * - 1
        END
        GSSD_ADD_AMT,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_TAX ELSE ssd.GSSD_ADD_TAX * - 1
        END
        GSSD_ADD_TAX
        FROM
        GAIA_SD_SALE_H ssh
        LEFT JOIN GAIA_SD_SALE_D ssd ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND
        ssd.GSSD_BR_ID = ssh.GSSH_BR_ID AND ssd.GSSD_DATE = ssh.GSSH_DATE)
        WHERE
        ssh.CLIENT = #{clientId}
        AND ssh.GSSH_HIDE_FLAG = '0'
        <if test="siteArr != null and siteArr.length > 0">
            and ssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="saleStatusList != null and saleStatusList.size() > 0">
            and ssd.GSSD_PRO_STATUS in
            <foreach collection="saleStatusList" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="queryUserId != null and queryUserId != ''">
            AND ssd.GSSD_SALER_ID = #{queryUserId}
        </if>
        <if test="queryDoctorId != null and queryDoctorId != ''">
            AND ssd.GSSD_DOCTOR_ID = #{queryDoctorId}
        </if>
        <if test="queryStartDate != null and queryStartDate != ''">
            and ssd.GSSD_DATE &gt;= #{queryStartDate}
        </if>
        <if test="queryEndDate != null and queryEndDate != ''">
            and ssd.GSSD_DATE &lt;= #{queryEndDate}
        </if>
        <if test="proArr != null and proArr.length > 0 ">
            and ssd.GSSD_PRO_ID IN
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="billNoArr != null and billNoArr.length > 0">
            AND ssd.GSSD_BILL_NO IN
            <foreach collection="billNoArr" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        ) sale
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON ( pb.CLIENT = sale.CLIENT AND pb.PRO_SITE = sale.GSSD_BR_ID AND pb.
        PRO_SELF_CODE = sale.GSSD_PRO_ID )
        LEFT JOIN GAIA_STORE_DATA sto ON ( sto.CLIENT = sale.CLIENT AND sto.STO_CODE = sale.GSSD_BR_ID )
        LEFT JOIN GAIA_USER_DATA ud1 ON ( ud1.CLIENT = sale.CLIENT AND ud1.USER_ID = sale.GSSD_SALER_ID )
        LEFT JOIN GAIA_USER_DATA ud2 ON ( ud2.CLIENT = sale.CLIENT AND ud2.USER_ID = sale.GSSD_DOCTOR_ID )
        LEFT JOIN GAIA_SD_MEMBER_CARD gsmc on gsmc.CLIENT=sale.client and gsmc.GSMBC_CARD_ID=sale.GSSH_HYK_NO
        LEFT JOIN GAIA_SD_MEMBER_BASIC gsmb on gsmb.CLIENT=gsmc.CLIENT and gsmb.GSMB_MEMBER_ID=gsmc.GSMBC_MEMBER_ID

        LEFT JOIN (
        SELECT
        *
        FROM
        (
        SELECT
        PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS
        )
        proClass
        GROUP BY
        classId
        ) pc ON pc.classId = pb.PRO_CLASS
        where not EXISTS (select 1 from GAIA_SALES_CATALOG where CLIENT = pb.CLIENT and PRO_SELF_CODE=pb.PRO_SELF_CODE
        and IS_DELETE = 0 and `STATUS` in (1,2))
        <if test="proTssx != null and proTssx.size() > 0">
            AND pb.PRO_TSSX in
            <foreach collection="proTssx" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        ) tab
        where 1=1
        AND tab.doctorId is not null AND tab.doctorId != ''
        <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
            AND replace(tab.grossProfitRate,'%','') &lt;= #{grossProfitRateMax} +0
        </if>
        <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
            AND replace(tab.grossProfitRate,'%','') &gt;= #{grossProfitRateMin} +0
        </if>
        <if test="proClass != null and proClass != ''">
            AND (tab.PRO_BIG_CLASS_CODE = #{proClass} OR tab.PRO_MID_CLASS_CODE = #{proClass} OR tab.PRO_CLASS_CODE =
            #{proClass})
        </if>
        <if test="memberName != null and memberName != ''">
            AND (tab.hykName LIKE '%${memberName}%' OR tab.hykMobile LIKE '%${memberName}%' OR tab.hykNo LIKE
            '%${memberName}%')
        </if>
        <if test="factory != null and factory != ''">
            AND (tab.factoryCode LIKE '%${factory}%' OR tab.factoryName LIKE '%${factory}%')
        </if>
        <if test="medProdctStatus != null and medProdctStatus != ''">
            <if test="medProdctStatus == '1'.toString() ">
                AND ( tab.PRO_IF_MED = #{medProdctStatus} OR ifnull(tab.medProdctCode,'') != '')
            </if>
            <if test="medProdctStatus == '0'.toString() ">
                AND (tab.PRO_IF_MED = #{medProdctStatus} OR (ifnull(tab.medProdctCode,'') = '' AND ifnull(tab.PRO_IF_MED
                ,'') = ''))
            </if>
        </if>
        <if test="expiryDay != null and expiryDay !=''">
            and tab.expiryDay &lt;=#{expiryDay}
        </if>
        GROUP BY
        tab.doctorId,
        tab.GSSD_BR_ID,
        tab.selfCode,
        tab.salerId
    </select>
    <select id="querySalesSummaryOfSalesmenReportUnion"
            resultType="com.gys.report.entity.GetSalesSummaryOfSalesmenReportOutDataUnion">
        SELECT
        users.*,
        unions.*
        FROM
        (
        SELECT DISTINCT
        d.USER_ID AS sellerCode,
        d.USER_NAM AS sellerName,
        d.USER_STA AS userSta
        FROM
        GAIA_AUTHCONFI_DATA a
        LEFT JOIN GAIA_FRANCHISEE b ON ( a.CLIENT = b.CLIENT )
        LEFT JOIN GAIA_STORE_DATA c ON ( a.CLIENT = c.CLIENT AND a.AUTHOBJ_SITE = c.STO_CODE )
        LEFT JOIN GAIA_USER_DATA d ON ( a.CLIENT = d.CLIENT AND a.AUTHCONFI_USER = d.USER_ID )
        WHERE
        a.CLIENT = #{clientId}
        <if test="queryUserId!=null and queryUserId!=''">
            and d.USER_ID = #{queryUserId}
        </if>
        AND a.AUTH_GROUP_ID NOT IN ( 'SD_23', 'SD_24' )
        AND d.USER_NAM IS NOT NULL
        ORDER BY
        d.USER_ID ASC
        ) AS users
        LEFT JOIN
        (SELECT
        count(DISTINCT ( pcTem.GSSD_BILL_NO )) AS jycs,
        pcTem.GSSD_SALER_ID AS sellerId,
        count( pcTem.GSSD_PRO_ID ) AS xspx,
        CONVERT(count( pcTem.GSSD_PRO_ID )/count(DISTINCT ( pcTem.GSSD_BILL_NO )),DECIMAL ( 19, 2 )) AS kpc,
        CONVERT(SUM(pcTem.GSSD_AMT)/SUM(pcTem.GSSD_QTY),DECIMAL ( 19, 2 )) AS pdj,
        SUM(pcTem.GSSD_AMT) AS totalAmt,
        SUM(pcTem.GSSD_QTY) AS totalQyt
        FROM
        (
        SELECT
        pcd.CLIENT,
        pcd.GSSD_BILL_NO,
        pcd.GSSD_BR_ID,
        pcd.GSSD_DATE,
        pcd.GSSD_PRO_ID,
        pcd.GSSD_SALER_ID,
        pcd.GSSD_AMT,
        pcd.GSSD_QTY
        FROM
        GAIA_SD_SALE_D pcd
        LEFT JOIN GAIA_SD_SALE_H pch ON pch.CLIENT = pcd.CLIENT
        AND pcd.GSSD_BILL_NO = pch.GSSH_BILL_NO
        AND pcd.GSSD_BR_ID = pch.GSSH_BR_ID
        LEFT JOIN GAIA_PRODUCT_BUSINESS pcpb ON pch.CLIENT = pcpb.CLIENT
        AND pcd.GSSD_PRO_ID = pcpb.PRO_SELF_CODE
        AND pcd.GSSD_BR_ID = pcpb.PRO_SITE
        WHERE
        pch.GSSH_HIDE_FLAG = '0'
        AND pch.CLIENT = #{clientId}
        <!-- AND pch.GSSH_BR_ID = #{brId} -->
        AND pcd.GSSD_SALER_ID IS NOT NULL
        <if test="queryStartDate != null and queryStartDate != ''">
            AND pch.GSSH_DATE <![CDATA[>=]]> #{queryStartDate}
        </if>
        <if test="queryEndDate != null and queryEndDate != ''">
            AND pch.GSSH_DATE <![CDATA[<=]]> #{queryEndDate}
        </if>
        <if test="queryUserId != null and queryUserId != ''">
            AND pcd.GSSD_SALER_ID = #{queryUserId}
        </if>
        AND pcpb.PRO_CLASS NOT IN (
        SELECT
        PRO_CLASS_CODE
        FROM
        GAIA_PRODUCT_CLASS pcpc
        WHERE
        pcpc.PRO_CLASS_CODE LIKE '301%'
        OR pcpc.PRO_CLASS_CODE LIKE '302%'
        OR pcpc.PRO_CLASS_CODE LIKE '8%'
        )) pcTem
        GROUP BY
        pcTem.GSSD_SALER_ID) unions ON users.sellerCode = unions.sellerId order by users.sellerCode
    </select>
    <select id="selectUnionSaleCountAndAmtByUserId"
            resultType="com.gys.report.entity.GetSalesSummaryOfSalesmenReportOutDataUnion">
        SELECT t.CLIENT AS client, t.GSSD_BR_ID AS siteCode, t.GSSD_SALER_ID AS sellerCode,businessCount,
        businessAmt,IFNULL(unionBusinessCount,0) AS unionBusinessCount,IFNULL(unionBusinessAmt,0) AS unionBusinessAmt
        FROM (SELECT
        d.GSSD_SALER_ID,
        d.CLIENT,
        d.GSSD_BR_ID,
        COUNT(DISTINCT(h.GSSH_BILL_NO)) AS businessCount,
        SUM(h.GSSH_YS_AMT) AS businessAmt
        FROM
        GAIA_SD_SALE_D d
        LEFT JOIN GAIA_SD_SALE_H h ON d.CLIENT = h.CLIENT
        AND d.GSSD_BR_ID = h.GSSH_BR_ID
        AND d.GSSD_BILL_NO = h.GSSH_BILL_NO
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON d.CLIENT = pb.CLIENT
        AND d.GSSD_PRO_ID = pb.PRO_SELF_CODE
        AND d.GSSD_BR_ID = pb.PRO_SITE
        WHERE
        h.GSSH_HIDE_FLAG = '0'
        AND h.CLIENT = #{client} <!-- and h.GSSH_BR_ID = #{siteCode} -->
        AND d.GSSD_SALER_ID IS NOT NULL
        <if test="queryStartDate != null and queryStartDate != ''">
            AND h.GSSH_DATE <![CDATA[>=]]> #{queryStartDate}
        </if>
        <if test="queryEndDate != null and queryEndDate != ''">
            AND h.GSSH_DATE <![CDATA[<=]]> #{queryEndDate}
        </if>
        <if test="queryUserId != null and queryUserId != ''">
            AND d.GSSD_SALER_ID = #{queryUserId}
        </if>
        AND pb.PRO_CLASS NOT IN (
        SELECT
        PRO_CLASS_CODE
        FROM
        GAIA_PRODUCT_CLASS pcpc
        WHERE
        pcpc.PRO_CLASS_CODE LIKE '301%'
        OR pcpc.PRO_CLASS_CODE LIKE '302%'
        OR pcpc.PRO_CLASS_CODE LIKE '8%'
        )
        GROUP BY d.CLIENT, d.GSSD_SALER_ID) t LEFT JOIN

        (SELECT
        d.GSSD_SALER_ID,
        d.CLIENT,
        d.GSSD_BR_ID,
        COUNT(DISTINCT(h.GSSH_BILL_NO)) AS unionBusinessCount,
        SUM(d.GSSD_AMT) AS unionBusinessAmt
        FROM
        GAIA_SD_SALE_D d
        LEFT JOIN GAIA_SD_SALE_H h ON d.CLIENT = h.CLIENT
        AND d.GSSD_BR_ID = h.GSSH_BR_ID
        AND d.GSSD_BILL_NO = h.GSSH_BILL_NO
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON d.CLIENT = pb.CLIENT
        AND d.GSSD_PRO_ID = pb.PRO_SELF_CODE
        AND d.GSSD_BR_ID = pb.PRO_SITE
        WHERE
        h.GSSH_HIDE_FLAG = '0'
        AND h.CLIENT = #{client} <!-- and h.GSSH_BR_ID = #{siteCode} -->
        AND d.GSSD_SALER_ID IS NOT NULL
        <if test="queryStartDate != null and queryStartDate != ''">
            AND h.GSSH_DATE <![CDATA[>=]]> #{queryStartDate}
        </if>
        <if test="queryEndDate != null and queryEndDate != ''">
            AND h.GSSH_DATE <![CDATA[<=]]> #{queryEndDate}
        </if>
        <if test="queryUserId != null and queryUserId != ''">
            AND d.GSSD_SALER_ID = #{queryUserId}
        </if>
        AND d.GSSD_IF_RELATED_SALE = '1'
        AND pb.PRO_CLASS NOT IN (
        SELECT
        PRO_CLASS_CODE
        FROM
        GAIA_PRODUCT_CLASS pcpc
        WHERE
        pcpc.PRO_CLASS_CODE LIKE '301%'
        OR pcpc.PRO_CLASS_CODE LIKE '302%'
        OR pcpc.PRO_CLASS_CODE LIKE '8%'
        )
        GROUP BY d.CLIENT, d.GSSD_SALER_ID) s
        ON t.CLIENT = s.CLIENT AND t.GSSD_BR_ID = s.GSSD_BR_ID AND t.GSSD_SALER_ID= s.GSSD_SALER_ID

    </select>
    <select id="selectUnionSaleOrderByUserId"
            resultType="com.gys.report.entity.GetSalesSummaryOfSalesmenReportOutDataUnion">
        SELECT
        pcd.CLIENT AS client,
        pcd.GSSD_BR_ID AS siteCode,
        pcd.GSSD_SALER_ID AS sellerCode,
        COUNT(DISTINCT(pch.GSSH_BILL_NO)) AS unionBusinessCount
        FROM
        GAIA_SD_SALE_D pcd
        LEFT JOIN GAIA_SD_SALE_H pch ON pch.CLIENT = pcd.CLIENT
        AND pcd.GSSD_BILL_NO = pch.GSSH_BILL_NO
        AND pcd.GSSD_BR_ID = pch.GSSH_BR_ID
        LEFT JOIN GAIA_PRODUCT_BUSINESS pcpb ON pch.CLIENT = pcpb.CLIENT
        AND pcd.GSSD_PRO_ID = pcpb.PRO_SELF_CODE
        AND pcd.GSSD_BR_ID = pcpb.PRO_SITE
        WHERE
        pch.GSSH_HIDE_FLAG = '0'
        AND pch.CLIENT = #{client}
        <!-- AND pch.GSSH_BR_ID = #{siteCode} -->
        AND pcd.GSSD_SALER_ID IS NOT NULL
        <if test="queryStartDate != null and queryStartDate != ''">
            AND pch.GSSH_DATE <![CDATA[>=]]> #{queryStartDate}
        </if>
        <if test="queryEndDate != null and queryEndDate != ''">
            AND pch.GSSH_DATE <![CDATA[<=]]> #{queryEndDate}
        </if>
        <if test="queryUserId != null and queryUserId != ''">
            AND pcd.GSSD_SALER_ID = #{queryUserId}
        </if>
        AND pch.GSSH_IF_RELATED_SALE = '1'
        AND pcpb.PRO_CLASS NOT IN (
        SELECT
        PRO_CLASS_CODE
        FROM
        GAIA_PRODUCT_CLASS pcpc
        WHERE
        pcpc.PRO_CLASS_CODE LIKE '301%'
        OR pcpc.PRO_CLASS_CODE LIKE '302%'
        OR pcpc.PRO_CLASS_CODE LIKE '8%'
        )
        GROUP BY pcd.CLIENT, pcd.GSSD_SALER_ID

    </select>
    <select id="selectStoreRateSellDetailPage"
            resultType="com.gys.report.entity.StoreRateSellOutData">
        SELECT * FROM (
        SELECT
        sto.CLIENT,
        sd.GSSD_BR_ID brId,
        ifnull(sto.STO_SHORT_NAME,sto.STO_NAME) stoName,
        sd.GSSD_DATE saleDate,
        sd.GSSD_BILL_NO billNo,
        CASE
        sto.STO_TAX_CLASS
        WHEN '1' THEN
        '一般纳税人'
        WHEN '2' THEN
        '规模纳税人'
        WHEN '3' THEN
        '个体工商户'
        END AS stoTaxClass,
        sd.GSSD_PRO_ID proId,
        pb.PRO_COMMONNAME proCommonName,
        pb.PRO_SPECS specs,
        pb.PRO_FACTORY_NAME factoryName,
        pb.PRO_PLACE place,
        ROUND(sd.GSSD_MOV_TAX*100) taxCodeValue,
        sd.GSSD_QTY qty,
        sd.GSSD_PRC1 * ABS(sd.GSSD_QTY) AS amountReceivable,
        sd.GSSD_AMT AS amt,
        ( sd.GSSD_PRC1 * ABS(sd.GSSD_QTY) )- sd.GSSD_AMT deduction,
        sd.GSSD_AMT / ( 1 + sd.GSSD_MOV_TAX ) removeTaxSale,
        (case
        when sh.GSSH_BILL_NO_RETURN is null then
        sd.GSSD_MOV_PRICES
        ELSE
        sd.GSSD_MOV_PRICES * - 1
        end
        ) movPrices,
        (case
        when sh.GSSH_BILL_NO_RETURN is null then
        sd.GSSD_MOV_PRICES + sd.GSSD_TAX_RATE
        else
        (sd.GSSD_MOV_PRICES * -1) + (-1 * sd.GSSD_TAX_RATE)
        end
        ) includeTaxSale,
        (case
        when sh.GSSH_BILL_NO_RETURN is null then
        sd.GSSD_AMT - ( sd.GSSD_MOV_PRICES + sd.GSSD_TAX_RATE)
        else
        sd.GSSD_AMT - ( (sd.GSSD_MOV_PRICES * -1) + (-1 * sd.GSSD_TAX_RATE))
        end
        ) grossProfitMargin,
        (case
        when sh.GSSH_BILL_NO_RETURN is null then
        ((sd.GSSD_AMT - ( sd.GSSD_MOV_PRICES + sd.GSSD_TAX_RATE )) /
        sd.GSSD_AMT)*100
        else
        ((sd.GSSD_AMT - ( (sd.GSSD_MOV_PRICES * -1) + (-1 * sd.GSSD_TAX_RATE))) /
        sd.GSSD_AMT)*100
        end
        ) grossProfitRate,
        (case
        when sh.GSSH_BILL_NO_RETURN is null then
        sd.GSSD_ADD_AMT
        ELSE
        sd.GSSD_ADD_AMT * - 1
        end
        ) addMovPrices,
        (case
        when sh.GSSH_BILL_NO_RETURN is null then
        sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX
        else
        (sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)* -1
        end
        ) addIncludeTaxSale,
        (case
        when sh.GSSH_BILL_NO_RETURN is null then
        sd.GSSD_AMT - ( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)
        else
        sd.GSSD_AMT - ( (sd.GSSD_ADD_AMT+ sd.GSSD_ADD_TAX) * -1)
        end
        ) addGrossProfitMargin,
        (case
        when sh.GSSH_BILL_NO_RETURN is null then
        ((sd.GSSD_AMT - ( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)) /
        sd.GSSD_AMT)*100
        else
        ((sd.GSSD_AMT - (sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)*-1) /
        sd.GSSD_AMT)*100
        end
        ) addGrossProfitRate,
        concat(pc.PRO_BIG_CLASS_CODE,'-',pc.PRO_BIG_CLASS_NAME) bigClass,
        concat(pc.PRO_MID_CLASS_CODE,'-',pc.PRO_MID_CLASS_NAME) midClass,
        concat(pc.PRO_CLASS_CODE,'-',pc.PRO_CLASS_NAME) proClass,
        pc.PRO_BIG_CLASS_CODE,
        pc.PRO_MID_CLASS_CODE,
        pc.PRO_CLASS_CODE,
        ud.USER_ID userId,
        ud.USER_NAM userName,
        sto.STO_ATTRIBUTE stoAttribute,
        sto.STO_IF_DTP stoIfDtp,
        sto.STO_IF_MEDICALCARE stoIfMedical
        FROM
        ( SELECT * FROM GAIA_SD_SALE_D WHERE CLIENT =#{client}
        <if test="startDate != null and startDate != ''">
            and GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="gsstBrId != null and gsstBrId != ''">
            and GSSD_BR_ID = #{gsstBrId}
        </if>
        <if test="proId != null and proId != ''">
            and GSSD_PRO_ID = #{proId}
        </if>
        ) sd
        LEFT JOIN GAIA_STORE_DATA sto ON sto.STO_CODE = sd.GSSD_BR_ID
        AND sto.CLIENT = sd.CLIENT
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON pb.PRO_SELF_CODE = sd.GSSD_PRO_ID AND pb.CLIENT = sd.CLIENT AND
        pb.PRO_SITE = sd.GSSD_BR_ID
        LEFT JOIN ( SELECT * FROM(
        SELECT PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        UNION ALL
        SELECT PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        UNION ALL
        SELECT PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        ) proClass GROUP BY classId
        ) pc ON pc.classId = pb.PRO_CLASS
        LEFT JOIN GAIA_SD_SALE_H sh ON sd.CLIENT =sh.CLIENT AND sd.GSSD_BR_ID = sh.GSSH_BR_ID AND sd.GSSD_BILL_NO =
        sh.GSSH_BILL_NO
        LEFT JOIN GAIA_USER_DATA ud ON sd.CLIENT =ud.CLIENT AND sd.GSSD_SALER_ID = ud.USER_ID

        WHERE
        sh.GSSH_HIDE_FLAG = '0'
        <if test="taxCodeValue != null and taxCodeValue != ''">
            and concat( ROUND( sd.GSSD_MOV_TAX * 100 ), '%' ) = #{taxCodeValue}
        </if>
        ) tab
        <where>
            <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
                replace(tab.addGrossProfitRate,'%','') &lt;= #{grossProfitRateMax} +0
            </if>
            <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
                AND replace(tab.addGrossProfitRate,'%','') &gt;= #{grossProfitRateMin} +0
            </if>
            <if test="proClass != null and proClass != ''">
                AND (tab.PRO_BIG_CLASS_CODE = #{proClass} OR tab.PRO_MID_CLASS_CODE = #{proClass} OR tab.PRO_CLASS_CODE
                = #{proClass})
            </if>
            <if test="userId != null and userId != ''">
                AND tab.userId= #{userId}
            </if>
            <include refid="STORE_TAX_RATE_SELL_DETAIL" />
        </where>
        ORDER BY
        tab.saleDate,
        tab.brId,
        tab.proId
    </select>

    <sql id="STORE_TAX_RATE_SELL_DETAIL">
        <trim prefix="AND (" prefixOverrides="OR" suffix=")" >
            <if test="stoGssgTypes!=null and stoGssgTypes.size">
                EXISTS (
                SELECT 1 FROM GAIA_SD_STORES_GROUP gssg WHERE tab.CLIENT = gssg.CLIENT AND tab.brId = gssg.GSSG_BR_ID
                AND (gssg.GSSG_TYPE,gssg.GSSG_ID) IN
                <foreach collection="stoGssgTypes" item="stoGssgType" open="(" close=")" separator="," >
                    (#{stoGssgType.gssgType},#{stoGssgType.gssgId})
                </foreach>
                )
            </if>
            <if test="stoAttributes!=null and stoAttributes.size">
                OR tab.stoAttribute IN
                <foreach collection="stoAttributes" item="stoAttribute" open="(" close=")" separator="," >
                    #{stoAttribute}
                </foreach>
            </if>
            <if test="stoAttribute==''" >
                OR tab.stoAttribute IS NOT NULL AND tab.stoAttribute != ''
            </if>
            <if test="stoIfMedicals!=null and stoIfMedicals.size">
                OR tab.stoIfMedical IN
                <foreach collection="stoIfMedicals" item="stoIfMedical" open="(" close=")" separator="," >
                    #{stoIfMedical}
                </foreach>
            </if>
            <if test="stoIfMedical==''" >
                OR tab.stoIfMedical IS NOT NULL AND tab.stoIfMedical != ''
            </if>
            <if test="stoTaxClasss!=null and stoTaxClasss.size">
                OR tab.stoTaxClass IN
                <foreach collection="stoTaxClasss" item="stoTaxClass" open="(" close=")" separator="," >
                    #{stoTaxClass}
                </foreach>
            </if>
            <if test="stoTaxClass==''" >
                OR tab.stoTaxClass IS NOT NULL AND tab.stoTaxClass != ''
            </if>
            <if test="stoIfDtps!=null and stoIfDtps.size">
                OR tab.stoIfDtp IN
                <foreach collection="stoIfDtps" item="stoIfDtp" open="(" close=")" separator="," >
                    #{stoIfDtp}
                </foreach>
            </if>
            <if test="stoIfDtp==''" >
                OR tab.stoIfDtp IS NOT NULL AND tab.stoIfDtp != ''
            </if>
        </trim>
    </sql>

    <select id="selectStoreRateSellPage"
            resultType="com.gys.report.entity.StoreRateSellOutData">
        SELECT
        sd.GSSD_BR_ID brId,
        ifnull(sto.STO_SHORT_NAME,sto.STO_NAME) stoName,
        CASE
        sto.STO_TAX_CLASS
        WHEN '1' THEN
        '一般纳税人'
        WHEN '2' THEN
        '规模纳税人'
        WHEN '3' THEN
        '个体工商户'
        END AS stoTaxClass,
        ROUND(sd.GSSD_MOV_TAX*100) taxCodeValue,
        SUM(sd.GSSD_QTY) qty,
        SUM( sd.GSSD_PRC1 * ABS(sd.GSSD_QTY)) AS amountReceivable,
        SUM( sd.GSSD_AMT) AS amt,
        SUM(( sd.GSSD_PRC1 * ABS(sd.GSSD_QTY) )- sd.GSSD_AMT) deduction,
        SUM( sd.GSSD_AMT / ( 1 + sd.GSSD_MOV_TAX )) removeTaxSale,

        SUM(sd.GSSD_MOV_PRICES) movPrices,

        SUM( sd.GSSD_MOV_PRICES + sd.GSSD_TAX_RATE) includeTaxSale,

        SUM( sd.GSSD_AMT - ( sd.GSSD_MOV_PRICES + sd.GSSD_TAX_RATE)) grossProfitMargin,

        ROUND((SUM(sd.GSSD_AMT - ( sd.GSSD_MOV_PRICES + sd.GSSD_TAX_RATE)) / SUM( sd.GSSD_AMT))*100,2) grossProfitRate,

        SUM( sd.GSSD_ADD_AMT) addMovPrices,

        SUM( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX) addIncludeTaxSale,

        SUM( sd.GSSD_AMT - ( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)) addGrossProfitMargin,

        ROUND((SUM(sd.GSSD_AMT - (sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)) / SUM( sd.GSSD_AMT))*100,2) addGrossProfitRate,
        sto.STO_ATTRIBUTE stoAttribute,
        sto.STO_IF_DTP stoIfDtp,
        sto.STO_IF_MEDICALCARE stoIfMedical,
        sto.STO_TAX_CLASS stoTaxClass,
        sto.CLIENT
        FROM
        (select a.* ,
        (a.GSSD_AMT - ( a.GSSD_MOV_PRICES + a.GSSD_TAX_RATE)) / ( a.GSSD_AMT )* 100
        from ( SELECT
        gssd.CLIENT,gssd.GSSD_BR_ID,gssd.GSSD_BILL_NO,gssd.GSSD_MOV_TAX,gssd.GSSD_PRC1,gssd.GSSD_QTY,gssd.GSSD_AMT,
        (case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_MOV_PRICES
        else
        gssd.GSSD_MOV_PRICES* -1
        end
        ) GSSD_MOV_PRICES,
        (case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_TAX_RATE
        else
        gssd.GSSD_TAX_RATE * -1
        end
        ) GSSD_TAX_RATE,
        case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_AMT
        else
        gssd.GSSD_ADD_AMT* -1
        end
        GSSD_ADD_AMT,
        case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_TAX
        else
        gssd.GSSD_ADD_TAX * -1
        end
        GSSD_ADD_TAX
        FROM GAIA_SD_SALE_D gssd
        LEFT JOIN GAIA_SD_SALE_H sh ON gssd.CLIENT =sh.CLIENT AND gssd.GSSD_BR_ID = sh.GSSH_BR_ID AND gssd.GSSD_BILL_NO
        = sh.GSSH_BILL_NO
        WHERE gssd.CLIENT =#{client}
        and sh.GSSH_HIDE_FLAG = '0'
        <if test="startDate != null and startDate != ''">
            and gssd.GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and gssd.GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="gsstBrId != null and gsstBrId != ''">
            and gssd.GSSD_BR_ID = #{gsstBrId}
        </if>
        <if test="proId != null and proId != ''">
            and gssd.GSSD_PRO_ID = #{proId}
        </if>

        )a
        <where>
            <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
                ( a.GSSD_AMT - a.GSSD_ADD_AMT - a.GSSD_ADD_TAX )/ ( a.GSSD_AMT )* 100 &lt;= #{grossProfitRateMax} + 0
            </if>
            <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
                AND ( a.GSSD_AMT - a.GSSD_ADD_AMT - a.GSSD_ADD_TAX )/ ( a.GSSD_AMT )* 100 >= #{grossProfitRateMin} + 0
            </if>
        </where>
        ) sd
        LEFT JOIN GAIA_STORE_DATA sto ON sto.STO_CODE = sd.GSSD_BR_ID
        AND sto.CLIENT = sd.CLIENT
        WHERE
        1=1
        <if test="taxCodeValue != null and taxCodeValue != ''">
            and concat( ROUND( sd.GSSD_MOV_TAX * 100 ), '%' ) = #{taxCodeValue}
        </if>
        <include refid="STORE_TAX_RATE_SALES" />
        GROUP BY
        sd.GSSD_BR_ID,
        sto.STO_NAME,
        sto.STO_TAX_CLASS,
        sd.GSSD_MOV_TAX
        ORDER BY
        sd.GSSD_BR_ID


    </select>

    <sql id="STORE_TAX_RATE_SALES">
        <trim prefix="AND (" prefixOverrides="OR" suffix=")" >
            <if test="stoGssgTypes!=null and stoGssgTypes.size">
                EXISTS (
                SELECT 1 FROM GAIA_SD_STORES_GROUP gssg WHERE sto.CLIENT = gssg.CLIENT AND sto.STO_CODE = gssg.GSSG_BR_ID
                AND (gssg.GSSG_TYPE,gssg.GSSG_ID) IN
                <foreach collection="stoGssgTypes" item="stoGssgType" open="(" close=")" separator="," >
                    (#{stoGssgType.gssgType},#{stoGssgType.gssgId})
                </foreach>
                )
            </if>
            <if test="stoAttributes!=null and stoAttributes.size">
                OR sto.STO_ATTRIBUTE IN
                <foreach collection="stoAttributes" item="stoAttribute" open="(" close=")" separator="," >
                    #{stoAttribute}
                </foreach>
            </if>
            <if test="stoAttribute==''" >
                OR sto.STO_ATTRIBUTE IS NOT NULL AND sto.STO_ATTRIBUTE != ''
            </if>
            <if test="stoIfMedicals!=null and stoIfMedicals.size">
                OR sto.STO_IF_MEDICALCARE IN
                <foreach collection="stoIfMedicals" item="stoIfMedical" open="(" close=")" separator="," >
                    #{stoIfMedical}
                </foreach>
            </if>
            <if test="stoIfMedical==''" >
                OR sto.STO_IF_MEDICALCARE IS NOT NULL AND sto.STO_IF_MEDICALCARE != ''
            </if>
            <if test="stoTaxClasss!=null and stoTaxClasss.size">
                OR sto.STO_TAX_CLASS IN
                <foreach collection="stoTaxClasss" item="stoTaxClass" open="(" close=")" separator="," >
                    #{stoTaxClass}
                </foreach>
            </if>
            <if test="stoTaxClass==''" >
                OR sto.STO_TAX_CLASS IS NOT NULL AND sto.STO_TAX_CLASS != ''
            </if>
            <if test="stoIfDtps!=null and stoIfDtps.size">
                OR sto.STO_IF_DTP IN
                <foreach collection="stoIfDtps" item="stoIfDtp" open="(" close=")" separator="," >
                    #{stoIfDtp}
                </foreach>
            </if>
            <if test="stoIfDtp==''" >
                OR sto.STO_IF_DTP IS NOT NULL AND sto.STO_IF_DTP != ''
            </if>
        </trim>
    </sql>


    <select id="selectStoreSaleByDay" resultType="java.util.Map">
        select * from (
        SELECT
        sd.GSSH_TIME as datePart,
        sd.GSSH_DZQDY_ACTNO5 AS saleRemark,
        sd.GSSH_INVOICED AS invoiced,
        sd.GSSD_DATE saleDate,
        sd.GSSD_BR_ID stoCode,
        IFNULl( STO_SHORT_NAME, STO_NAME ) stoName,
        sum( sd.amountReceivable) amountReceivable,
        sum( sd.GSSD_AMT) amt,
        sd.GSSD_ZK_JFDH zkJfdh,
        sd.GSSD_ZK_JFDX zkJfdx,
        sd.GSSD_ZK_DYQ zkDyq,
        sd.GSSD_ZK_DZQ zkDzq,
        sd.GSSD_ZK_PM zkPm,
        sum( sd.GSSD_MOV_PRICES) movPrices,
        sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES) grossProfitMargin,
        IF(IFNULL(sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES ) / sum(sd.GSSD_AMT )*100,0)> 100,0,IFNULL(sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES ) / sum(sd.GSSD_AMT )*100,0))grossProfitRate,
        sd.GSSD_BILL_NO billNo,
        ifnull(sd.GSSH_REGISTER_VOUCHER_ID,'') thirdVoucherId,
        sd.cashier,
        sd.cashierName
        <if test="flag == 1">
            ,IFNULL(db.diffAmt, 0) diffAmt
        </if>
        <if test="payTypeOutData != null and payTypeOutData.size() > 0">
            ,s.payName,
            <foreach collection="payTypeOutData" item="item" separator=",">
                IFNULL(CONVERT(sum(${item.gspmKey}),DECIMAL(10,4)),0) As #{item.gspmKey}
            </foreach>
        </if>

        FROM
        (
        SELECT
        gssh.GSSH_TIME,
        gssh.GSSH_DZQDY_ACTNO5,
        gssh.GSSH_REGISTER_VOUCHER_ID,
        gssh.GSSH_INVOICED,
        gssd.CLIENT,
        gssd.GSSD_DATE,
        gssd.GSSD_BILL_NO,
        gssd.GSSD_BR_ID,
        ud.USER_ID cashier,
        ud.USER_NAM cashierName,
        SUM( GSSD_AMT ) GSSD_AMT,
        IFNULL(SUM( GSSD_ZK_JFDH ),0) GSSD_ZK_JFDH,
        IFNULL(SUM( GSSD_ZK_JFDX ),0) GSSD_ZK_JFDX,
        IFNULL(SUM( GSSD_ZK_DYQ ),0) GSSD_ZK_DYQ,
        IFNULL(SUM( GSSD_ZK_DZQ ),0) GSSD_ZK_DZQ,
        IFNULL(SUM( GSSD_ZK_PM) ,0) GSSD_ZK_PM,
        SUM( gssd.GSSD_PRC1 * ABS(gssd.GSSD_QTY )) AS amountReceivable,
        SUM((case
        when gssh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX
        else
        (gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX) * -1
        end
        )) AS GSSD_MOV_PRICES
        FROM
        GAIA_SD_SALE_D gssd
        LEFT JOIN GAIA_SD_SALE_H gssh ON gssd.CLIENT = gssh.CLIENT
        AND gssd.GSSD_BR_ID = gssh.GSSH_BR_ID
        AND gssd.GSSD_BILL_NO = gssh.GSSH_BILL_NO
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb on gssd.CLIENT = pb.CLIENT
        AND gssd.GSSD_BR_ID = pb.PRO_SITE
        AND gssd.GSSD_PRO_ID = pb.PRO_SELF_CODE
        LEFT JOIN GAIA_USER_DATA ud ON ud.CLIENT = gssh.CLIENT
        AND ud.USER_ID = gssh.GSSH_EMP
        WHERE
        gssd.CLIENT = #{client}
        AND gssh.GSSH_HIDE_FLAG = '0'
        <if test="stoCode != null and stoCode != ''">
            AND gssd.GSSD_BR_ID = #{stoCode}
        </if>
        <if test="cashier != null and cashier != ''">
            AND gssh.GSSH_EMP = #{cashier}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and gssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="startDate != null and startDate != ''">
            and gssd.GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and gssd.GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="gssdBillNos != null and gssdBillNos.size()>0">
            and gssd.GSSD_BILL_NO in
            <foreach collection="gssdBillNos" index="index" item="gssdBillNo" open="(" separator="," close=")">
                #{gssdBillNo}
            </foreach>
        </if>
        <if test="thirdVoucherId != null and thirdVoucherId != ''">
            and gssh.GSSH_REGISTER_VOUCHER_ID = #{thirdVoucherId}
        </if>
        <if test="statDatePart!=null and statDatePart!=''">
            AND gssh.GSSH_TIME <![CDATA[ >= ]]> #{statDatePart}
        </if>
        <if test="endDatePart!=null and endDatePart!=''">
            AND gssh.GSSH_TIME <![CDATA[ <= ]]> #{endDatePart}
        </if>
        <if test="userId != null and userId != ''">
            and gssd.GSSD_SALER_ID = #{userId}
        </if>
        <if test="flag == 1">
            AND (pb.PRO_OUT != '1' OR pb.PRO_OUT IS NULL)
        </if>
        <if test="saleRemark != null">
            AND gssh.GSSH_DZQDY_ACTNO5 like CONCAT('%',#{saleRemark},'%')
        </if>
        GROUP BY
        gssd.CLIENT,gssd.GSSD_BR_ID,gssd.GSSD_BILL_NO
        ) sd
        <if test="payTypeOutData != null and payTypeOutData.size() > 0">

            LEFT JOIN (SELECT GSSPM_BR_ID,
            GSSPM_BILL_NO,
            GROUP_CONCAT( GSSPM_NAME SEPARATOR ';' ) payName,
            <foreach collection="payTypeOutData" item="item" separator=",">
                IFNULL(CONVERT(SUM(CASE GSSPM_ID WHEN #{item.gspmId} THEN GSSPM_AMT END ),DECIMAL(10,2)),'0.00')
                #{item.gspmKey}
            </foreach>
            FROM GAIA_SD_SALE_PAY_MSG
            WHERE CLIENT = #{client}
            <if test="stoCode != null and stoCode != ''">
                AND GSSPM_BR_ID = #{stoCode}
            </if>
            <if test="siteArr != null and siteArr.length > 0">
                and GSSPM_BR_ID in
                <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="startDate != null and startDate != ''">
                and GSSPM_DATE &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                and GSSPM_DATE &lt;= #{endDate}
            </if>

            AND GSSPM_TYPE = 1
            group by CLIENT, GSSPM_BR_ID,GSSPM_BILL_NO) s on s.GSSPM_BR_ID = sd.GSSD_BR_ID AND s.GSSPM_BILL_NO =
            sd.GSSD_BILL_NO
        </if>
        LEFT JOIN GAIA_STORE_DATA sto ON sto.CLIENT = sd.CLIENT AND sto.STO_CODE = sd.GSSD_BR_ID

        <!--update begin -->
        <if test="flag == 1">
            LEFT JOIN (SELECT SUM(GSSD_AMT) diffAmt,
            GSSD_BILL_NO billNo,
            GSSD_BR_ID brId
            FROM GAIA_SD_SALE_D d LEFT JOIN GAIA_PRODUCT_BUSINESS b
            ON d.CLIENT = b.CLIENT
            AND d.GSSD_BR_ID = b.PRO_SITE
            AND d.GSSD_PRO_ID = b.PRO_SELF_CODE
            WHERE b.CLIENT=#{client} AND b.PRO_OUT = '1'
            <if test="stoCode != null and stoCode != ''">
                AND GSSD_BR_ID = #{stoCode}
            </if>
            <if test="startDate != null and startDate != ''">
                and GSSD_DATE &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                and GSSD_DATE &lt;= #{endDate}
            </if>
            group by GSSD_BR_ID,GSSD_BILL_NO) db ON db.brId = sd.GSSD_BR_ID AND db.billNo = sd.GSSD_BILL_NO
        </if>
        <!--update end -->
        group by sd.GSSD_BILL_NO
        ) tab
        <where>
            <if test="saleType != null and saleType != ''">
                and ${saleType} IS NOT NULL AND ${saleType} != 0
            </if>
            <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
                AND replace(tab.grossProfitRate,'%','') &lt;= #{grossProfitRateMax} +0
            </if>
            <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
                AND replace(tab.grossProfitRate,'%','') &gt;= #{grossProfitRateMin} +0
            </if>
            <if test="payTypeOutData != null and payTypeOutData.size() > 0">
                <if test="payName != null and payName.length > 0">
                    and
                    <foreach collection="payName" item="item" index="index" open="(" close=")" separator="OR">
                        tab.payName like CONCAT('%',#{item},'%')
                    </foreach>
                </if>
            </if>
        </where>
        ORDER BY tab.saleDate,tab.stoCode
    </select>

    <select id="selectStoreSaleByDayTotal" resultType="java.util.Map">
        select
        sum(amountReceivable) amountReceivable,
        sum(amt) amt,
        sum(zkJfdh) zkJfdh,
        sum(zkJfdx) zkJfdx,
        sum(zkDyq) zkDyq,
        sum(zkDzq) zkDzq,
        sum(zkPm) zkPm,
        sum(movPrices) movPrices,
        sum(amt)-sum(movPrices) grossProfitMargin,
        ROUND((sum(amt)-sum(movPrices)) / sum(amt) *100,2) grossProfitRate,
        <if test="flag == 1">
            sum(diffAmt) diffAmt,
        </if>
        <if test="payTypeOutData != null and payTypeOutData.size() > 0">
            <foreach collection="payTypeOutData" item="item" separator=",">
                IFNULL(CONVERT(sum(${item.gspmKey}),DECIMAL(10,4)),0) As #{item.gspmKey}
            </foreach>
        </if>
        from
        (
        select * from (
        SELECT
        sd.GSSD_DATE saleDate,
        sd.GSSD_BR_ID stoCode,
        IFNULl( STO_SHORT_NAME, STO_NAME ) stoName,
        sum( sd.amountReceivable) amountReceivable,
        sum( sd.GSSD_AMT) amt,
        sd.GSSD_ZK_JFDH zkJfdh,
        sd.GSSD_ZK_JFDX zkJfdx,
        sd.GSSD_ZK_DYQ zkDyq,
        sd.GSSD_ZK_DZQ zkDzq,
        sd.GSSD_ZK_PM zkPm,
        sum( sd.GSSD_MOV_PRICES) movPrices,
        sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES) grossProfitMargin,
        sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES ) / sum(sd.GSSD_AMT )*100 grossProfitRate,
        sd.GSSD_BILL_NO billNo,
        <if test="flag == 1">
            IFNULL(db.diffAmt, 0) diffAmt,
        </if>
        <if test="payTypeOutData != null and payTypeOutData.size() > 0">
            s.payName,
            <foreach collection="payTypeOutData" item="item" separator=",">
                IFNULL(CONVERT(sum(${item.gspmKey}),DECIMAL(10,4)),0) As #{item.gspmKey}
            </foreach>
        </if>

        FROM
        (
        SELECT
        gssd.CLIENT,
        gssd.GSSD_DATE,
        gssd.GSSD_BILL_NO,
        gssd.GSSD_BR_ID,
        SUM( GSSD_AMT ) GSSD_AMT,
        IFNULL(SUM( GSSD_ZK_JFDH ),0) GSSD_ZK_JFDH,
        IFNULL(SUM( GSSD_ZK_JFDX ),0) GSSD_ZK_JFDX,
        IFNULL(SUM( GSSD_ZK_DYQ ),0) GSSD_ZK_DYQ,
        IFNULL(SUM( GSSD_ZK_DZQ ),0) GSSD_ZK_DZQ,
        IFNULL(SUM( GSSD_ZK_PM) ,0) GSSD_ZK_PM,
        SUM( gssd.GSSD_PRC1 * ABS(gssd.GSSD_QTY )) AS amountReceivable,
        SUM((case
        when gssh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX
        else
        (gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX) * -1
        end
        )) AS GSSD_MOV_PRICES
        FROM
        GAIA_SD_SALE_D gssd
        LEFT JOIN GAIA_SD_SALE_H gssh ON gssd.CLIENT = gssh.CLIENT
        AND gssd.GSSD_BR_ID = gssh.GSSH_BR_ID
        AND gssd.GSSD_BILL_NO = gssh.GSSH_BILL_NO
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb on gssd.CLIENT = pb.CLIENT
        AND gssd.GSSD_BR_ID = pb.PRO_SITE
        AND gssd.GSSD_PRO_ID = pb.PRO_SELF_CODE
        WHERE
        gssd.CLIENT = #{client}
        AND gssh.GSSH_HIDE_FLAG = '0'
        <if test="stoCode != null and stoCode != ''">
            AND gssd.GSSD_BR_ID = #{stoCode}
        </if>
        <if test="cashier != null and cashier != ''">
            AND gssh.GSSH_EMP = #{cashier}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and gssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="startDate != null and startDate != ''">
            and gssd.GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and gssd.GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="statDatePart!=null and statDatePart!=''">
            AND gssh.GSSH_TIME <![CDATA[ >= ]]> #{statDatePart}
        </if>
        <if test="endDatePart!=null and endDatePart!=''">
            AND gssh.GSSH_TIME <![CDATA[ <= ]]> #{endDatePart}
        </if>
        <if test="userId != null and userId != ''">
            and gssd.GSSD_SALER_ID = #{userId}
        </if>
        <if test="flag == 1">
            AND (pb.PRO_OUT != '1' OR pb.PRO_OUT IS NULL)
        </if>
        GROUP BY
        gssd.CLIENT,gssd.GSSD_BR_ID,gssd.GSSD_BILL_NO
        ) sd
        <if test="payTypeOutData != null and payTypeOutData.size() > 0">

            LEFT JOIN (SELECT GSSPM_BR_ID,GSSPM_BILL_NO,
            GROUP_CONCAT( GSSPM_NAME SEPARATOR ';' ) payName,
            <foreach collection="payTypeOutData" item="item" separator=",">
                IFNULL(CONVERT(SUM(CASE GSSPM_ID WHEN #{item.gspmId} THEN GSSPM_AMT END ),DECIMAL(10,2)),'0.00')
                #{item.gspmKey}
            </foreach>
            FROM GAIA_SD_SALE_PAY_MSG
            WHERE CLIENT = #{client}
            <if test="stoCode != null and stoCode != ''">
                AND GSSPM_BR_ID = #{stoCode}
            </if>
            <if test="siteArr != null and siteArr.length > 0">
                and GSSPM_BR_ID in
                <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="startDate != null and startDate != ''">
                and GSSPM_DATE &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                and GSSPM_DATE &lt;= #{endDate}
            </if>

            AND GSSPM_TYPE = 1
            group by CLIENT, GSSPM_BR_ID,GSSPM_BILL_NO) s on s.GSSPM_BR_ID = sd.GSSD_BR_ID AND s.GSSPM_BILL_NO =
            sd.GSSD_BILL_NO
        </if>
        LEFT JOIN GAIA_STORE_DATA sto ON sto.CLIENT = sd.CLIENT AND sto.STO_CODE = sd.GSSD_BR_ID

        <!--update begin -->
        <if test="flag == 1">
            LEFT JOIN (SELECT SUM(GSSD_AMT) diffAmt, GSSD_BILL_NO billNo, GSSD_BR_ID brId FROM GAIA_SD_SALE_D d LEFT
            JOIN GAIA_PRODUCT_BUSINESS b
            ON d.CLIENT = b.CLIENT
            AND d.GSSD_BR_ID = b.PRO_SITE
            AND d.GSSD_PRO_ID = b.PRO_SELF_CODE
            WHERE b.CLIENT=#{client} AND b.PRO_OUT = '1'
            <if test="stoCode != null and stoCode != ''">
                AND GSSD_BR_ID = #{stoCode}
            </if>
            <if test="startDate != null and startDate != ''">
                and GSSD_DATE &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                and GSSD_DATE &lt;= #{endDate}
            </if>
            group by GSSD_BR_ID,GSSD_BILL_NO) db ON db.brId = sd.GSSD_BR_ID AND db.billNo = sd.GSSD_BILL_NO
        </if>
        <!--update end -->
        group by sd.GSSD_BILL_NO
        ) tab
        <where>
            <if test="saleType != null and saleType != ''">
                and ${saleType} IS NOT NULL AND ${saleType} != 0
            </if>
            <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
                AND replace(tab.grossProfitRate,'%','') &lt;= #{grossProfitRateMax} +0
            </if>
            <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
                AND replace(tab.grossProfitRate,'%','') &gt;= #{grossProfitRateMin} +0
            </if>
            <if test="payTypeOutData != null and payTypeOutData.size() > 0">
                <if test="payName != null and payName.length > 0">
                    and
                    <foreach collection="payName" item="item" index="index" open="(" close=")" separator="OR">
                        tab.payName like CONCAT('%',#{item},'%')
                    </foreach>
                </if>
            </if>
        </where>
        ) a
    </select>
    <select id="getProductSalesBySupplier"
            resultType="com.gys.report.entity.SalespersonsSalesDetailsOutData">
        SELECT
        sale.GSSD_BR_ID stoCode,
        sale.GSSD_PRO_ID selfCode,
        SUM( sale.GSSD_QTY ) qty,
        SUM( sale.GSSD_PRC1 * ABS(sale.GSSD_QTY )) AS amountReceivable,
        SUM( sale.GSSD_AMT ) amt,
        SUM(sale.GSSD_ADD_AMT +sale.GSSD_ADD_TAX) includeTaxSale,
        SUM(sale.GSSD_AMT - (sale.GSSD_ADD_AMT +sale.GSSD_ADD_TAX)) grossProfitMargin
        FROM
        (
        SELECT
        ssd.CLIENT,
        ssd.GSSD_BR_ID,
        ssd.GSSD_BILL_NO,
        ssd.GSSD_DATE,
        ssd.GSSD_PRC1,
        ssd.GSSD_QTY,
        ssd.GSSD_AMT,
        ssd.GSSD_PRO_ID,
        ssd.GSSD_MOV_TAX,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        IFNULL( ssd.GSSD_ADD_AMT, NULL ) ELSE IFNULL( ssd.GSSD_ADD_AMT, NULL )* - 1
        END GSSD_ADD_AMT ,

        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        IFNULL( ssd.GSSD_ADD_TAX, NULL ) ELSE IFNULL( ssd.GSSD_ADD_TAX, NULL )* - 1
        END GSSD_ADD_TAX
        FROM
        GAIA_SD_SALE_H ssh
        LEFT JOIN GAIA_SD_SALE_D ssd ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND
        ssd.GSSD_BR_ID = ssh.GSSH_BR_ID )
        WHERE
        ssh.CLIENT = #{client}
        AND ssh.GSSH_HIDE_FLAG = '0'
        <if test="siteArr != null and siteArr.length > 0">
            and ssh.GSSH_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="startDate != null and startDate != ''">
            AND ssd.GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND ssd.GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="proArr != null and proArr.size > 0">
            and ssd.GSSD_PRO_ID in
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        and ssd.GSSD_PRO_ID is not null
        ) sale
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON ( pb.CLIENT = sale.CLIENT AND pb.PRO_SITE = sale.GSSD_BR_ID AND pb.
        PRO_SELF_CODE = sale.GSSD_PRO_ID )
        <where>
            <if test="factory != null and factory != ''">
                AND (pb.PRO_FACTORY_CODE LIKE '%${factory}%' OR pb.PRO_FACTORY_NAME LIKE '%${factory}%')
            </if>
            <if test="classArrs != null and classArrs.size > 0">
                and pb.PRO_CLASS in
                <foreach collection="classArrs" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
        GROUP BY
        sale.GSSD_BR_ID,
        sale.GSSD_PRO_ID

    </select>

    <select id="getProductSalesBySupplierWithBatch"
            resultType="com.gys.report.entity.SalespersonsSalesDetailsOutData">
        SELECT
        sale.GSSD_BR_ID stoCode,
        sale.GSSD_PRO_ID selfCode,
        SUM( sale.GSSD_QTY ) qty,
        SUM( sale.GSSD_PRC1 * ABS(sale.GSSD_QTY )) AS amountReceivable,
        SUM( sale.GSSD_AMT ) amt,
        SUM(sale.GSSD_ADD_AMT +sale.GSSD_ADD_TAX) includeTaxSale,
        SUM(sale.GSSD_AMT - (sale.GSSD_ADD_AMT +sale.GSSD_ADD_TAX)) grossProfitMargin
        ,sale.GSBC_BATCH batch
        FROM
        (
        SELECT
        ssd.CLIENT,
        ssd.GSSD_BR_ID,
        ssd.GSSD_BILL_NO,
        ssd.GSSD_DATE,
        ssd.GSSD_PRC1,
        ssd.GSSD_QTY,
        ssd.GSSD_AMT,
        ssd.GSSD_PRO_ID,
        ssd.GSSD_MOV_TAX,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        IFNULL( ssd.GSSD_ADD_AMT, NULL ) ELSE IFNULL( ssd.GSSD_ADD_AMT, NULL )* - 1
        END GSSD_ADD_AMT ,

        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        IFNULL( ssd.GSSD_ADD_TAX, NULL ) ELSE IFNULL( ssd.GSSD_ADD_TAX, NULL )* - 1
        END GSSD_ADD_TAX
        , gsbc.GSBC_BATCH
        FROM
        GAIA_SD_SALE_H ssh
        LEFT JOIN GAIA_SD_SALE_D ssd ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND
        ssd.GSSD_BR_ID = ssh.GSSH_BR_ID )
        LEFT JOIN  GAIA_SD_BATCH_CHANGE gsbc
        ON
        (ssd.CLIENT = gsbc.CLIENT
        and ssd.GSSD_BR_ID = gsbc.GSBC_BR_ID
        and ssd.GSSD_BILL_NO = gsbc.GSBC_VOUCHER_ID
        and ssd.GSSD_DATE = gsbc.GSBC_DATE
        and gsbc.GSBC_PRO_ID = ssd.GSSD_PRO_ID
        and ssd.GSSD_SERIAL = gsbc.GSBC_SERIAL)
        LEFT JOIN GAIA_STORE_DATA c ON ssh.CLIENT = c.CLIENT AND ssh.GSSH_BR_ID = c.STO_CODE
        WHERE
        ssh.CLIENT = #{client}
        AND gsbc.GSBC_BATCH IS NOT NULL
        AND ssh.GSSH_HIDE_FLAG = '0'
        <if test="siteArr != null and siteArr.length > 0">
            and ssh.GSSH_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="startDate != null and startDate != ''">
            AND ssd.GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND ssd.GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="proArr != null and proArr.size > 0">
            and ssd.GSSD_PRO_ID in
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        and ssd.GSSD_PRO_ID is not null
        <include refid="STORE_CATEGORY_CONDITION_C" />
        ) sale
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON ( pb.CLIENT = sale.CLIENT AND pb.PRO_SITE = sale.GSSD_BR_ID AND pb.
        PRO_SELF_CODE = sale.GSSD_PRO_ID )
        <where>
            <if test="factory != null and factory != ''">
                AND (pb.PRO_FACTORY_CODE LIKE '%${factory}%' OR pb.PRO_FACTORY_NAME LIKE '%${factory}%')
            </if>
            <if test="classArrs != null and classArrs.size > 0">
                and pb.PRO_CLASS in
                <foreach collection="classArrs" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
        GROUP BY
        sale.GSSD_BR_ID,
        sale.GSSD_PRO_ID
        ,batch
    </select>

    <!--0829-->
    <select id="selectProductSaleByClient"
            resultType="com.gys.report.entity.StoreProductSaleClientOutData">
        select ssd.*,
        ROUND(cast(IFNULL(onlineSale.qty,0) as CHAR),2) as 'onlineSaleQty',
        ROUND(cast(IFNULL(onlineSale.amt,0) as CHAR),2) as 'onlineAmt',
        ROUND(cast(IFNULL(onlineSale.grossAmt,0) as CHAR),2) as 'onlineGrossAmt',
        ROUND(CAST(IFNULL(onlineSale.mov,0) AS CHAR),2) as 'onlineMov',
        ROUND((onlineSale.grossAmt / onlineSale.amt) * 100,2) as 'onlineGrossRate'
        ,info.BAT_PO_PRICE AS newestPrice
        ,(ssd.stoQty+ssd.dcQty) AS sumStock
        ,ROUND((ssd.stoQty/ssd.qty)*SALEDAYS.saleDay,0) AS turnoverDays_store
        ,ROUND((ssd.dcQty/ssd.qty)*SALEDAYS.saleDay,0) AS turnoverDays_dep
        ,ROUND(((ssd.stoQty+ssd.dcQty)/ssd.qty)*SALEDAYS.saleDay,0) AS turnoverDays_total
        ,SALEDAYS.saleDay AS saleDays
        from
        (
        SELECT
        sd.CLIENT,
        sto.STO_CODE stoCode,
        sto.STO_ATTRIBUTE stoAttribute,
        sto.STO_IF_DTP stoIfDtp,
        sto.STO_IF_MEDICALCARE stoIfMedical,
        sto.STO_TAX_CLASS stoTaxClass,
        sd.GSSD_PRO_ID proCode,
        pb.PRO_NAME proName,
        pb.PRO_COMMONNAME proCommonName,
        pb.PRO_SPECS specs,
        pb.PRO_UNIT unit,
        pb.PRO_FACTORY_NAME factoryName,
        tc.TAX_CODE_VALUE proOutputTax,
        CASE
        WHEN pb.PRO_IF_MED = '1' THEN
        '是'
        WHEN pb.PRO_MED_ID IS NOT NULL THEN
        '是' ELSE '否'
        END ifMed,
        pb.PRO_MED_ID proMedId,
        IF(pb.PRO_IF_WHOLESALE ='1' ,'是','否') noWholesale,
        concat(pc.PRO_BIG_CLASS_CODE,'-',pc.PRO_BIG_CLASS_NAME) bigClass,
        concat(pc.PRO_MID_CLASS_CODE,'-',pc.PRO_MID_CLASS_NAME) midClass,
        concat(pc.PRO_CLASS_CODE,'-',pc.PRO_CLASS_NAME) proClass,
        SUM(sd.qty) qty,
        SUM(sd.amountReceivable) AS amountReceivable,
        SUM( sd.amt) AS amt,
        SUM( sd.deduction) deduction,
        SUM( sd.removeTaxSale) removeTaxSale,
        SUM(sd.movPrices) movPrices,
        SUM( sd.includeTaxSale) includeTaxSale,
        SUM( sd.grossProfitMargin) grossProfitMargin,
        ROUND((SUM(grossProfitMargin) / SUM( sd.amt))*100,2) grossProfitRate,
        SUM( sd.addMovPrices) addMovPrices,
        SUM( sd.addIncludeTaxSale) addIncludeTaxSale,
        SUM( sd.addGrossProfitMargin) addGrossProfitMargin,
        ROUND((SUM(sd.addGrossProfitMargin) / SUM( sd.amt))*100,2) addGrossProfitRate,
        dcAndSto.dcQty AS dcQty,
        dcAndSto.storeQty AS stoQty,
        pb.PRO_ZDY1 AS zdy1,
        pb.PRO_ZDY2 AS zdy2,
        pb.PRO_ZDY3 AS zdy3,
        pb.PRO_ZDY4 AS zdy4,
        pb.PRO_ZDY5 AS zdy5,
        pb.PRO_SLAE_CLASS AS saleClass,
        pb.PRO_SCLASS AS prosClass,
        case pb.PRO_NO_PURCHASE
        when '1' then '是'
        else '否'
        end AS purchase,
        case pb.PRO_TSSX when '1' then '防疫'
        else '' end AS proTssx,
        pb.PRO_BARCODE AS proBarcode,
        pb.PRO_POSITION proPosition
        ,ROUND(SUM( sd.amt)/SUM( sd.qty),2) AS averagePrice
        ,sd.PRO_LSJ AS referencePrice
        FROM
        (SELECT
        b.CLIENT,
        b.GSSD_BR_ID,
        b.GSSD_BILL_NO,
        b.GSSD_PRO_ID,
        SUM(b.qty) qty,
        SUM(b.amt) amt

        ,SUM(b.movPrices) movPrices
        ,SUM(b.addMovPrices) addMovPrices
        ,SUM(b.amountReceivable) amountReceivable
        ,SUM(b.deduction) deduction
        ,SUM(b.removeTaxSale) removeTaxSale
        ,SUM(b.includeTaxSale) includeTaxSale
        ,SUM(b.grossProfitMargin) grossProfitMargin
        ,SUM(b.addIncludeTaxSale) addIncludeTaxSale
        ,SUM(b.addGrossProfitMargin) addGrossProfitMargin
        ,b.PRO_LSJ

        FROM
        (select
        a.CLIENT,
        a.GSSD_BR_ID,
        a.GSSD_BILL_NO,
        a.GSSD_QTY qty,
        a.GSSD_AMT amt,
        a.GSSD_PRO_ID
        ,a.GSSD_MOV_PRICES movPrices
        ,a.GSSD_ADD_AMT addMovPrices
        ,(a.GSSD_PRC1 * ABS(a.GSSD_QTY)) amountReceivable
        ,(( a.GSSD_PRC1 * ABS(a.GSSD_QTY) )- a.GSSD_AMT) deduction
        ,( a.GSSD_AMT / ( 1 + a.GSSD_MOV_TAX )) removeTaxSale
        ,( a.GSSD_MOV_PRICES * (1+ a.GSSD_MOV_TAX)) includeTaxSale
        ,( a.GSSD_AMT - ( a.GSSD_MOV_PRICES * (1+ a.GSSD_MOV_TAX))) grossProfitMargin
        ,( a.GSSD_ADD_AMT + a.GSSD_ADD_TAX) addIncludeTaxSale
        ,( a.GSSD_AMT - ( a.GSSD_ADD_AMT + a.GSSD_ADD_TAX)) addGrossProfitMargin
        ,a.PRO_LSJ
        from (
        SELECT gssd.CLIENT,
        gssd.GSSD_BR_ID,
        gssd.GSSD_BILL_NO,
        gssd.GSSD_MOV_TAX,
        gssd.GSSD_PRC1,
        gssd.GSSD_QTY,
        gssd.GSSD_AMT,
        gssd.GSSD_PRO_ID,
        (case when sh.GSSH_BILL_NO_RETURN is null then gssd.GSSD_MOV_PRICES else gssd.GSSD_MOV_PRICES* -1 end ) GSSD_MOV_PRICES,
        case when sh.GSSH_BILL_NO_RETURN is null then gssd.GSSD_ADD_AMT else gssd.GSSD_ADD_AMT* -1 end GSSD_ADD_AMT,
        case when sh.GSSH_BILL_NO_RETURN is null then gssd.GSSD_ADD_TAX else gssd.GSSD_ADD_TAX* -1 end GSSD_ADD_TAX
        ,pb.PRO_LSJ AS PRO_LSJ
        FROM GAIA_SD_SALE_H sh
        LEFT JOIN GAIA_SD_SALE_D gssd ON gssd.CLIENT = sh.CLIENT
        AND gssd.GSSD_BR_ID = sh.GSSH_BR_ID
        AND gssd.GSSD_BILL_NO = sh.GSSH_BILL_NO
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON gssd.CLIENT = pb.CLIENT AND gssd.GSSD_BR_ID = pb.PRO_SITE AND gssd.GSSD_PRO_ID = pb.PRO_SELF_CODE
        WHERE gssd.CLIENT =#{client}
        and sh.GSSH_HIDE_FLAG = '0'
        <if test="startDate != null and startDate != ''">
            and gssd.GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and gssd.GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="gsstBrId != null and gsstBrId != ''">
            and gssd.GSSD_BR_ID = #{gsstBrId}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and gssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="proArr != null and proArr.size > 0">
            and gssd.GSSD_PRO_ID in
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        )a
        <where>
            <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
                ROUND(( a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX ))) / ( a.GSSD_AMT )* 100, 2 ) &lt;=
                #{grossProfitRateMax} + 0
            </if>
            <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
                AND ROUND(( a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX ))) / ( a.GSSD_AMT )* 100, 2 ) >=
                #{grossProfitRateMin} + 0
            </if>
        </where>
        )b GROUP BY b.GSSD_PRO_ID,b.PRO_LSJ ORDER BY b.GSSD_PRO_ID,COUNT(*) DESC  LIMIT 1000000000
        ) sd
        LEFT JOIN GAIA_STORE_DATA sto ON sto.CLIENT = sd.CLIENT and sto.STO_CODE = sd.GSSD_BR_ID
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON sd.CLIENT = pb.CLIENT AND sd.GSSD_BR_ID = pb.PRO_SITE AND sd.GSSD_PRO_ID =
        pb.PRO_SELF_CODE
        LEFT JOIN
        (
        SELECT
        clientId,
        a.gssmProId,
        ifnull(sum(case site when 'store' then qty end),0) as storeQty,
        ifnull(sum(case site when 'dc' then qty end),0) as dcQty,
        sum(a.qty) qtySum
        FROM
        (
        SELECT
        sb.CLIENT clientId,
        sb.GSS_PRO_ID gssmProId,
        sum(sb.GSS_QTY ) qty,

        'store' site
        FROM
        GAIA_SD_STOCK sb
        WHERE
        sb.CLIENT =#{client}
        GROUP BY
        sb.CLIENT,
        sb.GSS_BR_ID,
        sb.GSS_PRO_ID

        UNION ALL

        SELECT
        kc.CLIENT clientId,
        kc.WM_SP_BM gssmProId,
        sum( kc.WM_KCSL ) qty,

        'dc' site
        FROM
        GAIA_WMS_KUCEN kc

        WHERE
        kc.CLIENT =#{client}

        GROUP BY
        kc.CLIENT,
        kc.PRO_SITE,
        kc.WM_SP_BM
        ) a
        GROUP BY
        a.clientId,
        a.gssmProId
        having
        qtySum > 0
        ORDER BY
        a.gssmProId
        ) dcAndSto ON dcAndSto.clientId=sd.CLIENT AND dcAndSto.gssmProId=sd.GSSD_PRO_ID
        LEFT JOIN GAIA_TAX_CODE tc ON tc.TAX_CODE = pb.PRO_OUTPUT_TAX
        LEFT JOIN ( SELECT * FROM(
        SELECT PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        UNION ALL
        SELECT PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        UNION ALL
        SELECT PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        ) proClass GROUP BY classId
        ) pc ON pc.classId = pb.PRO_CLASS
        <where>
            NOT EXISTS ( SELECT 1 FROM GAIA_SALES_CATALOG WHERE CLIENT = pb.CLIENT AND PRO_SELF_CODE = pb.PRO_SELF_CODE
            AND IS_DELETE = 0 AND `STATUS` IN ( 1, 2))
            <if test="classArrs != null and classArrs.size > 0">
                and pb.PRO_CLASS in
                <foreach collection="classArrs" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="factory != null and factory != ''">
                AND (pb.PRO_FACTORY_CODE LIKE '%${factory}%' OR pb.PRO_FACTORY_NAME LIKE '%${factory}%')
            </if>
            <if test="zdy1 != null and zdy1.length > 0">
                and pb.PRO_ZDY1 in
                <foreach collection="zdy1" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy2 != null and zdy2.length > 0">
                and pb.PRO_ZDY2 in
                <foreach collection="zdy2" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy3 != null and zdy3.length > 0">
                and pb.PRO_ZDY3 in
                <foreach collection="zdy3" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy4 != null and zdy4.length > 0">
                and pb.PRO_ZDY4 in
                <foreach collection="zdy4" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy5 != null and zdy5.length > 0">
                and pb.PRO_ZDY5 in
                <foreach collection="zdy5" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="saleClass != null and saleClass.length > 0">
                and pb.PRO_SLAE_CLASS in
                <foreach collection="saleClass" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="proPosition != null and proPosition.length > 0">
                and pb.PRO_POSITION in
                <foreach collection="proPosition" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="prosClass != null and prosClass.length > 0">
                and pb.PRO_SCLASS in
                <foreach collection="prosClass" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="purchase != null and purchase != ''">
                <choose>
                    <when test="purchase == '0'.toString()">
                        and (pb.PRO_NO_PURCHASE = '0' OR pb.PRO_NO_PURCHASE IS NULL )
                    </when>
                    <when test="purchase == '1'.toString()">
                        and pb.PRO_NO_PURCHASE = #{purchase}
                    </when>
                </choose>
            </if>
            <if test="proTssx != null and proTssx.size() > 0">
                AND pb.PRO_TSSX in
                <foreach collection="proTssx" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
        GROUP BY
        sd.GSSD_PRO_ID
        ORDER BY
        sd.GSSD_PRO_ID
        ) ssd
        left join
        (
        SELECT GSSD_PRO_ID,SUM(qty) qty,SUM(amt) amt,sum(mov) mov,sum(grossAmt) grossAmt from (
        SELECT
        sale.CLIENT,
        sale.GSSD_BILL_NO,
        sale.GSSD_BR_ID,
        sale.GSSD_PRO_ID,
        sale.GSSD_QTY qty,
        sale.GSSD_AMT amt,
        sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX mov,
        sale.GSSD_AMT - ( sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX ) grossAmt
        FROM
        (
        SELECT
        ssd.CLIENT,
        ssd.GSSD_BR_ID,
        ssd.GSSD_BILL_NO,
        ssd.GSSD_PRO_ID,
        ssd.GSSD_DATE,
        ssd.GSSD_PRC1,
        ssd.GSSD_PRC2,
        ssd.GSSD_QTY,
        ssd.GSSD_AMT,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_AMT ELSE ssd.GSSD_ADD_AMT * - 1
        END AS GSSD_ADD_AMT,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_TAX ELSE ssd.GSSD_ADD_TAX * - 1
        END AS GSSD_ADD_TAX
        FROM GAIA_SD_SALE_D ssd
        left JOIN GAIA_SD_SALE_H ssh ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND
        ssd.GSSD_BR_ID = ssh.GSSH_BR_ID )
        LEFT JOIN (select GSSPM_BR_ID, GSSPM_BILL_NO,GROUP_CONCAT( GSSPM_NAME SEPARATOR ';' ) payName from
        GAIA_SD_SALE_PAY_MSG
        where CLIENT=#{client}
        AND GSSPM_TYPE = '1'
        group by GSSPM_BILL_NO
        ) spm ON
        ssh.GSSH_BR_ID = spm.GSSPM_BR_ID
        AND spm.GSSPM_BILL_NO = ssh.GSSH_BILL_NO
        WHERE
        ssh.CLIENT = #{client}
        AND ssh.GSSH_HIDE_FLAG = '0'
        AND ssd.GSSD_DATE &gt;= #{startDate}
        AND ssd.GSSD_DATE &lt;= #{endDate}
        and (spm.payName like CONCAT('%','京东到家','%') or spm.payName like CONCAT('%','美团','%') or spm.payName like
        CONCAT('%','饿了么','%'))
        ) sale ) temp GROUP BY GSSD_PRO_ID
        ) onlineSale on ssd.proCode=onlineSale.GSSD_PRO_ID
        LEFT JOIN (SELECT a.* from (	SELECT BAT_PRO_CODE,BAT_PO_PRICE
        FROM GAIA_BATCH_INFO where CLIENT = #{client} AND BAT_SITE_CODE IN (SELECT DC_CODE FROM GAIA_DC_DATA WHERE CLIENT = #{client} ) and BAT_CREATE_DATE &lt;= #{endDate}
        ORDER BY BAT_CREATE_DATE DESC,BAT_CREATE_TIME DESC LIMIT 1000000000
        ) a GROUP BY a.BAT_PRO_CODE
        ) info ON info.BAT_PRO_CODE = ssd.proCode
        LEFT JOIN (SELECT DATEDIFF(MAX(GSSD_DATE),MIN(GSSD_DATE))+1 AS saleDay FROM GAIA_SD_SALE_D ssd
        left JOIN GAIA_SD_SALE_H ssh ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND ssd.GSSD_BR_ID = ssh.GSSH_BR_ID )
        WHERE ssh.CLIENT = #{client} AND ssh.GSSH_HIDE_FLAG = '0' AND ssd.GSSD_DATE >= #{startDate} AND ssd.GSSD_DATE &lt;= #{endDate}
        ) SALEDAYS  ON 1=1
        <where>
            <include refid="STORE_PRODUCT_SALE" />
        </where>
    </select>

    <sql id="STORE_PRODUCT_SALE" >
        <trim prefix="AND (" prefixOverrides="OR" suffix=")" >
            <if test="stoGssgTypes!=null and stoGssgTypes.size">
                EXISTS (
                SELECT 1 FROM GAIA_SD_STORES_GROUP gssg WHERE ssd.CLIENT = gssg.CLIENT AND ssd.stoCode = gssg.GSSG_BR_ID
                AND (gssg.GSSG_TYPE,gssg.GSSG_ID) IN
                <foreach collection="stoGssgTypes" item="stoGssgType" open="(" close=")" separator="," >
                    (#{stoGssgType.gssgType},#{stoGssgType.gssgId})
                </foreach>
                )
            </if>
            <if test="stoAttributes!=null and stoAttributes.size">
                OR ssd.stoAttribute IN
                <foreach collection="stoAttributes" item="stoAttribute" open="(" close=")" separator="," >
                    #{stoAttribute}
                </foreach>
            </if>
            <if test="stoAttribute==''" >
                OR ssd.stoAttribute IS NOT NULL AND ssd.stoAttribute != ''
            </if>
            <if test="stoIfMedicals!=null and stoIfMedicals.size">
                OR ssd.stoIfMedical IN
                <foreach collection="stoIfMedicals" item="stoIfMedical" open="(" close=")" separator="," >
                    #{stoIfMedical}
                </foreach>
            </if>
            <if test="stoIfMedical==''" >
                OR ssd.stoIfMedical IS NOT NULL AND ssd.stoIfMedical != ''
            </if>
            <if test="stoTaxClasss!=null and stoTaxClasss.size">
                OR ssd.stoTaxClass IN
                <foreach collection="stoTaxClasss" item="stoTaxClass" open="(" close=")" separator="," >
                    #{stoTaxClass}
                </foreach>
            </if>
            <if test="stoTaxClass==''" >
                OR ssd.stoTaxClass IS NOT NULL AND ssd.stoTaxClass != ''
            </if>
            <if test="stoIfDtps!=null and stoIfDtps.size">
                OR ssd.stoIfDtp IN
                <foreach collection="stoIfDtps" item="stoIfDtp" open="(" close=")" separator="," >
                    #{stoIfDtp}
                </foreach>
            </if>
            <if test="stoIfDtp==''" >
                OR ssd.stoIfDtp IS NOT NULL AND ssd.stoIfDtp != ''
            </if>
        </trim>
    </sql>
    <!--    0829-->
    <select id="selectProductSaleByClientTatol"
            resultType="com.gys.report.entity.StoreProductSaleClientOutTotal">
        SELECT

        SUM(sd.GSSD_QTY) qty,
        SUM( sd.GSSD_PRC1 * ABS(sd.GSSD_QTY)) AS amountReceivable,
        SUM( sd.GSSD_AMT) AS amt,
        SUM(( sd.GSSD_PRC1 * ABS(sd.GSSD_QTY) )- sd.GSSD_AMT) deduction,
        SUM( sd.GSSD_AMT / ( 1 + sd.GSSD_MOV_TAX )) removeTaxSale,

        SUM(sd.GSSD_MOV_PRICES) movPrices,

        SUM( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX)) includeTaxSale,

        SUM( sd.GSSD_AMT - ( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX))) grossProfitMargin,

        concat(ROUND((SUM(sd.GSSD_AMT - ( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX))) / SUM( sd.GSSD_AMT))*100,2),'%')
        grossProfitRate,

        SUM( sd.GSSD_ADD_AMT) addMovPrices,

        SUM( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX) addIncludeTaxSale,

        SUM( sd.GSSD_AMT - ( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)) addGrossProfitMargin,

        concat(ROUND((SUM(sd.GSSD_AMT - ( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)) / SUM( sd.GSSD_AMT))*100,2),'%')
        addGrossProfitRate
        ,ROUND(SUM( sd.GSSD_AMT)/SUM( sd.GSSD_QTY),2) AS averagePrice
        FROM
        (select a.* ,
        (a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX))) / ( a.GSSD_AMT )* 100
        from (
        SELECT gssd.CLIENT,
        gssd.GSSD_BR_ID,
        gssd.GSSD_BILL_NO,
        gssd.GSSD_MOV_TAX,
        gssd.GSSD_PRC1,
        gssd.GSSD_QTY,
        gssd.GSSD_AMT,
        gssd.GSSD_PRO_ID,
        (case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_MOV_PRICES
        else
        gssd.GSSD_MOV_PRICES* -1
        end
        ) GSSD_MOV_PRICES,
        case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_AMT
        else
        gssd.GSSD_ADD_AMT* -1
        end
        GSSD_ADD_AMT,
        case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_TAX
        else
        gssd.GSSD_ADD_TAX* -1
        end
        GSSD_ADD_TAX
        FROM GAIA_SD_SALE_H sh
        LEFT JOIN GAIA_SD_SALE_D gssd ON gssd.CLIENT = sh.CLIENT AND gssd.GSSD_BR_ID = sh.GSSH_BR_ID AND
        gssd.GSSD_BILL_NO = sh.GSSH_BILL_NO
        WHERE gssd.CLIENT =#{client}
        and sh.GSSH_HIDE_FLAG = '0'
        <if test="startDate != null and startDate != ''">
            and gssd.GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and gssd.GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="gsstBrId != null and gsstBrId != ''">
            and gssd.GSSD_BR_ID = #{gsstBrId}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and gssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="proArr != null and proArr.size > 0">
            and gssd.GSSD_PRO_ID in
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>

        )a
        <where>
            <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
                ROUND(( a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX ))) / ( a.GSSD_AMT )* 100, 2 ) &lt;=
                #{grossProfitRateMax} + 0
            </if>
            <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
                AND ROUND(( a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX ))) / ( a.GSSD_AMT )* 100, 2 ) >=
                #{grossProfitRateMin} + 0
            </if>
        </where>
        ) sd
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON sd.CLIENT = pb.CLIENT AND sd.GSSD_BR_ID = pb.PRO_SITE AND sd.GSSD_PRO_ID =
        pb.PRO_SELF_CODE
        LEFT JOIN ( SELECT * FROM(
        SELECT PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        UNION ALL
        SELECT PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        UNION ALL
        SELECT PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        ) proClass GROUP BY classId
        ) pc ON pc.classId = pb.PRO_CLASS
        <where>
            NOT EXISTS ( SELECT 1 FROM GAIA_SALES_CATALOG WHERE CLIENT = pb.CLIENT AND PRO_SELF_CODE = pb.PRO_SELF_CODE
            AND IS_DELETE = 0 AND `STATUS` IN ( 1, 2))
            <if test="classArrs != null and classArrs.size > 0">
                and pb.PRO_CLASS in
                <foreach collection="classArrs" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="factory != null and factory != ''">
                AND (pb.PRO_FACTORY_CODE LIKE '%${factory}%' OR pb.PRO_FACTORY_NAME LIKE '%${factory}%')
            </if>
            <if test="zdy1 != null and zdy1.length > 0">
                and pb.PRO_ZDY1 in
                <foreach collection="zdy1" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy2 != null and zdy2.length > 0">
                and pb.PRO_ZDY2 in
                <foreach collection="zdy2" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy3 != null and zdy3.length > 0">
                and pb.PRO_ZDY3 in
                <foreach collection="zdy3" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy4 != null and zdy4.length > 0">
                and pb.PRO_ZDY4 in
                <foreach collection="zdy4" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy5 != null and zdy5.length > 0">
                and pb.PRO_ZDY5 in
                <foreach collection="zdy5" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="saleClass != null and saleClass.length > 0">
                and pb.PRO_SLAE_CLASS in
                <foreach collection="saleClass" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="proPosition != null and proPosition.length > 0">
                and pb.PRO_POSITION in
                <foreach collection="proPosition" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="prosClass != null and prosClass.length > 0">
                and pb.PRO_SCLASS in
                <foreach collection="prosClass" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="purchase != null and purchase != ''">
                and pb.PRO_NO_PURCHASE = #{purchase}
            </if>
            <if test="proTssx != null and proTssx.size() > 0">
                AND pb.PRO_TSSX in
                <foreach collection="proTssx" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
    </select>
    <!--0829-->
    <select id="selectProductSaleByProAllStore"
            resultType="com.gys.report.entity.StoreProductSaleStoreOutData">

        select ssd.*,
        ROUND(cast(IFNULL(onlineSale.qty,0) as CHAR),2) as 'onlineSaleQty',
        ROUND(cast(IFNULL(onlineSale.amt,0) as CHAR),2) as 'onlineAmt',
        ROUND(cast(IFNULL(onlineSale.grossAmt,0) as CHAR),2) as 'onlineGrossAmt',
        ROUND(CAST(IFNULL(onlineSale.mov,0) AS CHAR),2) as 'onlineMov',
        ROUND((onlineSale.grossAmt / onlineSale.amt) * 100,2) as 'onlineGrossRate'
        ,ROUND(ssd.amt/ssd.qty,2) AS averagePrice
        ,P.GSPP_PRICE_NORMAL AS retailPrice
        ,P.GSPP_PRICE_HY AS memberPrice
        ,P.GSPP_PRICE_HYR AS memberDayPrice
        ,info.GSAD_DISCOUNT_PRICE AS newestPrice
        ,IF(A.MAT_TOTAL_QTY = 0,(A.MAT_MOV_PRICE*(1+CONVERT(REPLACE(IFNULL(ssd.proOutputTax,'0%'),'%',''),SIGNED)/100)),((A.MAT_ADD_AMT+A.MAT_ADD_TAX)/A.MAT_TOTAL_QTY)) AS movePrice
        ,S.GSS_QTY AS sumStock
        ,ROUND((S.GSS_QTY/ssd.qty)*SALEDAYS.saleDay,0) AS turnoverDays
        ,SALEDAYS.saleDay AS saleDays
        from
        (
        SELECT
        stoPro.CLIENT,
        stoPro.STO_CODE stoCode,
        stoPro.STO_NAME stoName,
        <if test="noBatch != null and noBatch == '1'.toString()">
            sd.GSBC_BATCH_NO,
        </if>
        stoPro.PRO_SELF_CODE proCode,
        pb2.PRO_NAME proName,
        pb2.PRO_COMMONNAME proCommonName,
        pb2.PRO_SPECS specs,
        pb2.PRO_UNIT unit,
        pb2.PRO_FACTORY_NAME factoryName,
        IF(pb2.PRO_IF_WHOLESALE ='1' ,'是','否') noWholesale,
        tc.TAX_CODE_VALUE proOutputTax,
        CASE
        WHEN pb2.PRO_IF_MED = '1' THEN
        '是'
        WHEN pb2.PRO_MED_ID IS NOT NULL THEN
        '是' ELSE '否'
        END ifMed,
        pb2.PRO_MED_ID proMedId,
        concat(pc.PRO_BIG_CLASS_CODE,'-',pc.PRO_BIG_CLASS_NAME) bigClass,
        concat(pc.PRO_MID_CLASS_CODE,'-',pc.PRO_MID_CLASS_NAME) midClass,
        concat(pc.PRO_CLASS_CODE,'-',pc.PRO_CLASS_NAME) proClass,
        SUM(sd.GSSD_QTY) qty,
        SUM( sd.GSSD_PRC1 * ABS(sd.GSSD_QTY)) AS amountReceivable,
        SUM( sd.GSSD_AMT) AS amt,
        SUM(( sd.GSSD_PRC1 * ABS(sd.GSSD_QTY) )- sd.GSSD_AMT) deduction,
        SUM( sd.GSSD_AMT / ( 1 + sd.GSSD_MOV_TAX )) removeTaxSale,

        SUM(sd.GSSD_MOV_PRICES) movPrices,

        SUM( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX)) includeTaxSale,

        SUM( sd.GSSD_AMT - ( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX))) grossProfitMargin,

        ROUND((SUM(sd.GSSD_AMT - ( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX))) / SUM( sd.GSSD_AMT))*100,2)
        grossProfitRate,

        SUM( sd.GSSD_ADD_AMT) addMovPrices,

        SUM( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX) addIncludeTaxSale,

        SUM( sd.GSSD_AMT - ( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)) addGrossProfitMargin,

        ROUND((SUM(sd.GSSD_AMT - ( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)) / SUM( sd.GSSD_AMT))*100,2) addGrossProfitRate,
        pb2.PRO_ZDY1 AS zdy1,
        pb2.PRO_ZDY2 AS zdy2,
        pb2.PRO_ZDY3 AS zdy3,
        pb2.PRO_ZDY4 AS zdy4,
        pb2.PRO_ZDY5 AS zdy5,
        pb2.PRO_SLAE_CLASS AS saleClass,
        pb2.PRO_SCLASS AS prosClass,
        case pb2.PRO_NO_PURCHASE
        when '1' then '是'
        when '0' then '否'
        end AS purchase,
        case pb2.PRO_TSSX when '1' then '防疫'
        else '' end AS proTssx,
        pb2.PRO_POSITION proPosition,
        pb2.PRO_BARCODE proBarcode,
        stoPro.STO_ATTRIBUTE stoAttribute,
        stoPro.STO_IF_DTP stoIfDtp,
        stoPro.STO_IF_MEDICALCARE stoIfMedical,
        stoPro.STO_TAX_CLASS stoTaxClass
        FROM
        (
        SELECT * FROM ( SELECT
        sto.CLIENT,sto.STO_CODE,IFNULL(sto.STO_SHORT_NAME,STO_NAME) STO_NAME,pb.PRO_SELF_CODE,
        sto.STO_ATTRIBUTE,
        sto.STO_IF_DTP,
        sto.STO_IF_MEDICALCARE,
        sto.STO_TAX_CLASS
        FROM
        GAIA_STORE_DATA sto
        LEFT JOIN ( SELECT CLIENT, PRO_SELF_CODE FROM GAIA_PRODUCT_BUSINESS WHERE CLIENT =#{client}
        <if test="proArr != null and proArr.size > 0">
            and PRO_SELF_CODE in
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        GROUP BY PRO_SELF_CODE ) pb ON sto.CLIENT = pb.CLIENT
        WHERE sto.CLIENT =#{client}
        <if test="gsstBrId != null and gsstBrId != ''">
            and sto.STO_CODE = #{gsstBrId}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and sto.STO_CODE in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        ) a
        ) stoPro
        LEFT JOIN (select a.* ,
        (a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX))) / ( a.GSSD_AMT )* 100
        from (
        SELECT gssd.CLIENT,
        gssd.GSSD_BR_ID,
        gssd.GSSD_BILL_NO,
        gssd.GSSD_MOV_TAX,
        gssd.GSSD_PRC1,
        gssd.GSSD_QTY,
        gssd.GSSD_AMT,
        gssd.GSSD_PRO_ID,
        <if test="noBatch != null and noBatch == '1'.toString()">
            bc.GSBC_BATCH_NO,
        </if>
        (case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_MOV_PRICES
        else
        gssd.GSSD_MOV_PRICES* -1
        end
        ) GSSD_MOV_PRICES,
        case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_AMT
        else
        gssd.GSSD_ADD_AMT* -1
        end
        GSSD_ADD_AMT,
        case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_TAX
        else
        gssd.GSSD_ADD_TAX* -1
        end
        GSSD_ADD_TAX
        FROM GAIA_SD_SALE_D gssd
        LEFT JOIN GAIA_SD_SALE_H sh ON gssd.CLIENT =sh.CLIENT AND gssd.GSSD_BR_ID = sh.GSSH_BR_ID AND gssd.GSSD_BILL_NO
        = sh.GSSH_BILL_NO
        <if test="noBatch != null and noBatch == '1'.toString()">
            LEFT JOIN (
            SELECT
            GSBC_VOUCHER_ID,
            GSBC_BR_ID,
            GSBC_PRO_ID,
            GSBC_BATCH_NO,
            GSBC_SERIAL
            FROM
            GAIA_SD_BATCH_CHANGE
            WHERE
            CLIENT = #{client}
            <if test="siteArr != null and siteArr.length > 0">
                and GSBC_BR_ID in
                <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            GROUP BY
            CLIENT,
            GSBC_BR_ID,
            GSBC_VOUCHER_ID,
            GSBC_DATE,
            GSBC_SERIAL,
            GSBC_PRO_ID,
            GSBC_BATCH_NO
            )bc ON bc.GSBC_VOUCHER_ID = gssd.GSSD_BILL_NO AND bc.GSBC_BR_ID = gssd.GSSD_BR_ID AND bc.GSBC_PRO_ID =
            gssd.GSSD_PRO_ID AND bc.GSBC_SERIAL = gssd.GSSD_SERIAL
        </if>
        WHERE gssd.CLIENT =#{client}
        and sh.GSSH_HIDE_FLAG = '0'
        <if test="startDate != null and startDate != ''">
            and gssd.GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and gssd.GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="gsstBrId != null and gsstBrId != ''">
            and gssd.GSSD_BR_ID = #{gsstBrId}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and gssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="proArr != null and proArr.size > 0">
            and gssd.GSSD_PRO_ID in
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>

        )a
        <where>
            <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
                ROUND(( a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX ))) / ( a.GSSD_AMT )* 100, 2 ) &lt;=
                #{grossProfitRateMax} + 0
            </if>
            <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
                AND ROUND(( a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX ))) / ( a.GSSD_AMT )* 100, 2 ) >=
                #{grossProfitRateMin} + 0
            </if>
        </where>
        ) sd ON stoPro.CLIENT = sd.CLIENT AND stoPro.STO_CODE = sd.GSSD_BR_ID AND stoPro.PRO_SELF_CODE = sd.GSSD_PRO_ID
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb2 ON stoPro.CLIENT = pb2.CLIENT AND stoPro.STO_CODE = pb2.PRO_SITE AND
        stoPro.PRO_SELF_CODE = pb2.PRO_SELF_CODE
        LEFT JOIN GAIA_TAX_CODE tc ON tc.TAX_CODE = pb2.PRO_OUTPUT_TAX
        LEFT JOIN ( SELECT * FROM(
        SELECT PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        UNION ALL
        SELECT PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        UNION ALL
        SELECT PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        ) proClass GROUP BY classId
        ) pc ON pc.classId = pb2.PRO_CLASS
        <where>
            NOT EXISTS ( SELECT 1 FROM GAIA_SALES_CATALOG WHERE CLIENT = pb2.CLIENT AND PRO_SELF_CODE =
            pb2.PRO_SELF_CODE AND IS_DELETE = 0 AND `STATUS` IN ( 1, 2))
            <if test="classArrs != null and classArrs.size > 0">
                and pb2.PRO_CLASS in
                <foreach collection="classArrs" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="factory != null and factory != ''">
                AND (pb2.PRO_FACTORY_CODE LIKE '%${factory}%' OR pb2.PRO_FACTORY_NAME LIKE '%${factory}%')
            </if>
            <if test="zdy1 != null and zdy1.length > 0">
                and pb2.PRO_ZDY1 in
                <foreach collection="zdy1" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy2 != null and zdy2.length > 0">
                and pb2.PRO_ZDY2 in
                <foreach collection="zdy2" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy3 != null and zdy3.length > 0">
                and pb2.PRO_ZDY3 in
                <foreach collection="zdy3" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy4 != null and zdy4.length > 0">
                and pb2.PRO_ZDY4 in
                <foreach collection="zdy4" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy5 != null and zdy5.length > 0">
                and pb2.PRO_ZDY5 in
                <foreach collection="zdy5" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="saleClass != null and saleClass.length > 0">
                and pb2.PRO_SLAE_CLASS in
                <foreach collection="saleClass" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="proPosition != null and proPosition.length > 0">
                and pb2.PRO_POSITION in
                <foreach collection="proPosition" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="prosClass != null and prosClass.length > 0">
                and pb2.PRO_SCLASS in
                <foreach collection="prosClass" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="purchase != null and purchase != ''">
                and pb2.PRO_NO_PURCHASE = #{purchase}
            </if>
            <if test="proTssx != null and proTssx.size() > 0">
                AND pb2.PRO_TSSX in
                <foreach collection="proTssx" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
        GROUP BY
        stoPro.STO_CODE,
        stoPro.PRO_SELF_CODE
        <if test="noBatch != null and noBatch == '1'.toString()">
            ,sd.GSBC_BATCH_NO
        </if>
        ORDER BY
        stoPro.PRO_SELF_CODE,
        stoPro.STO_CODE
        <if test="noBatch != null and noBatch == '1'.toString()">
            ,sd.GSBC_BATCH_NO
        </if>
        ) ssd
        left join
        (
        SELECT GSSD_PRO_ID,GSSD_BR_ID,SUM(qty) qty,SUM(amt) amt,sum(mov) mov,sum(grossAmt) grossAmt from (
        SELECT
        sale.CLIENT,
        sale.GSSD_BILL_NO,
        sale.GSSD_BR_ID,
        sale.GSSD_PRO_ID,
        sale.GSSD_QTY qty,
        sale.GSSD_AMT amt,
        sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX mov,
        sale.GSSD_AMT - ( sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX ) grossAmt
        FROM
        (
        SELECT
        ssd.CLIENT,
        ssd.GSSD_BR_ID,
        ssd.GSSD_BILL_NO,
        ssd.GSSD_PRO_ID,
        ssd.GSSD_DATE,
        ssd.GSSD_PRC1,
        ssd.GSSD_PRC2,
        ssd.GSSD_QTY,
        ssd.GSSD_AMT,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_AMT ELSE ssd.GSSD_ADD_AMT * - 1
        END AS GSSD_ADD_AMT,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_TAX ELSE ssd.GSSD_ADD_TAX * - 1
        END AS GSSD_ADD_TAX
        FROM GAIA_SD_SALE_D ssd
        left JOIN GAIA_SD_SALE_H ssh ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND
        ssd.GSSD_BR_ID = ssh.GSSH_BR_ID )
        LEFT JOIN (select GSSPM_BR_ID, GSSPM_BILL_NO,GROUP_CONCAT( GSSPM_NAME SEPARATOR ';' ) payName from
        GAIA_SD_SALE_PAY_MSG
        where CLIENT=#{client}
        AND GSSPM_TYPE = '1'
        group by GSSPM_BILL_NO
        ) spm ON
        ssh.GSSH_BR_ID = spm.GSSPM_BR_ID
        AND spm.GSSPM_BILL_NO = ssh.GSSH_BILL_NO
        WHERE
        ssh.CLIENT = #{client}
        AND ssh.GSSH_HIDE_FLAG = '0'
        AND ssd.GSSD_DATE &gt;= #{startDate}
        AND ssd.GSSD_DATE &lt;= #{endDate}
        and (spm.payName like CONCAT('%','京东到家','%') or spm.payName like CONCAT('%','美团','%') or spm.payName like
        CONCAT('%','饿了么','%'))
        ) sale ) temp GROUP BY GSSD_PRO_ID,GSSD_BR_ID
        ) onlineSale on ssd.proCode=onlineSale.GSSD_PRO_ID AND ssd.stoCode=onlineSale.GSSD_BR_ID
        LEFT JOIN GAIA_SD_PRODUCT_PRICE P ON ssd.ClIENT = P.CLIENT AND ssd.stoCode = P.GSPP_BR_ID AND ssd.proCode = P.GSPP_PRO_ID
        LEFT JOIN GAIA_MATERIAL_ASSESS A ON ssd.CLIENT = A.CLIENT AND ssd.stoCode = A.MAT_ASSESS_SITE AND ssd.proCode = A.MAT_PRO_CODE
        LEFT JOIN GAIA_SD_STOCK S ON ssd.CLIENT = S.CLIENT AND ssd.stoCode = S.GSS_BR_ID AND ssd.proCode = S.GSS_PRO_ID
        LEFT JOIN (SELECT a.* from (	SELECT GSAD_BR_ID,GSAD_PRO_ID,GSAD_DISCOUNT_PRICE
        FROM GAIA_SD_ACCEPT_D where CLIENT = #{client} and GSAD_DATE &lt;= #{endDate}
        ORDER BY GSAD_BR_ID,GSAD_PRO_ID,GSAD_DATE DESC,GSAD_VOUCHER_ID DESC LIMIT 1000000000
        ) a GROUP BY a.GSAD_BR_ID,a.GSAD_PRO_ID
        ) info ON info.GSAD_PRO_ID = ssd.proCode AND info.GSAD_BR_ID = ssd.stoCode
        LEFT JOIN (SELECT ssd.GSSD_BR_ID,DATEDIFF(MAX(GSSD_DATE),MIN(GSSD_DATE))+1 AS saleDay FROM GAIA_SD_SALE_D ssd
        left JOIN GAIA_SD_SALE_H ssh ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND ssd.GSSD_BR_ID = ssh.GSSH_BR_ID )
        WHERE ssh.CLIENT = #{client} AND ssh.GSSH_HIDE_FLAG = '0' AND ssd.GSSD_DATE &gt;= #{startDate} AND ssd.GSSD_DATE &lt;= #{endDate}
        GROUP BY ssd.GSSD_BR_ID
        ) SALEDAYS  ON SALEDAYS.GSSD_BR_ID=ssd.stoCode
        <where>
            <include refid="STORE_CATEGORY_CONDITION" />
        </where>
    </select>
    <!--    0829-->
    <select id="selectProductSaleByProAllStoreTatol"
            resultType="com.gys.report.entity.StoreProductSaleStoreOutTotal">
        SELECT
        SUM(sd.GSSD_QTY) qty,
        SUM( sd.GSSD_PRC1 * ABS(sd.GSSD_QTY)) AS amountReceivable,
        SUM( sd.GSSD_AMT) AS amt,
        SUM(( sd.GSSD_PRC1 * ABS(sd.GSSD_QTY) )- sd.GSSD_AMT) deduction,
        SUM( sd.GSSD_AMT / ( 1 + sd.GSSD_MOV_TAX )) removeTaxSale,

        SUM(sd.GSSD_MOV_PRICES) movPrices,

        SUM( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX)) includeTaxSale,

        SUM( sd.GSSD_AMT - ( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX))) grossProfitMargin,

        concat(ROUND((SUM(sd.GSSD_AMT - ( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX))) / SUM( sd.GSSD_AMT))*100,2),'%')
        grossProfitRate,

        SUM( sd.GSSD_ADD_AMT) addMovPrices,

        SUM( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX) addIncludeTaxSale,

        SUM( sd.GSSD_AMT - ( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)) addGrossProfitMargin,

        concat(ROUND((SUM(sd.GSSD_AMT - ( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)) / SUM( sd.GSSD_AMT))*100,2),'%') addGrossProfitRate
        ,ROUND(SUM(sd.GSSD_AMT)/SUM(sd.GSSD_QTY),2) AS averagePrice
        FROM
        (
        SELECT * FROM ( SELECT
        sto.CLIENT,sto.STO_CODE,IFNULL(sto.STO_SHORT_NAME,STO_NAME) STO_NAME,pb.PRO_SELF_CODE
        FROM
        GAIA_STORE_DATA sto
        LEFT JOIN ( SELECT CLIENT, PRO_SELF_CODE FROM GAIA_PRODUCT_BUSINESS WHERE CLIENT = #{client}
        <if test="proArr != null and proArr.size > 0">
            and PRO_SELF_CODE in
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        GROUP BY PRO_SELF_CODE ) pb ON sto.CLIENT = pb.CLIENT
        WHERE sto.CLIENT = #{client}
        <if test="gsstBrId != null and gsstBrId != ''">
            and sto.STO_CODE = #{gsstBrId}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and sto.STO_CODE in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        ) a
        ) stoPro
        LEFT JOIN (select a.* ,
        (a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX))) / ( a.GSSD_AMT )* 100
        from (
        SELECT gssd.CLIENT,
        gssd.GSSD_BR_ID,
        gssd.GSSD_BILL_NO,
        gssd.GSSD_MOV_TAX,
        gssd.GSSD_PRC1,
        gssd.GSSD_QTY,
        gssd.GSSD_AMT,
        gssd.GSSD_PRO_ID,
        gssd.GSSD_BATCH_NO,
        (case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_MOV_PRICES
        else
        gssd.GSSD_MOV_PRICES* -1
        end
        ) GSSD_MOV_PRICES,
        case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_AMT
        else
        gssd.GSSD_ADD_AMT* -1
        end
        GSSD_ADD_AMT,
        case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_TAX
        else
        gssd.GSSD_ADD_TAX* -1
        end
        GSSD_ADD_TAX
        FROM GAIA_SD_SALE_D gssd
        LEFT JOIN GAIA_SD_SALE_H sh ON gssd.CLIENT =sh.CLIENT AND gssd.GSSD_BR_ID = sh.GSSH_BR_ID AND gssd.GSSD_BILL_NO
        = sh.GSSH_BILL_NO
        WHERE gssd.CLIENT =#{client}
        and sh.GSSH_HIDE_FLAG = '0'
        <if test="startDate != null and startDate != ''">
            and gssd.GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and gssd.GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="gsstBrId != null and gsstBrId != ''">
            and gssd.GSSD_BR_ID = #{gsstBrId}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and gssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="proArr != null and proArr.size > 0">
            and gssd.GSSD_PRO_ID in
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>

        )a
        <where>
            <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
                ROUND(( a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX ))) / ( a.GSSD_AMT )* 100, 2 ) &lt;=
                #{grossProfitRateMax} + 0
            </if>
            <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
                AND ROUND(( a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX ))) / ( a.GSSD_AMT )* 100, 2 ) >=
                #{grossProfitRateMin} + 0
            </if>
        </where>
        ) sd ON stoPro.CLIENT = sd.CLIENT AND stoPro.STO_CODE = sd.GSSD_BR_ID AND stoPro.PRO_SELF_CODE = sd.GSSD_PRO_ID
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb2 ON stoPro.CLIENT = pb2.CLIENT AND stoPro.STO_CODE = pb2.PRO_SITE AND
        stoPro.PRO_SELF_CODE = pb2.PRO_SELF_CODE
        LEFT JOIN ( SELECT * FROM(
        SELECT PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        UNION ALL
        SELECT PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        UNION ALL
        SELECT PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        ) proClass GROUP BY classId
        ) pc ON pc.classId = pb2.PRO_CLASS
        <where>
            NOT EXISTS ( SELECT 1 FROM GAIA_SALES_CATALOG WHERE CLIENT = pb2.CLIENT AND PRO_SELF_CODE =
            pb2.PRO_SELF_CODE AND IS_DELETE = 0 AND `STATUS` IN ( 1, 2))
            <if test="classArrs != null and classArrs.size > 0">
                and pb2.PRO_CLASS in
                <foreach collection="classArrs" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="factory != null and factory != ''">
                AND (pb2.PRO_FACTORY_CODE LIKE '%${factory}%' OR pb2.PRO_FACTORY_NAME LIKE '%${factory}%')
            </if>
            <if test="zdy1 != null and zdy1.length > 0">
                and pb2.PRO_ZDY1 in
                <foreach collection="zdy1" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy2 != null and zdy2.length > 0">
                and pb2.PRO_ZDY2 in
                <foreach collection="zdy2" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy3 != null and zdy3.length > 0">
                and pb2.PRO_ZDY3 in
                <foreach collection="zdy3" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy4 != null and zdy4.length > 0">
                and pb2.PRO_ZDY4 in
                <foreach collection="zdy4" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy5 != null and zdy5.length > 0">
                and pb2.PRO_ZDY5 in
                <foreach collection="zdy5" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="saleClass != null and saleClass.length > 0">
                and pb2.PRO_SLAE_CLASS in
                <foreach collection="saleClass" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="proPosition != null and proPosition.length > 0">
                and pb2.PRO_POSITION in
                <foreach collection="proPosition" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="prosClass != null and prosClass.length > 0">
                and pb2.PRO_SCLASS in
                <foreach collection="prosClass" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="purchase != null and purchase != ''">
                and pb2.PRO_NO_PURCHASE = #{purchase}
            </if>
            <if test="proTssx != null and proTssx.size() > 0">
                AND pb2.PRO_TSSX in
                <foreach collection="proTssx" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
    </select>
    <!--0829-->
    <select id="selectProductSaleByStore"
            resultType="com.gys.report.entity.StoreProductSaleStoreOutData">
        select ssd.*,
        ROUND(cast(IFNULL(onlineSale.qty,0) as CHAR),2) as 'onlineSaleQty',
        ROUND(cast(IFNULL(onlineSale.amt,0) as CHAR),2) as 'onlineAmt',
        ROUND(cast(IFNULL(onlineSale.grossAmt,0) AS CHAR),2) as 'onlineGrossAmt',
        ROUND(CAST(IFNULL(onlineSale.mov,0) AS CHAR),2) as 'onlineMov',
        ROUND((onlineSale.grossAmt / onlineSale.amt) * 100,2) as 'onlineGrossRate'
        ,ROUND(ssd.amt/ssd.qty,2) AS averagePrice
        ,P.GSPP_PRICE_NORMAL AS retailPrice
        ,P.GSPP_PRICE_HY AS memberPrice
        ,P.GSPP_PRICE_HYR AS memberDayPrice
        ,info.GSAD_DISCOUNT_PRICE AS newestPrice
        ,IF(A.MAT_TOTAL_QTY = 0,(A.MAT_MOV_PRICE*(1+CONVERT(REPLACE(IFNULL(ssd.proOutputTax,'0%'),'%',''),SIGNED)/100)),((A.MAT_ADD_AMT+A.MAT_ADD_TAX)/A.MAT_TOTAL_QTY)) AS movePrice
        ,S.GSS_QTY AS sumStock
        ,ROUND((S.GSS_QTY/ssd.qty)*SALEDAYS.saleDay,0) AS turnoverDays
        ,SALEDAYS.saleDay AS saleDays
        from
        (
        SELECT
        sto.ClIENT,
        sto.STO_CODE stoCode,
        IFNULL(STO_SHORT_NAME,STO_NAME) stoName,
        sd.GSSD_PRO_ID proCode,
        pb.PRO_NAME proName,
        pb.PRO_COMMONNAME proCommonName,
        pb.PRO_SPECS specs,
        pb.PRO_UNIT unit,
        pb.PRO_FACTORY_NAME factoryName,
        IF(pb.PRO_IF_WHOLESALE ='1' ,'是','否') noWholesale,
        tc.TAX_CODE_VALUE proOutputTax,
        CASE
        WHEN pb.PRO_IF_MED = '1' THEN
        '是'
        WHEN pb.PRO_MED_ID IS NOT NULL THEN
        '是' ELSE '否'
        END ifMed,
        pb.PRO_MED_ID proMedId,
        concat(pc.PRO_BIG_CLASS_CODE,'-',pc.PRO_BIG_CLASS_NAME) bigClass,
        concat(pc.PRO_MID_CLASS_CODE,'-',pc.PRO_MID_CLASS_NAME) midClass,
        concat(pc.PRO_CLASS_CODE,'-',pc.PRO_CLASS_NAME) proClass,
        sd.GSSD_BATCH_NO batchNo,
        SUM(sd.GSSD_QTY) qty,
        SUM( sd.GSSD_PRC1 * ABS(sd.GSSD_QTY)) AS amountReceivable,
        SUM( sd.GSSD_AMT) AS amt,
        SUM(( sd.GSSD_PRC1 * ABS(sd.GSSD_QTY) )- sd.GSSD_AMT) deduction,
        SUM( sd.GSSD_AMT / ( 1 + sd.GSSD_MOV_TAX )) removeTaxSale,

        SUM(sd.GSSD_MOV_PRICES) movPrices,

        SUM( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX)) includeTaxSale,

        SUM( sd.GSSD_AMT - ( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX))) grossProfitMargin,

        ROUND((SUM(sd.GSSD_AMT - ( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX))) / SUM( sd.GSSD_AMT))*100,2)
        grossProfitRate,

        SUM( sd.GSSD_ADD_AMT) addMovPrices,

        SUM( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX) addIncludeTaxSale,

        SUM( sd.GSSD_AMT - ( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)) addGrossProfitMargin,

        ROUND((SUM(sd.GSSD_AMT - ( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)) / SUM( sd.GSSD_AMT))*100,2) addGrossProfitRate,
        pb.PRO_ZDY1 AS zdy1,
        pb.PRO_ZDY2 AS zdy2,
        pb.PRO_ZDY3 AS zdy3,
        pb.PRO_ZDY4 AS zdy4,
        pb.PRO_ZDY5 AS zdy5,
        pb.PRO_SLAE_CLASS AS saleClass,
        pb.PRO_SCLASS AS prosClass,
        case pb.PRO_TSSX when '1' then '防疫'
        else '' end AS proTssx,
        case pb.PRO_NO_PURCHASE
        when '1' then '是'
        when '0' then '否'
        end AS purchase,
        pb.PRO_POSITION proPosition,
        pb.PRO_BARCODE proBarcode,
        sto.STO_ATTRIBUTE stoAttribute,
        sto.STO_IF_DTP stoIfDtp,
        sto.STO_IF_MEDICALCARE stoIfMedical,
        sto.STO_TAX_CLASS stoTaxClass
        FROM
        (select a.* ,
        (a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX))) / ( a.GSSD_AMT )* 100
        from (
        SELECT gssd.CLIENT,
        gssd.GSSD_BR_ID,
        <if test="noBatch != null and noBatch == '1'.toString()">
            bc.GSBC_BATCH_NO,
        </if>
        gssd.GSSD_BATCH_NO,
        gssd.GSSD_MOV_TAX,
        gssd.GSSD_PRC1,
        gssd.GSSD_QTY,
        gssd.GSSD_AMT,
        gssd.GSSD_PRO_ID,
        (case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_MOV_PRICES
        else
        gssd.GSSD_MOV_PRICES* -1
        end
        ) GSSD_MOV_PRICES,
        case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_AMT
        else
        gssd.GSSD_ADD_AMT* -1
        end
        GSSD_ADD_AMT,
        case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_TAX
        else
        gssd.GSSD_ADD_TAX* -1
        end
        GSSD_ADD_TAX
        FROM GAIA_SD_SALE_H sh
        LEFT JOIN GAIA_SD_SALE_D gssd ON gssd.CLIENT = sh.CLIENT
        AND gssd.GSSD_BR_ID = sh.GSSH_BR_ID
        AND gssd.GSSD_BILL_NO = sh.GSSH_BILL_NO
        <if test="noBatch != null and noBatch == '1'.toString()">
            LEFT JOIN (
            SELECT
            GSBC_VOUCHER_ID,
            GSBC_BR_ID,
            GSBC_PRO_ID,
            GSBC_BATCH_NO,
            GSBC_SERIAL
            FROM
            GAIA_SD_BATCH_CHANGE
            WHERE
            CLIENT = #{client}
            <if test="siteArr != null and siteArr.length > 0">
                and GSBC_BR_ID in
                <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            GROUP BY
            CLIENT,
            GSBC_BR_ID,
            GSBC_VOUCHER_ID,
            GSBC_DATE,
            GSBC_SERIAL,
            GSBC_PRO_ID,
            GSBC_BATCH_NO
            )bc ON bc.GSBC_VOUCHER_ID = gssd.GSSD_BILL_NO AND bc.GSBC_BR_ID = gssd.GSSD_BR_ID AND bc.GSBC_PRO_ID =
            gssd.GSSD_PRO_ID AND bc.GSBC_SERIAL = gssd.GSSD_SERIAL
        </if>
        WHERE gssd.CLIENT =#{client}
        and sh.GSSH_HIDE_FLAG = '0'
        <if test="startDate != null and startDate != ''">
            and gssd.GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and gssd.GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="gsstBrId != null and gsstBrId != ''">
            and gssd.GSSD_BR_ID = #{gsstBrId}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and gssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="proArr != null and proArr.size > 0">
            and gssd.GSSD_PRO_ID in
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>

        )a
        <where>
            <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
                ROUND(( a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX ))) / ( a.GSSD_AMT )* 100, 2 ) &lt;=
                #{grossProfitRateMax} + 0
            </if>
            <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
                AND ROUND(( a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX ))) / ( a.GSSD_AMT )* 100, 2 ) >=
                #{grossProfitRateMin} + 0
            </if>
        </where>
        ) sd
        LEFT JOIN GAIA_STORE_DATA sto ON sto.CLIENT =sd.CLIENT AND sto.STO_CODE = sd. GSSD_BR_ID
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON sd.CLIENT = pb.CLIENT AND sd.GSSD_BR_ID = pb.PRO_SITE AND sd.GSSD_PRO_ID =
        pb.PRO_SELF_CODE
        LEFT JOIN GAIA_TAX_CODE tc ON tc.TAX_CODE = pb.PRO_OUTPUT_TAX
        LEFT JOIN ( SELECT * FROM(
        SELECT PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        UNION ALL
        SELECT PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        UNION ALL
        SELECT PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        ) proClass GROUP BY classId
        ) pc ON pc.classId = pb.PRO_CLASS
        <where>
            NOT EXISTS ( SELECT 1 FROM GAIA_SALES_CATALOG WHERE CLIENT = pb.CLIENT AND PRO_SELF_CODE = pb.PRO_SELF_CODE
            AND IS_DELETE = 0 AND `STATUS` IN ( 1, 2))
            <if test="classArrs != null and classArrs.size > 0">
                and pb.PRO_CLASS in
                <foreach collection="classArrs" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="factory != null and factory != ''">
                AND (pb.PRO_FACTORY_CODE LIKE '%${factory}%' OR pb.PRO_FACTORY_NAME LIKE '%${factory}%')
            </if>
            <if test="zdy1 != null and zdy1.length > 0">
                and pb.PRO_ZDY1 in
                <foreach collection="zdy1" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy2 != null and zdy2.length > 0">
                and pb.PRO_ZDY2 in
                <foreach collection="zdy2" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy3 != null and zdy3.length > 0">
                and pb.PRO_ZDY3 in
                <foreach collection="zdy3" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy4 != null and zdy4.length > 0">
                and pb.PRO_ZDY4 in
                <foreach collection="zdy4" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy5 != null and zdy5.length > 0">
                and pb.PRO_ZDY5 in
                <foreach collection="zdy5" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="saleClass != null and saleClass.length > 0">
                and pb.PRO_SLAE_CLASS in
                <foreach collection="saleClass" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="proPosition != null and proPosition.length > 0">
                and pb.PRO_POSITION in
                <foreach collection="proPosition" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="prosClass != null and prosClass.length > 0">
                and pb.PRO_SCLASS in
                <foreach collection="prosClass" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="purchase != null and purchase != ''">
                and pb.PRO_NO_PURCHASE = #{purchase}
            </if>
            <if test="proTssx != null and proTssx.size() > 0">
                AND pb.PRO_TSSX in
                <foreach collection="proTssx" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
        GROUP BY
        sd.GSSD_PRO_ID,
        sd.GSSD_BR_ID
        <if test="noBatch != null and noBatch == '1'.toString()">
            ,sd.GSBC_BATCH_NO
        </if>
        ORDER BY
        sd.GSSD_PRO_ID,
        sd.GSSD_BR_ID
        <if test="noBatch != null and noBatch == '1'.toString()">
            ,sd.GSBC_BATCH_NO
        </if>
        ) ssd
        left join
        (
        SELECT GSSD_PRO_ID,GSSD_BR_ID,SUM(qty) qty,SUM(amt) amt,sum(mov) mov,sum(grossAmt) grossAmt from (
        SELECT
        sale.CLIENT,
        sale.GSSD_BILL_NO,
        sale.GSSD_BR_ID,
        sale.GSSD_PRO_ID,
        sale.GSSD_QTY qty,
        sale.GSSD_AMT amt,
        sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX mov,
        sale.GSSD_AMT - ( sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX ) grossAmt
        FROM
        (
        SELECT
        ssd.CLIENT,
        ssd.GSSD_BR_ID,
        ssd.GSSD_BILL_NO,
        ssd.GSSD_PRO_ID,
        ssd.GSSD_DATE,
        ssd.GSSD_PRC1,
        ssd.GSSD_PRC2,
        ssd.GSSD_QTY,
        ssd.GSSD_AMT,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_AMT ELSE ssd.GSSD_ADD_AMT * - 1
        END AS GSSD_ADD_AMT,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_TAX ELSE ssd.GSSD_ADD_TAX * - 1
        END AS GSSD_ADD_TAX
        FROM GAIA_SD_SALE_D ssd
        left JOIN GAIA_SD_SALE_H ssh ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND
        ssd.GSSD_BR_ID = ssh.GSSH_BR_ID )
        left join (
        SELECT GSSPM_BR_ID, GSSPM_BILL_NO, GROUP_CONCAT( GSSPM_NAME SEPARATOR ';' ) payName
        FROM GAIA_SD_SALE_PAY_MSG
        WHERE CLIENT = #{client} AND GSSPM_TYPE = '1'
        GROUP BY GSSPM_BILL_NO
        ) spm on ssh.GSSH_BR_ID=spm.GSSPM_BR_ID and spm.GSSPM_BILL_NO = ssh.GSSH_BILL_NO
        WHERE
        ssh.CLIENT = #{client}
        AND ssh.GSSH_HIDE_FLAG = '0'
        AND ssd.GSSD_DATE &gt;= #{startDate}
        AND ssd.GSSD_DATE &lt;= #{endDate}
        and (spm.payName like CONCAT('%','京东到家','%') or spm.payName like CONCAT('%','美团','%') or spm.payName like
        CONCAT('%','饿了么','%'))
        ) sale ) temp GROUP BY GSSD_PRO_ID,GSSD_BR_ID
        ) onlineSale on ssd.proCode=onlineSale.GSSD_PRO_ID AND ssd.stoCode=onlineSale.GSSD_BR_ID
        LEFT JOIN GAIA_SD_PRODUCT_PRICE P ON ssd.ClIENT = P.CLIENT AND ssd.stoCode = P.GSPP_BR_ID AND ssd.proCode = P.GSPP_PRO_ID
        LEFT JOIN GAIA_MATERIAL_ASSESS A ON ssd.CLIENT = A.CLIENT AND ssd.stoCode = A.MAT_ASSESS_SITE AND ssd.proCode = A.MAT_PRO_CODE
        LEFT JOIN GAIA_SD_STOCK S ON ssd.CLIENT = S.CLIENT AND ssd.stoCode = S.GSS_BR_ID AND ssd.proCode = S.GSS_PRO_ID
        LEFT JOIN (SELECT a.* from (	SELECT GSAD_BR_ID,GSAD_PRO_ID,GSAD_DISCOUNT_PRICE
        FROM GAIA_SD_ACCEPT_D where CLIENT = #{client} and GSAD_DATE &lt;= #{endDate}
        ORDER BY GSAD_BR_ID,GSAD_PRO_ID,GSAD_DATE DESC,GSAD_VOUCHER_ID DESC LIMIT 1000000000
        ) a GROUP BY a.GSAD_BR_ID,a.GSAD_PRO_ID
        ) info ON info.GSAD_PRO_ID = ssd.proCode AND info.GSAD_BR_ID = ssd.stoCode
        LEFT JOIN (SELECT ssd.GSSD_BR_ID,DATEDIFF(MAX(GSSD_DATE),MIN(GSSD_DATE))+1 AS saleDay FROM GAIA_SD_SALE_D ssd
        left JOIN GAIA_SD_SALE_H ssh ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND ssd.GSSD_BR_ID = ssh.GSSH_BR_ID )
        WHERE ssh.CLIENT = #{client} AND ssh.GSSH_HIDE_FLAG = '0' AND ssd.GSSD_DATE &gt;= #{startDate} AND ssd.GSSD_DATE &lt;= #{endDate}
        GROUP BY ssd.GSSD_BR_ID
        ) SALEDAYS  ON SALEDAYS.GSSD_BR_ID=ssd.stoCode
        <where>
            <include refid="STORE_CATEGORY_CONDITION" />
        </where>
    </select>
    <!--    0829-->
    <select id="selectProductSaleByStoreTatol"
            resultType="com.gys.report.entity.StoreProductSaleStoreOutTotal">
        SELECT
        SUM(sd.GSSD_QTY) qty,
        SUM( sd.GSSD_PRC1 * ABS(sd.GSSD_QTY)) AS amountReceivable,
        SUM( sd.GSSD_AMT) AS amt,
        SUM(( sd.GSSD_PRC1 * ABS(sd.GSSD_QTY) )- sd.GSSD_AMT) deduction,
        SUM( sd.GSSD_AMT / ( 1 + sd.GSSD_MOV_TAX )) removeTaxSale,
        SUM(sd.GSSD_MOV_PRICES) movPrices,

        SUM( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX)) includeTaxSale,

        SUM( sd.GSSD_AMT - ( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX))) grossProfitMargin,

        concat(ROUND((SUM(sd.GSSD_AMT - ( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX))) / SUM( sd.GSSD_AMT))*100,2),'%')
        grossProfitRate,

        SUM( sd.GSSD_ADD_AMT) addMovPrices,

        SUM( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX) addIncludeTaxSale,

        SUM( sd.GSSD_AMT - ( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)) addGrossProfitMargin,

        concat(ROUND((SUM(sd.GSSD_AMT - ( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)) / SUM( sd.GSSD_AMT))*100,2),'%')
        addGrossProfitRate
        ,ROUND(SUM(sd.GSSD_AMT)/SUM(sd.GSSD_QTY),2) AS averagePrice
        FROM
        (select a.* ,
        (a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX))) / ( a.GSSD_AMT )* 100
        from (
        SELECT gssd.CLIENT,
        gssd.GSSD_BR_ID,
        gssd.GSSD_BILL_NO,
        gssd.GSSD_BATCH_NO,
        gssd.GSSD_MOV_TAX,
        gssd.GSSD_PRC1,
        gssd.GSSD_QTY,
        gssd.GSSD_AMT,
        gssd.GSSD_PRO_ID,
        (case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_MOV_PRICES
        else
        gssd.GSSD_MOV_PRICES* -1
        end
        ) GSSD_MOV_PRICES,
        case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_AMT
        else
        gssd.GSSD_ADD_AMT* -1
        end
        GSSD_ADD_AMT,
        case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_TAX
        else
        gssd.GSSD_ADD_TAX* -1
        end
        GSSD_ADD_TAX
        FROM GAIA_SD_SALE_H sh
        LEFT JOIN GAIA_SD_SALE_D gssd ON gssd.CLIENT = sh.CLIENT AND gssd.GSSD_BR_ID = sh.GSSH_BR_ID AND
        gssd.GSSD_BILL_NO = sh.GSSH_BILL_NO
        WHERE gssd.CLIENT =#{client}
        and sh.GSSH_HIDE_FLAG = '0'
        <if test="startDate != null and startDate != ''">
            and gssd.GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and gssd.GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="gsstBrId != null and gsstBrId != ''">
            and gssd.GSSD_BR_ID = #{gsstBrId}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and gssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="proArr != null and proArr.size > 0">
            and gssd.GSSD_PRO_ID in
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>

        )a
        <where>
            <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
                ROUND(( a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX ))) / ( a.GSSD_AMT )* 100, 2 ) &lt;=
                #{grossProfitRateMax} + 0
            </if>
            <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
                AND ROUND(( a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX ))) / ( a.GSSD_AMT )* 100, 2 ) >=
                #{grossProfitRateMin} + 0
            </if>
        </where>
        ) sd
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON sd.CLIENT = pb.CLIENT AND sd.GSSD_BR_ID = pb.PRO_SITE AND sd.GSSD_PRO_ID =
        pb.PRO_SELF_CODE
        LEFT JOIN ( SELECT * FROM(
        SELECT PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        UNION ALL
        SELECT PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        UNION ALL
        SELECT PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        ) proClass GROUP BY classId
        ) pc ON pc.classId = pb.PRO_CLASS
        <where>
            NOT EXISTS ( SELECT 1 FROM GAIA_SALES_CATALOG WHERE CLIENT = pb.CLIENT AND PRO_SELF_CODE = pb.PRO_SELF_CODE
            AND IS_DELETE = 0 AND `STATUS` IN ( 1, 2))
            <if test="classArrs != null and classArrs.size > 0">
                and pb.PRO_CLASS in
                <foreach collection="classArrs" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="factory != null and factory != ''">
                AND (pb.PRO_FACTORY_CODE LIKE '%${factory}%' OR pb.PRO_FACTORY_NAME LIKE '%${factory}%')
            </if>
            <if test="zdy1 != null and zdy1.length > 0">
                and pb.PRO_ZDY1 in
                <foreach collection="zdy1" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy2 != null and zdy2.length > 0">
                and pb.PRO_ZDY2 in
                <foreach collection="zdy2" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy3 != null and zdy3.length > 0">
                and pb.PRO_ZDY3 in
                <foreach collection="zdy3" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy4 != null and zdy4.length > 0">
                and pb.PRO_ZDY4 in
                <foreach collection="zdy4" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="zdy5 != null and zdy5.length > 0">
                and pb.PRO_ZDY5 in
                <foreach collection="zdy5" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="saleClass != null and saleClass.length > 0">
                and pb.PRO_SLAE_CLASS in
                <foreach collection="saleClass" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="proPosition != null and proPosition.length > 0">
                and pb.PRO_POSITION in
                <foreach collection="proPosition" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="prosClass != null and prosClass.length > 0">
                and pb.PRO_SCLASS in
                <foreach collection="prosClass" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="purchase != null and purchase != ''">
                and pb.PRO_NO_PURCHASE = #{purchase}
            </if>
            <if test="proTssx != null and proTssx.size() > 0">
                AND pb.PRO_TSSX in
                <foreach collection="proTssx" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
    </select>

    <sql id="STORE_CATEGORY_CONDITION_C" >
        <trim prefix="AND (" prefixOverrides="OR" suffix=")" >
            <if test="stoGssgTypes!=null and stoGssgTypes.size">
                EXISTS (
                SELECT 1 FROM GAIA_SD_STORES_GROUP gssg WHERE c.CLIENT = gssg.CLIENT AND c.STO_CODE = gssg.GSSG_BR_ID
                AND (gssg.GSSG_TYPE,gssg.GSSG_ID) IN
                <foreach collection="stoGssgTypes" item="stoGssgType" open="(" close=")" separator="," >
                    (#{stoGssgType.gssgType},#{stoGssgType.gssgId})
                </foreach>
                )
            </if>
            <if test="stoAttributes!=null and stoAttributes.size">
                OR c.STO_ATTRIBUTE IN
                <foreach collection="stoAttributes" item="stoAttribute" open="(" close=")" separator="," >
                    #{stoAttribute}
                </foreach>
            </if>
            <if test="stoAttribute==''" >
                OR c.STO_ATTRIBUTE IS NOT NULL AND c.STO_ATTRIBUTE != ''
            </if>
            <if test="stoIfMedicals!=null and stoIfMedicals.size">
                OR c.STO_IF_MEDICALCARE IN
                <foreach collection="stoIfMedicals" item="stoIfMedical" open="(" close=")" separator="," >
                    #{stoIfMedical}
                </foreach>
            </if>
            <if test="stoIfMedical==''" >
                OR c.STO_IF_MEDICALCARE IS NOT NULL AND c.STO_IF_MEDICALCARE != ''
            </if>
            <if test="stoTaxClasss!=null and stoTaxClasss.size">
                OR c.STO_TAX_CLASS IN
                <foreach collection="stoTaxClasss" item="stoTaxClass" open="(" close=")" separator="," >
                    #{stoTaxClass}
                </foreach>
            </if>
            <if test="stoTaxClass==''" >
                OR c.STO_TAX_CLASS IS NOT NULL AND c.STO_TAX_CLASS != ''
            </if>
            <if test="stoIfDtps!=null and stoIfDtps.size">
                OR c.STO_IF_DTP IN
                <foreach collection="stoIfDtps" item="stoIfDtp" open="(" close=")" separator="," >
                    #{stoIfDtp}
                </foreach>
            </if>
            <if test="stoIfDtp==''" >
                OR c.STO_IF_DTP IS NOT NULL AND c.STO_IF_DTP != ''
            </if>
        </trim>
    </sql>

    <sql id="STORE_CATEGORY_CONDITION">
        <trim prefix="AND (" prefixOverrides="OR" suffix=")" >
            <if test="stoGssgTypes!=null and stoGssgTypes.size">
                EXISTS (
                SELECT 1 FROM GAIA_SD_STORES_GROUP gssg WHERE ssd.CLIENT = gssg.CLIENT AND ssd.stoCode = gssg.GSSG_BR_ID
                AND (gssg.GSSG_TYPE,gssg.GSSG_ID) IN
                <foreach collection="stoGssgTypes" item="stoGssgType" open="(" close=")" separator="," >
                    (#{stoGssgType.gssgType},#{stoGssgType.gssgId})
                </foreach>
                )
            </if>
            <if test="stoAttributes!=null and stoAttributes.size">
                OR ssd.stoAttribute IN
                <foreach collection="stoAttributes" item="stoAttribute" open="(" close=")" separator="," >
                    #{stoAttribute}
                </foreach>
            </if>
            <if test="stoAttribute==''" >
                OR ssd.stoAttribute IS NOT NULL AND ssd.stoAttribute != ''
            </if>
            <if test="stoIfMedicals!=null and stoIfMedicals.size">
                OR ssd.stoIfMedical IN
                <foreach collection="stoIfMedicals" item="stoIfMedical" open="(" close=")" separator="," >
                    #{stoIfMedical}
                </foreach>
            </if>
            <if test="stoIfMedical==''" >
                OR ssd.stoIfMedical IS NOT NULL AND ssd.stoIfMedical != ''
            </if>
            <if test="stoTaxClasss!=null and stoTaxClasss.size">
                OR ssd.stoTaxClass IN
                <foreach collection="stoTaxClasss" item="stoTaxClass" open="(" close=")" separator="," >
                    #{stoTaxClass}
                </foreach>
            </if>
            <if test="stoTaxClass==''" >
                OR ssd.stoTaxClass IS NOT NULL AND ssd.stoTaxClass != ''
            </if>
            <if test="stoIfDtps!=null and stoIfDtps.size">
                OR ssd.stoIfDtp IN
                <foreach collection="stoIfDtps" item="stoIfDtp" open="(" close=")" separator="," >
                    #{stoIfDtp}
                </foreach>
            </if>
            <if test="stoIfDtp==''" >
                OR ssd.stoIfDtp IS NOT NULL AND ssd.stoIfDtp != ''
            </if>
        </trim>
    </sql>


    <select id="getSupByClient" resultType="com.gys.report.entity.SupplierInfoDTO">
        select
         BAT_SUPPLIER_CODE as supCode,
         BAT_SUPPLIER_NAME as supName
         from
         GAIA_BATCH_INFO
         where
         CLIENT = #{client}
         and BAT_SUPPLIER_CODE is not null and BAT_SUPPLIER_CODE != ''
         and BAT_SUPPLIER_NAME is not null and BAT_SUPPLIER_NAME != ''
         GROUP BY BAT_SUPPLIER_CODE,BAT_SUPPLIER_NAME
    </select>
    <select id="getProStatusList" resultType="java.lang.String">
        SELECT DISTINCT(GSSD_PRO_STATUS) FROM GAIA_SD_SALE_D WHERE CLIENT = #{client} ORDER BY CONVERT(GSSD_PRO_STATUS USING gbk);
    </select>


    <select id="getRecommendedSalesDetail"
            resultType="com.gys.entity.data.consignment.vo.StoreReportVo">
        select * from (
        SELECT
        sto.STO_CODE stoCode,
        IFNULL( sto.STO_SHORT_NAME, sto.STO_NAME ) stoName,
        sto1.STO_CODE gsshReplaceBrId,
        IFNULL( sto1.STO_SHORT_NAME, sto1.STO_NAME ) gsshReplaceBrName,
        DATE_FORMAT(CONCAT(sale.GSSD_DATE,sale.GSSH_TIME),'%Y-%m-%d %H:%i:%s') saleDate,
        sale.GSSD_BILL_NO billNo,
        pb.PRO_SELF_CODE selfCode,
        IFNULL( pb.PRO_NAME, pb.PRO_COMMONNAME ) proName,
        pb.PRO_COMMONNAME proCommonName,
        pb.PRO_DEPICT proDepict,
        pb.PRO_SPECS specs,
        pb.PRO_UNIT unit,
        pb.PRO_PLACE proPlace,
        pb.PRO_FACTORY_CODE factoryCode,
        pb.PRO_FACTORY_NAME factoryName,
        pb.PRO_MED_ID medProdctCode,
        pb.PRO_IF_MED ,
        pb.PRO_SLAE_CLASS AS proSaleClass,
        pb.PRO_SCLASS AS prosClass,
        case pb.PRO_NO_PURCHASE
        when '1' then '是'
        when '0' then '否'
        end AS purchase,
        pb.PRO_POSITION proPosition,
        CASE
        WHEN pb.PRO_IF_MED = '1' THEN
        '是'
        WHEN pb.PRO_MED_ID IS NOT NULL THEN
        '是' ELSE '否'
        END ifMed,
        sale.GSSD_PRC1 prcOne,
        sale.GSSD_QTY qty,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) AS amountReceivable,
        sale.GSSD_AMT amt,
        sale.GSSD_ADD_AMT addAmt,
        sale.GSSD_ADD_TAX addTxa,
        sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX includeTaxSale,
        sale.GSSD_AMT - (sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX) grossProfitMargin,
        (sale.GSSD_AMT - sale.GSSD_ADD_AMT - sale.GSSD_ADD_TAX)
        / sale.GSSD_AMT
        * 100 grossProfitRate,
        ABS(sale.GSSD_QTY) as jdQty,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) - sale.GSSD_AMT discount,
        (sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) - sale.GSSD_AMT )/( sale.GSSD_PRC1 * sale.GSSD_QTY )* 100 discountRate,
        sale.GSSD_SALER_ID salerId,
        ud1.USER_NAM salerName,
        sale.GSSD_DOCTOR_ID doctorId,
        ud2.USER_NAM doctorName,
        sale.GSSH_EMP empId,
        ud3.USER_NAM empName,
        sale.GSSH_HYK_NO hykNo,
        gsmb.GSMB_NAME hykName,
        gsmb.GSMB_MOBILE hykMobile,
        gsmb.GSMB_MEMBER_ID memberId,
        concat( pc.PRO_BIG_CLASS_CODE, '-', pc.PRO_BIG_CLASS_NAME ) bigClass,
        concat( pc.PRO_MID_CLASS_CODE, '-', pc.PRO_MID_CLASS_NAME ) midClass,
        concat( pc.PRO_CLASS_CODE, '-', pc.PRO_CLASS_NAME ) proClass,
        pb.PRO_CLASS,
        sale.GSSD_BATCH_NO batchNo,
        sale.GSSD_VALID_DATE validData,
        sale.expiryDay,
        sale.SUP_SELF_CODE  AS supplierCode,
        sale.SUP_NAME  AS supplierName,
        msg.payName,
        sale.GSSD_PRO_STATUS as saleStatus
        FROM
        (
        SELECT
        ssd.CLIENT,
        ssd.GSSD_BR_ID,
        ssd.GSSD_BILL_NO,
        ssd.GSSD_DATE,
        ssh.GSSH_TIME,
        ssd.GSSD_PRC1,
        ssd.GSSD_QTY,
        ssd.GSSD_AMT,
        ssd.GSSD_PRO_ID,
        ssd.GSSD_MOV_TAX,
        ssd.GSSD_SALER_ID,
        ssd.GSSD_DOCTOR_ID,
        ssh.GSSH_EMP,
        ssh.GSSH_REPLACE_BR_ID,
        ssh.GSSH_HYK_NO,
        ssd.GSSD_BATCH_NO,
        ssd.GSSD_BATCH,
        ssd.GSSD_VALID_DATE,
        ssd.GSSD_SERIAL,
        sb.SUP_SELF_CODE,
        sb.SUP_NAME,
        ssd.GSSD_PRO_STATUS,
        DATEDIFF(date_format( ssd.GSSD_VALID_DATE, '%Y-%m-%d' ),date_format( ssd.GSSD_DATE , '%Y-%m-%d' )) expiryDay,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_AMT ELSE ssd.GSSD_ADD_AMT * - 1
        END
        AS GSSD_ADD_AMT,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_TAX ELSE ssd.GSSD_ADD_TAX * - 1
        END
        AS GSSD_ADD_TAX
        FROM
        GAIA_SD_SALE_H ssh
        LEFT JOIN GAIA_SD_SALE_D ssd ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND
        ssd.GSSD_BR_ID = ssh.GSSH_BR_ID AND ssd.GSSD_DATE = ssh.GSSH_DATE)

        left join   GAIA_SD_BATCH_CHANGE sbc ON ssd.CLIENT = sbc.CLIENT
        AND ssd.GSSD_BR_ID = sbc.GSBC_BR_ID
        AND ssd.GSSD_BILL_NO = sbc.GSBC_VOUCHER_ID
        AND ssd.GSSD_SERIAL = sbc.GSBC_SERIAL
        AND ssd.GSSD_PRO_ID = sbc.GSBC_PRO_ID
        AND ssd.GSSD_BATCH_NO = sbc.GSBC_BATCH_NO
        LEFT JOIN GAIA_BATCH_INFO bi ON sbc.CLIENT = bi.CLIENT

        AND sbc.GSBC_BATCH_NO = bi.BAT_BATCH_NO
        AND sbc.GSBC_BATCH = bi.BAT_BATCH
        LEFT JOIN GAIA_SUPPLIER_BUSINESS sb ON bi.BAT_SUPPLIER_CODE = sb.SUP_SELF_CODE
        AND bi.CLIENT = sb.CLIENT
        AND bi.BAT_SITE_CODE = sb.SUP_SITE
        WHERE
        ssh.CLIENT = #{clientId}
        AND ssh.GSSH_HIDE_FLAG = '0'
        AND ssh.GSSH_BILL_TYPE = '5'
        <if test="brIds != null and brIds.size>0">
            AND ssh.GSSH_REPLACE_BR_ID in
            <foreach collection="brIds" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="siteArr != null and siteArr.size > 0">
            and ssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="saleIds != null and saleIds.size > 0">
            and ssh.GSSH_BR_ID  in
            <foreach collection="saleIds" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="queryUserId != null and queryUserId != ''">
            AND ssd.GSSD_SALER_ID = #{queryUserId}
        </if>
        <if test="empUserId != null and empUserId != ''">
            AND ssh.GSSH_EMP = #{empUserId}
        </if>

        <if test="queryDoctorId != null and queryDoctorId != ''">
            AND ssd.GSSD_DOCTOR_ID = #{queryDoctorId}
        </if>
        <if test="proArr != null and proArr.size > 0 ">
            and ssd.GSSD_PRO_ID IN
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="queryStartDate != null and queryStartDate != ''">
            and ssd.GSSD_DATE &gt;= #{queryStartDate}
        </if>
        <if test="queryEndDate != null and queryEndDate != ''">
            and ssd.GSSD_DATE &lt;= #{queryEndDate}
        </if>

        <if test="batchNo != null and batchNo != ''">
            AND ssd.GSSD_BATCH_NO = #{batchNo}
        </if>

        <if test="billNoArr != null and billNoArr.size > 0">
            AND ssd.GSSD_BILL_NO IN
            <foreach collection="billNoArr" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        GROUP BY ssd.CLIENT,ssd.GSSD_BR_ID,ssd.GSSD_BILL_NO, ssd.GSSD_SERIAL,ssd.GSSD_PRO_ID,ssd.GSSD_BATCH_NO
        ) sale
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON ( pb.CLIENT = sale.CLIENT AND pb.PRO_SITE = sale.GSSD_BR_ID AND
        pb.PRO_SELF_CODE = sale.GSSD_PRO_ID )
        LEFT JOIN GAIA_STORE_DATA sto ON ( sto.CLIENT = sale.CLIENT AND sto.STO_CODE = sale.GSSD_BR_ID )
        LEFT JOIN GAIA_STORE_DATA sto1 ON ( sto1.CLIENT = sale.CLIENT AND sto1.STO_CODE = sale.GSSH_REPLACE_BR_ID )
        LEFT JOIN GAIA_USER_DATA ud1 ON ( ud1.CLIENT = sale.CLIENT AND ud1.USER_ID = sale.GSSD_SALER_ID )
        LEFT JOIN GAIA_USER_DATA ud2 ON ( ud2.CLIENT = sale.CLIENT AND ud2.USER_ID = sale.GSSD_DOCTOR_ID )
        LEFT JOIN GAIA_USER_DATA ud3 ON ( ud3.CLIENT = sale.CLIENT AND ud3.USER_ID = sale.GSSH_EMP )
        LEFT JOIN GAIA_SD_MEMBER_CARD gsmc on gsmc.CLIENT=sale.client and gsmc.GSMBC_CARD_ID=sale.GSSH_HYK_NO
        LEFT JOIN GAIA_SD_MEMBER_BASIC gsmb on gsmb.CLIENT=gsmc.CLIENT and gsmb.GSMB_MEMBER_ID=gsmc.GSMBC_MEMBER_ID
        LEFT JOIN (
        SELECT
        *
        FROM
        (
        SELECT
        PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS
        )
        proClass
        GROUP BY
        classId
        ) pc ON pc.classId = pb.PRO_CLASS
        LEFT JOIN (
        SELECT
        GSSPM_BR_ID,
        GSSPM_BILL_NO,
        GROUP_CONCAT(GSSPM_NAME SEPARATOR ';') payName
        FROM
        GAIA_SD_SALE_PAY_MSG
        WHERE
        CLIENT = #{clientId}
        AND GSSPM_TYPE = '1'
        <if test="brIds != null and brIds.size>0">
            AND GSSPM_BR_ID in
            <foreach collection="brIds" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="siteArr != null and siteArr.size > 0">
            and GSSPM_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        GROUP BY
        GSSPM_BILL_NO
        ) msg ON msg.GSSPM_BR_ID = sale.GSSD_BR_ID AND msg.GSSPM_BILL_NO = sale.GSSD_BILL_NO
        WHERE 1=1
        AND not EXISTS (select 1 from GAIA_SALES_CATALOG where CLIENT = pb.CLIENT and PRO_SELF_CODE=pb.PRO_SELF_CODE and
        IS_DELETE = 0 and `STATUS` in (1,2))
        <if test="flag == 1">
            AND (pb.PRO_OUT != '1' OR pb.PRO_OUT is null)
        </if>
        <if test="zdy1 != null and zdy1.length > 0">
            and pb.PRO_ZDY1 in
            <foreach collection="zdy1" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy2 != null and zdy2.length > 0">
            and pb.PRO_ZDY2 in
            <foreach collection="zdy2" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy3 != null and zdy3.length > 0">
            and pb.PRO_ZDY3 in
            <foreach collection="zdy3" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy4 != null and zdy4.length > 0">
            and pb.PRO_ZDY4 in
            <foreach collection="zdy4" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy5 != null and zdy5.length > 0">
            and pb.PRO_ZDY5 in
            <foreach collection="zdy5" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="saleClass != null and saleClass.length > 0">
            and pb.PRO_SLAE_CLASS in
            <foreach collection="saleClass" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="proPosition != null and proPosition.length > 0">
            and pb.PRO_POSITION in
            <foreach collection="proPosition" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="specialType != null and specialType!=''">
            <choose>
                <when test="specialType == '0'.toString()">
                    and  (pb.PRO_CLASS like '1%' or pb.PRO_CLASS like '2%')
                </when>
                <when test="specialType == '1'.toString()">
                    and pb.PRO_CLASS like '5%'
                </when>
                <when test="specialType == '2'.toString()">
                    and pb.PRO_CONTROL_CLASS like '5%'
                </when>
                <when test="specialType == '3'.toString()">
                    and pb.PRO_CLASS like '4%'
                </when>
            </choose>
        </if>
        <if test="proSaleClass != null and proSaleClass != ''">
            AND pb.PRO_SLAE_CLASS = #{proSaleClass}
        </if>
        <if test="purchase != null and purchase != ''">
            and pb.PRO_NO_PURCHASE = #{purchase}
        </if>
        <if test="payName != null and payName.length > 0">
            and
            <foreach collection="payName" item="item" index="index" open="(" close=")" separator="OR">
                msg.payName like CONCAT('%',#{item},'%')
            </foreach>
        </if>
        ) tab
        where 1=1
        <if test="memberName != null and memberName != ''">
            AND (tab.hykName LIKE '%${memberName}%' OR tab.hykMobile LIKE '%${memberName}%' OR tab.hykNo LIKE
            '%${memberName}%')
        </if>
        <if test="supplierCode != null and supplierCode != ''">
            AND tab.supplierCode = #{supplierCode}
        </if>
        <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
            AND replace(tab.grossProfitRate,'%','') &lt;= #{grossProfitRateMax} +0
        </if>
        <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
            AND replace(tab.grossProfitRate,'%','') &gt;= #{grossProfitRateMin} +0
        </if>
        <if test="classArrs != null and classArrs.size > 0">
            and tab.PRO_CLASS in
            <foreach collection="classArrs" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="expiryDay != null and expiryDay !=''">
            and tab.expiryDay &lt;=#{expiryDay}
        </if>
        <if test="factory != null and factory != ''">
            AND (tab.factoryCode LIKE '%${factory}%' OR tab.factoryName LIKE '%${factory}%')
        </if>
       <!-- <if test="medProdctStatus != null and medProdctStatus != ''">
            <if test="medProdctStatus == '1'.toString() ">
                AND ( tab.PRO_IF_MED = #{medProdctStatus} OR ifnull(tab.medProdctCode,'') != '')
            </if>
            <if test="medProdctStatus == '0'.toString() ">
                AND (tab.PRO_IF_MED = #{medProdctStatus} OR (ifnull(tab.medProdctCode,'') = '' AND ifnull(tab.PRO_IF_MED
                ,'') = ''))
            </if>
        </if>-->
        ORDER BY
        saleDate desc,
        stoCode,
        selfCode
    </select>

    <select id="getUnRecommendedSalesDetail"
            resultType="com.gys.entity.data.consignment.vo.StoreReportVo">
        select * from (
        SELECT
        sto.STO_CODE stoCode,
        IFNULL( sto.STO_SHORT_NAME, sto.STO_NAME ) stoName,
        sto1.STO_CODE gsshReplaceBrId,
        IFNULL( sto1.STO_SHORT_NAME, sto1.STO_NAME ) gsshReplaceBrName,
        DATE_FORMAT(CONCAT(sale.GSSD_DATE,sale.GSSH_TIME),'%Y-%m-%d %H:%i:%s') saleDate,
        sale.GSSD_BILL_NO billNo,
        pb.PRO_SELF_CODE selfCode,
        IFNULL( pb.PRO_NAME, pb.PRO_COMMONNAME ) proName,
        pb.PRO_COMMONNAME proCommonName,
        pb.PRO_DEPICT proDepict,
        pb.PRO_SPECS specs,
        pb.PRO_UNIT unit,
        pb.PRO_FACTORY_CODE factoryCode,
        pb.PRO_FACTORY_NAME factoryName,
        pb.PRO_MED_ID medProdctCode,
        pb.PRO_PLACE proPlace,
        pb.PRO_IF_MED,
        pb.PRO_SLAE_CLASS AS proSaleClass,
        pb.PRO_SCLASS AS prosClass,
        case pb.PRO_NO_PURCHASE
        when '1' then '是'
        when '0' then '否'
        end AS purchase,
        pb.PRO_POSITION proPosition,
        CASE
        WHEN pb.PRO_IF_MED = '1' THEN
        '是'
        WHEN pb.PRO_MED_ID IS NOT NULL THEN
        '是' ELSE '否'
        END ifMed,
        sale.GSSD_PRC1 prcOne,
        sale.GSSD_QTY qty,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) AS amountReceivable,
        sale.GSSD_AMT amt,
        sale.GSSD_ADD_AMT addAmt,
        sale.GSSD_ADD_TAX addTxa,
        sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX includeTaxSale,
        sale.GSSD_AMT - (sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX) grossProfitMargin,
        (sale.GSSD_AMT - sale.GSSD_ADD_AMT - sale.GSSD_ADD_TAX)
        / sale.GSSD_AMT
        * 100 grossProfitRate,
        ABS(sale.GSSD_QTY) as jdQty,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) - sale.GSSD_AMT discount,
        (sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) - sale.GSSD_AMT )/( sale.GSSD_PRC1 * sale.GSSD_QTY )* 100 discountRate,
        sale.GSSD_SALER_ID salerId,
        ud1.USER_NAM salerName,
        sale.GSSD_DOCTOR_ID doctorId,
        ud2.USER_NAM doctorName,
        sale.GSSH_EMP empId,
        ud3.USER_NAM empName,
        sale.GSSH_HYK_NO hykNo,
        gsmb.GSMB_NAME hykName,
        gsmb.GSMB_MOBILE hykMobile,
        gsmb.GSMB_MEMBER_ID memberId,
        concat( pc.PRO_BIG_CLASS_CODE, '-', pc.PRO_BIG_CLASS_NAME ) bigClass,
        concat( pc.PRO_MID_CLASS_CODE, '-', pc.PRO_MID_CLASS_NAME ) midClass,
        concat( pc.PRO_CLASS_CODE, '-', pc.PRO_CLASS_NAME ) proClass,
        pb.PRO_CLASS,
        sale.GSSD_BATCH_NO batchNo,
        sale.GSSD_VALID_DATE validData,
        sale.expiryDay,
        sale.SUP_SELF_CODE  AS supplierCode,
        sale.SUP_NAME  AS supplierName,
        msg.payName,
        sale.GSSD_PRO_STATUS as saleStatus
        FROM
        (
        SELECT
        ssd.CLIENT,
        ssd.GSSD_BR_ID,
        ssd.GSSD_BILL_NO,
        ssd.GSSD_DATE,
        ssh.GSSH_TIME,
        ssd.GSSD_PRC1,
        ssd.GSSD_QTY,
        ssd.GSSD_AMT,
        ssd.GSSD_PRO_ID,
        ssd.GSSD_MOV_TAX,
        ssd.GSSD_SALER_ID,
        ssd.GSSD_DOCTOR_ID,
        ssh.GSSH_EMP,
        ssh.GSSH_REPLACE_BR_ID,
        ssh.GSSH_HYK_NO,
        ssd.GSSD_BATCH_NO,
        ssd.GSSD_BATCH,
        ssd.GSSD_VALID_DATE,
        ssd.GSSD_SERIAL,
        sb.SUP_SELF_CODE,
        sb.SUP_NAME,
        ssd.GSSD_PRO_STATUS,
        DATEDIFF(date_format( ssd.GSSD_VALID_DATE, '%Y-%m-%d' ),date_format( ssd.GSSD_DATE , '%Y-%m-%d' )) expiryDay,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_AMT ELSE ssd.GSSD_ADD_AMT * - 1
        END
        AS GSSD_ADD_AMT,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_TAX ELSE ssd.GSSD_ADD_TAX * - 1
        END
        AS GSSD_ADD_TAX
        FROM
        GAIA_SD_SALE_HAND_H ssh
        LEFT JOIN GAIA_SD_SALE_HAND_D ssd ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND
        ssd.GSSD_BR_ID = ssh.GSSH_BR_ID AND ssd.GSSD_DATE = ssh.GSSH_DATE)

        left join   GAIA_SD_BATCH_CHANGE sbc ON ssd.CLIENT = sbc.CLIENT
        AND ssd.GSSD_BR_ID = sbc.GSBC_BR_ID
        AND ssd.GSSD_BILL_NO = sbc.GSBC_VOUCHER_ID
        AND ssd.GSSD_SERIAL = sbc.GSBC_SERIAL
        AND ssd.GSSD_PRO_ID = sbc.GSBC_PRO_ID
        AND ssd.GSSD_BATCH_NO = sbc.GSBC_BATCH_NO
        LEFT JOIN GAIA_BATCH_INFO bi ON sbc.CLIENT = bi.CLIENT

        AND sbc.GSBC_BATCH_NO = bi.BAT_BATCH_NO
        AND sbc.GSBC_BATCH = bi.BAT_BATCH
        LEFT JOIN GAIA_SUPPLIER_BUSINESS sb ON bi.BAT_SUPPLIER_CODE = sb.SUP_SELF_CODE
        AND bi.CLIENT = sb.CLIENT
        AND bi.BAT_SITE_CODE = sb.SUP_SITE
        WHERE
        ssh.CLIENT = #{clientId}
        AND ssh.GSSH_HIDE_FLAG = '6'
        AND ssh.GSSH_BILL_TYPE = '5'
        <if test="brIds != null and brIds.size > 0">
            AND ssh.GSSH_REPLACE_BR_ID in
            <foreach collection="brIds" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and ssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="saleIds != null and saleIds.size > 0">
            and ssh.GSSH_BR_ID in
            <foreach collection="saleIds" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="queryUserId != null and queryUserId != ''">
            AND ssd.GSSD_SALER_ID = #{queryUserId}
        </if>
        <if test="empUserId != null and empUserId != ''">
            AND ssh.GSSH_EMP = #{empUserId}
        </if>

        <if test="queryDoctorId != null and queryDoctorId != ''">
            AND ssd.GSSD_DOCTOR_ID = #{queryDoctorId}
        </if>
        <if test="proArr != null and proArr.size > 0 ">
            and ssd.GSSD_PRO_ID IN
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="queryStartDate != null and queryStartDate != ''">
            and ssd.GSSD_DATE &gt;= #{queryStartDate}
        </if>
        <if test="queryEndDate != null and queryEndDate != ''">
            and ssd.GSSD_DATE &lt;= #{queryEndDate}
        </if>

        <if test="batchNo != null and batchNo != ''">
            AND ssd.GSSD_BATCH_NO = #{batchNo}
        </if>

        <if test="billNoArr != null and billNoArr.size > 0">
            AND ssd.GSSD_BILL_NO IN
            <foreach collection="billNoArr" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        GROUP BY ssd.CLIENT,ssd.GSSD_BR_ID,ssd.GSSD_BILL_NO, ssd.GSSD_SERIAL,ssd.GSSD_PRO_ID,ssd.GSSD_BATCH_NO
        ) sale
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON ( pb.CLIENT = sale.CLIENT AND pb.PRO_SITE = sale.GSSD_BR_ID AND
        pb.PRO_SELF_CODE = sale.GSSD_PRO_ID )
        LEFT JOIN GAIA_STORE_DATA sto ON ( sto.CLIENT = sale.CLIENT AND sto.STO_CODE = sale.GSSD_BR_ID )
        LEFT JOIN GAIA_STORE_DATA sto1 ON ( sto1.CLIENT = sale.CLIENT AND sto1.STO_CODE = sale.GSSH_REPLACE_BR_ID )
        LEFT JOIN GAIA_USER_DATA ud1 ON ( ud1.CLIENT = sale.CLIENT AND ud1.USER_ID = sale.GSSD_SALER_ID )
        LEFT JOIN GAIA_USER_DATA ud2 ON ( ud2.CLIENT = sale.CLIENT AND ud2.USER_ID = sale.GSSD_DOCTOR_ID )
        LEFT JOIN GAIA_USER_DATA ud3 ON ( ud3.CLIENT = sale.CLIENT AND ud3.USER_ID = sale.GSSH_EMP )
        LEFT JOIN GAIA_SD_MEMBER_CARD gsmc on gsmc.CLIENT=sale.client and gsmc.GSMBC_CARD_ID=sale.GSSH_HYK_NO
        LEFT JOIN GAIA_SD_MEMBER_BASIC gsmb on gsmb.CLIENT=gsmc.CLIENT and gsmb.GSMB_MEMBER_ID=gsmc.GSMBC_MEMBER_ID
        LEFT JOIN (
        SELECT
        *
        FROM
        (
        SELECT
        PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS
        )
        proClass
        GROUP BY
        classId
        ) pc ON pc.classId = pb.PRO_CLASS
        LEFT JOIN (
        SELECT
        GSSPM_BR_ID,
        GSSPM_BILL_NO,
        GROUP_CONCAT(GSSPM_NAME SEPARATOR ';') payName
        FROM
        GAIA_SD_SALE_PAY_MSG
        WHERE
        CLIENT = #{clientId}
        AND GSSPM_TYPE = '1'
        <if test="brIds != null and brIds.size > 0">
            AND GSSPM_BR_ID in
            <foreach collection="brIds" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="siteArr != null and siteArr.size > 0">
            and GSSPM_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        GROUP BY
        GSSPM_BILL_NO
        ) msg ON msg.GSSPM_BR_ID = sale.GSSD_BR_ID AND msg.GSSPM_BILL_NO = sale.GSSD_BILL_NO
        WHERE 1=1
        AND not EXISTS (select 1 from GAIA_SALES_CATALOG where CLIENT = pb.CLIENT and PRO_SELF_CODE=pb.PRO_SELF_CODE and
        IS_DELETE = 0 and `STATUS` in (1,2))
        <if test="flag == 1">
            AND (pb.PRO_OUT != '1' OR pb.PRO_OUT is null)
        </if>
        <if test="zdy1 != null and zdy1.length > 0">
            and pb.PRO_ZDY1 in
            <foreach collection="zdy1" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy2 != null and zdy2.length > 0">
            and pb.PRO_ZDY2 in
            <foreach collection="zdy2" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy3 != null and zdy3.length > 0">
            and pb.PRO_ZDY3 in
            <foreach collection="zdy3" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy4 != null and zdy4.length > 0">
            and pb.PRO_ZDY4 in
            <foreach collection="zdy4" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy5 != null and zdy5.length > 0">
            and pb.PRO_ZDY5 in
            <foreach collection="zdy5" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="saleClass != null and saleClass.length > 0">
            and pb.PRO_SLAE_CLASS in
            <foreach collection="saleClass" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="proPosition != null and proPosition.length > 0">
            and pb.PRO_POSITION in
            <foreach collection="proPosition" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="specialType != null and specialType!=''">
            <choose>
                <when test="specialType == '0'.toString()">
                    and  (pb.PRO_CLASS like '1%' or pb.PRO_CLASS like '2%')
                </when>
                <when test="specialType == '1'.toString()">
                    and pb.PRO_CLASS like '5%'
                </when>
                <when test="specialType == '2'.toString()">
                    and pb.PRO_CONTROL_CLASS like '5%'
                </when>
                <when test="specialType == '3'.toString()">
                    and pb.PRO_CLASS like '4%'
                </when>
            </choose>
        </if>
        <if test="proSaleClass != null and proSaleClass != ''">
            AND pb.PRO_SLAE_CLASS = #{proSaleClass}
        </if>
        <if test="purchase != null and purchase != ''">
            and pb.PRO_NO_PURCHASE = #{purchase}
        </if>
        <if test="payName != null and payName.length > 0">
            and
            <foreach collection="payName" item="item" index="index" open="(" close=")" separator="OR">
                msg.payName like CONCAT('%',#{item},'%')
            </foreach>
        </if>
        ) tab
        where 1=1
        <if test="memberName != null and memberName != ''">
            AND (tab.hykName LIKE '%${memberName}%' OR tab.hykMobile LIKE '%${memberName}%' OR tab.hykNo LIKE
            '%${memberName}%')
        </if>
        <if test="supplierCode != null and supplierCode != ''">
            AND tab.supplierCode = #{supplierCode}
        </if>
        <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
            AND replace(tab.grossProfitRate,'%','') &lt;= #{grossProfitRateMax} +0
        </if>
        <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
            AND replace(tab.grossProfitRate,'%','') &gt;= #{grossProfitRateMin} +0
        </if>
        <if test="classArrs != null and classArrs.size > 0">
            and tab.PRO_CLASS in
            <foreach collection="classArrs" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="expiryDay != null and expiryDay !=''">
            and tab.expiryDay &lt;=#{expiryDay}
        </if>
        <if test="factory != null and factory != ''">
            AND (tab.factoryCode LIKE '%${factory}%' OR tab.factoryName LIKE '%${factory}%')
        </if>
        <!--<if test="medProdctStatus != null and medProdctStatus != ''">
            <if test="medProdctStatus == '1'.toString() ">
                AND ( tab.PRO_IF_MED = #{medProdctStatus} OR ifnull(tab.medProdctCode,'') != '')
            </if>
            <if test="medProdctStatus == '0'.toString() ">
                AND (tab.PRO_IF_MED = #{medProdctStatus} OR (ifnull(tab.medProdctCode,'') = '' AND ifnull(tab.PRO_IF_MED
                ,'') = ''))
            </if>
        </if>-->
        ORDER BY
        saleDate desc ,
        stoCode,
        selfCode
    </select>

    <select id="getRecommendedSalesDetailTotal"
            resultType="com.gys.entity.data.consignment.vo.StoreReportTotalVo">
        select
        SUM(qty) qty,
        ROUND(SUM(amountReceivable),6) amountReceivable,
        ROUND(SUM(amt),6) amt,
        SUM(includeTaxSale) includeTaxSale,
        SUM(grossProfitMargin) grossProfitMargin,
        CONCAT(ROUND(SUM(grossProfitMargin)/ SUM(amt)*100,2),'%') grossProfitRate,
        ROUND(SUM(discount),6) discount,
        CONCAT(ROUND(SUM(discount)/SUM(amountReceivable)*100,2),'%') discountRate
        from (
        SELECT
        sto.STO_CODE stoCode,
        IFNULL( sto.STO_SHORT_NAME, sto.STO_NAME ) stoName,
        sale.GSSD_DATE saleDate,
        sale.GSSD_BILL_NO billNo,
        pb.PRO_SELF_CODE selfCode,
        IFNULL( pb.PRO_NAME, pb.PRO_COMMONNAME ) proName,
        pb.PRO_COMMONNAME proCommonName,
        pb.PRO_SPECS specs,
        pb.PRO_UNIT unit,
        pb.PRO_FACTORY_CODE factoryCode,
        pb.PRO_FACTORY_NAME factoryName,
        pb.PRO_MED_ID medProdctCode,
        pb.PRO_IF_MED,
        CASE
        WHEN pb.PRO_IF_MED = '1' THEN
        '是'
        WHEN pb.PRO_MED_ID IS NOT NULL THEN
        '是' ELSE '否'
        END ifMed,
        sale.GSSD_QTY qty,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) AS amountReceivable,
        sale.GSSD_AMT amt,
        sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX includeTaxSale,
        sale.GSSD_AMT - (sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX) grossProfitMargin,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) - sale.GSSD_AMT discount,
        sale.GSSD_SALER_ID salerId,
        ud1.USER_NAM salerName,
        sale.GSSD_DOCTOR_ID doctorId,
        ud2.USER_NAM doctorName,
        sale.GSSH_HYK_NO hykNo,
        gsmb.GSMB_NAME hykName,
        gsmb.GSMB_MOBILE hykMobile,
        gsmb.GSMB_MEMBER_ID memberId,
        concat( pc.PRO_BIG_CLASS_CODE, '-', pc.PRO_BIG_CLASS_NAME ) bigClass,
        concat( pc.PRO_MID_CLASS_CODE, '-', pc.PRO_MID_CLASS_NAME ) midClass,
        concat( pc.PRO_CLASS_CODE, '-', pc.PRO_CLASS_NAME ) proClass,
        pb.PRO_CLASS,
        sale.GSSD_BATCH_NO batchNo,
        sale.GSSD_VALID_DATE validData,
        sale.expiryDay,
        ifnull(bi.BAT_SUPPLIER_CODE,bi2.BAT_SUPPLIER_CODE) AS supplierCode,
        ifnull(bi.BAT_SUPPLIER_NAME,bi2.BAT_SUPPLIER_NAME) AS supplierName
        FROM
        (
        SELECT
        ssd.CLIENT,
        ssd.GSSD_BR_ID,
        ssd.GSSD_BILL_NO,
        ssd.GSSD_DATE,
        ssd.GSSD_PRC1,
        ssd.GSSD_QTY,
        ssd.GSSD_AMT,
        ssd.GSSD_PRO_ID,
        ssd.GSSD_MOV_TAX,
        ssd.GSSD_SALER_ID,
        ssd.GSSD_DOCTOR_ID,
        ssh.GSSH_HYK_NO,
        ssd.GSSD_BATCH_NO,
        ssh.GSSH_REPLACE_BR_ID,
        ssd.GSSD_BATCH,
        ssd.GSSD_VALID_DATE,
        DATEDIFF(date_format( ssd.GSSD_VALID_DATE, '%Y-%m-%d' ),date_format( ssd.GSSD_DATE, '%Y-%m-%d' )) expiryDay,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_AMT ELSE ssd.GSSD_ADD_AMT * - 1
        END
        AS GSSD_ADD_AMT,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_TAX ELSE ssd.GSSD_ADD_TAX* - 1
        END
        AS GSSD_ADD_TAX
        FROM
        GAIA_SD_SALE_H ssh
        LEFT JOIN GAIA_SD_SALE_D ssd ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND
        ssd.GSSD_BR_ID = ssh.GSSH_BR_ID )
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON ( ssh.CLIENT = pb.CLIENT AND pb.PRO_SITE = ssd.GSSD_BR_ID AND pb.
        PRO_SELF_CODE = ssd.GSSD_PRO_ID )
        WHERE
        ssh.CLIENT = #{clientId}
        AND ssh.GSSH_HIDE_FLAG = '0'
        AND ssh.GSSH_BILL_TYPE = '5'
        <if test="brIds != null and brIds.size > 0">
            AND ssh.GSSH_REPLACE_BR_ID in
            <foreach collection="brIds" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="siteArr != null and siteArr. size> 0">
            and ssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="saleIds != null and saleIds.size > 0">
            and ssh.GSSH_BR_ID  in
            <foreach collection="saleIds" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="queryUserId != null and queryUserId != ''">
            AND ssd.GSSD_SALER_ID = #{queryUserId}
        </if>
        <if test="empUserId != null and empUserId != ''">
            AND ssh.GSSH_EMP = #{empUserId}
        </if>
        <if test="queryDoctorId != null and queryDoctorId != ''">
            AND ssd.GSSD_DOCTOR_ID = #{queryDoctorId}
        </if>
        <if test="proArr != null and proArr.size > 0 ">
            and ssd.GSSD_PRO_ID IN
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="queryStartDate != null and queryStartDate != ''">
            and ssd.GSSD_DATE &gt;= #{queryStartDate}
        </if>
        <if test="queryEndDate != null and queryEndDate != ''">
            and ssd.GSSD_DATE &lt;= #{queryEndDate}
        </if>

        <if test="batchNo != null and batchNo != ''">
            AND ssd.GSSD_BATCH_NO = #{batchNo}
        </if>

        <if test="billNoArr != null and billNoArr.size > 0">
            AND ssd.GSSD_BILL_NO IN
            <foreach collection="billNoArr" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        ) sale
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON ( pb.CLIENT = sale.CLIENT AND pb.PRO_SITE = sale.GSSD_BR_ID AND pb.
        PRO_SELF_CODE = sale.GSSD_PRO_ID )
        LEFT
        JOIN GAIA_STORE_DATA sto ON ( sto.CLIENT = sale.CLIENT AND sto.STO_CODE = sale.GSSD_BR_ID )
        LEFT JOIN GAIA_USER_DATA ud1 ON ( ud1.CLIENT = sale.CLIENT AND ud1.USER_ID = sale.GSSD_SALER_ID )
        LEFT JOIN GAIA_USER_DATA ud2 ON ( ud2.CLIENT = sale.CLIENT AND ud2.USER_ID = sale.GSSD_DOCTOR_ID )
        LEFT JOIN GAIA_SD_MEMBER_CARD gsmc on gsmc.CLIENT=sale.client and gsmc.GSMBC_CARD_ID=sale.GSSH_HYK_NO
        LEFT JOIN GAIA_SD_MEMBER_BASIC gsmb on gsmb.CLIENT=gsmc.CLIENT and gsmb.GSMB_MEMBER_ID=gsmc.GSMBC_MEMBER_ID
        LEFT JOIN GAIA_BATCH_INFO bi ON (sale.CLIENT = bi.CLIENT AND sale.GSSD_BR_ID = bi.BAT_SITE_CODE
        AND sale.GSSD_PRO_ID = bi.BAT_PRO_CODE AND sale.GSSD_BATCH = bi.BAT_BATCH)
        LEFT JOIN GAIA_BATCH_INFO bi2 ON (sale.CLIENT = bi2.CLIENT AND sto.STO_DC_CODE = bi2.BAT_SITE_CODE
        AND sale.GSSD_PRO_ID = bi2.BAT_PRO_CODE AND sale.GSSD_BATCH = bi2.BAT_BATCH)
        LEFT JOIN (
        SELECT
        *
        FROM
        (
        SELECT
        PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS
        )
        proClass
        GROUP BY
        classId
        ) pc ON pc.classId = pb.PRO_CLASS
        LEFT JOIN (
        SELECT
        GSSPM_BR_ID,
        GSSPM_BILL_NO,
        GROUP_CONCAT(GSSPM_NAME SEPARATOR ';') payName
        FROM
        GAIA_SD_SALE_PAY_MSG
        WHERE
        CLIENT = #{clientId}
        AND GSSPM_TYPE = '1'
        <if test="brIds != null and brIds.size >0">
            AND GSSPM_BR_ID in
            <foreach collection="brIds" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="siteArr != null and siteArr.size > 0">
            and GSSPM_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        GROUP BY
        GSSPM_BILL_NO
        ) msg ON msg.GSSPM_BR_ID = sale.GSSD_BR_ID AND msg.GSSPM_BILL_NO = sale.GSSD_BILL_NO
        WHERE 1=1
        AND not EXISTS (select 1 from GAIA_SALES_CATALOG where CLIENT = pb.CLIENT and PRO_SELF_CODE=pb.PRO_SELF_CODE and
        IS_DELETE = 0 and `STATUS` in (1,2))
        <if test="specialType != null and specialType!=''">
            <choose>
                <when test="specialType == '0'.toString()">
                    and  (pb.PRO_CLASS like '1%' or pb.PRO_CLASS like '2%')
                </when>
                <when test="specialType == '1'.toString()">
                    and pb.PRO_CLASS like '5%'
                </when>
                <when test="specialType == '2'.toString()">
                    and pb.PRO_CONTROL_CLASS like '3%'
                </when>
                <when test="specialType == '3'.toString()">
                    and pb.PRO_CLASS like '4%'
                </when>
            </choose>
        </if>
        <if test="flag == 1">
            AND (pb.PRO_OUT != '1' OR pb.PRO_OUT is null)
        </if>
        <if test="zdy1 != null and zdy1.length > 0">
            and pb.PRO_ZDY1 in
            <foreach collection="zdy1" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy2 != null and zdy2.length > 0">
            and pb.PRO_ZDY2 in
            <foreach collection="zdy2" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy3 != null and zdy3.length > 0">
            and pb.PRO_ZDY3 in
            <foreach collection="zdy3" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy4 != null and zdy4.length > 0">
            and pb.PRO_ZDY4 in
            <foreach collection="zdy4" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy5 != null and zdy5.length > 0">
            and pb.PRO_ZDY5 in
            <foreach collection="zdy5" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="saleClass != null and saleClass.length > 0">
            and pb.PRO_SLAE_CLASS in
            <foreach collection="saleClass" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="proPosition != null and proPosition.length > 0">
            and pb.PRO_POSITION in
            <foreach collection="proPosition" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="prosClass != null and prosClass.length > 0">
            and pb.PRO_SCLASS in
            <foreach collection="prosClass" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="purchase != null and purchase != ''">
            and pb.PRO_NO_PURCHASE = #{purchase}
        </if>
        <if test="payName != null and payName.length > 0">
            and
            <foreach collection="payName" item="item" index="index" open="(" close=")" separator="OR">
                msg.payName like CONCAT('%',#{item},'%')
            </foreach>
        </if>
        ) tab
        where 1=1
        <if test="memberName != null and memberName != ''">
            AND (tab.hykName LIKE '%${memberName}%' OR tab.hykMobile LIKE '%${memberName}%' OR tab.hykNo LIKE
            '%${memberName}%')
        </if>
        <if test="supplierCode != null and supplierCode != ''">
            AND tab.supplierCode = #{supplierCode}
        </if>
        <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
            AND replace(grossProfitMargin / amt * 100,'%','') &lt;= #{grossProfitRateMax} +0
        </if>
        <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
            AND replace(grossProfitMargin / amt * 100,'%','') &gt;= #{grossProfitRateMin} +0
        </if>
        <if test="classArrs != null and classArrs.size > 0">
            and tab.PRO_CLASS in
            <foreach collection="classArrs" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="expiryDay != null and expiryDay !=''">
            and tab.expiryDay &lt;=#{expiryDay}
        </if>
        <if test="factory != null and factory != ''">
            AND (tab.factoryCode LIKE '%${factory}%' OR tab.factoryName LIKE '%${factory}%')
        </if>
       <!-- <if test="medProdctStatus != null and medProdctStatus != ''">
            <if test="medProdctStatus == '1'.toString() ">
                AND ( tab.PRO_IF_MED = #{medProdctStatus} OR ifnull(tab.medProdctCode,'') != '')
            </if>
            <if test="medProdctStatus == '0'.toString() ">
                AND (tab.PRO_IF_MED = #{medProdctStatus} OR (ifnull(tab.medProdctCode,'') = '' AND ifnull(tab.PRO_IF_MED
                ,'') = ''))
            </if>
        </if>-->
    </select>

    <select id="getUnRecommendedSalesDetailTotal"
            resultType="com.gys.entity.data.consignment.vo.StoreReportTotalVo">
        select
        SUM(qty) qty,
        ROUND(SUM(amountReceivable),6) amountReceivable,
        ROUND(SUM(amt),6) amt,
        SUM(includeTaxSale) includeTaxSale,
        SUM(grossProfitMargin) grossProfitMargin,
        CONCAT(ROUND(SUM(grossProfitMargin)/ SUM(amt)*100,2),'%') grossProfitRate,
        ROUND(SUM(discount),6) discount,
        CONCAT(ROUND(SUM(discount)/SUM(amountReceivable)*100,2),'%') discountRate
        from (
        SELECT
        sto.STO_CODE stoCode,
        IFNULL( sto.STO_SHORT_NAME, sto.STO_NAME ) stoName,
        sale.GSSD_DATE saleDate,
        sale.GSSD_BILL_NO billNo,
        pb.PRO_SELF_CODE selfCode,
        IFNULL( pb.PRO_NAME, pb.PRO_COMMONNAME ) proName,
        pb.PRO_COMMONNAME proCommonName,
        pb.PRO_SPECS specs,
        pb.PRO_UNIT unit,
        pb.PRO_FACTORY_CODE factoryCode,
        pb.PRO_FACTORY_NAME factoryName,
        pb.PRO_MED_ID medProdctCode,
        pb.PRO_IF_MED,
        CASE
        WHEN pb.PRO_IF_MED = '1' THEN
        '是'
        WHEN pb.PRO_MED_ID IS NOT NULL THEN
        '是' ELSE '否'
        END ifMed,
        sale.GSSD_QTY qty,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) AS amountReceivable,
        sale.GSSD_AMT amt,
        sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX includeTaxSale,
        sale.GSSD_AMT - (sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX) grossProfitMargin,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) - sale.GSSD_AMT discount,
        sale.GSSD_SALER_ID salerId,
        ud1.USER_NAM salerName,
        sale.GSSD_DOCTOR_ID doctorId,
        ud2.USER_NAM doctorName,
        sale.GSSH_HYK_NO hykNo,
        gsmb.GSMB_NAME hykName,
        gsmb.GSMB_MOBILE hykMobile,
        gsmb.GSMB_MEMBER_ID memberId,
        concat( pc.PRO_BIG_CLASS_CODE, '-', pc.PRO_BIG_CLASS_NAME ) bigClass,
        concat( pc.PRO_MID_CLASS_CODE, '-', pc.PRO_MID_CLASS_NAME ) midClass,
        concat( pc.PRO_CLASS_CODE, '-', pc.PRO_CLASS_NAME ) proClass,
        pb.PRO_CLASS,
        sale.GSSD_BATCH_NO batchNo,
        sale.GSSD_VALID_DATE validData,
        sale.expiryDay,
        ifnull(bi.BAT_SUPPLIER_CODE,bi2.BAT_SUPPLIER_CODE) AS supplierCode,
        ifnull(bi.BAT_SUPPLIER_NAME,bi2.BAT_SUPPLIER_NAME) AS supplierName
        FROM
        (
        SELECT
        ssd.CLIENT,
        ssd.GSSD_BR_ID,
        ssd.GSSD_BILL_NO,
        ssd.GSSD_DATE,
        ssd.GSSD_PRC1,
        ssd.GSSD_QTY,
        ssd.GSSD_AMT,
        ssd.GSSD_PRO_ID,
        ssd.GSSD_MOV_TAX,
        ssd.GSSD_SALER_ID,
        ssd.GSSD_DOCTOR_ID,
        ssh.GSSH_HYK_NO,
        ssh.GSSH_REPLACE_BR_ID,
        ssd.GSSD_BATCH_NO,
        ssd.GSSD_BATCH,
        ssd.GSSD_VALID_DATE,
        DATEDIFF(date_format( ssd.GSSD_VALID_DATE, '%Y-%m-%d' ),date_format( ssd.GSSD_DATE, '%Y-%m-%d' )) expiryDay,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_AMT ELSE ssd.GSSD_ADD_AMT * - 1
        END
        AS GSSD_ADD_AMT,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_TAX ELSE ssd.GSSD_ADD_TAX* - 1
        END
        AS GSSD_ADD_TAX
        FROM
        GAIA_SD_SALE_HAND_H ssh
        LEFT JOIN GAIA_SD_SALE_HAND_D ssd ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND
        ssd.GSSD_BR_ID = ssh.GSSH_BR_ID )
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON ( ssh.CLIENT = pb.CLIENT AND pb.PRO_SITE = ssd.GSSD_BR_ID AND pb.
        PRO_SELF_CODE = ssd.GSSD_PRO_ID )
        WHERE
        ssh.CLIENT = #{clientId}
        AND ssh.GSSH_HIDE_FLAG = '6'
        AND ssh.GSSH_BILL_TYPE = '5'
        <if test="brIds != null and brIds.size>0">
            AND ssh.GSSH_REPLACE_BR_ID in
            <foreach collection="brIds" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="siteArr != null and siteArr.size > 0">
            and ssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>

        <if test="saleIds != null and saleIds.size > 0">
            and ssh.GSSH_BR_ID in
            <foreach collection="saleIds" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="queryUserId != null and queryUserId != ''">
            AND ssd.GSSD_SALER_ID = #{queryUserId}
        </if>
        <if test="empUserId != null and empUserId != ''">
            AND ssh.GSSH_EMP = #{empUserId}
        </if>
        <if test="queryDoctorId != null and queryDoctorId != ''">
            AND ssd.GSSD_DOCTOR_ID = #{queryDoctorId}
        </if>
        <if test="proArr != null and proArr.size > 0 ">
            and ssd.GSSD_PRO_ID IN
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="queryStartDate != null and queryStartDate != ''">
            and ssd.GSSD_DATE &gt;= #{queryStartDate}
        </if>
        <if test="queryEndDate != null and queryEndDate != ''">
            and ssd.GSSD_DATE &lt;= #{queryEndDate}
        </if>

        <if test="batchNo != null and batchNo != ''">
            AND ssd.GSSD_BATCH_NO = #{batchNo}
        </if>

        <if test="billNoArr != null and billNoArr.size > 0">
            AND ssd.GSSD_BILL_NO IN
            <foreach collection="billNoArr" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        ) sale
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON ( pb.CLIENT = sale.CLIENT AND pb.PRO_SITE = sale.GSSD_BR_ID AND pb.
        PRO_SELF_CODE = sale.GSSD_PRO_ID )
        LEFT
        JOIN GAIA_STORE_DATA sto ON ( sto.CLIENT = sale.CLIENT AND sto.STO_CODE = sale.GSSD_BR_ID )
        LEFT JOIN GAIA_USER_DATA ud1 ON ( ud1.CLIENT = sale.CLIENT AND ud1.USER_ID = sale.GSSD_SALER_ID )
        LEFT JOIN GAIA_USER_DATA ud2 ON ( ud2.CLIENT = sale.CLIENT AND ud2.USER_ID = sale.GSSD_DOCTOR_ID )
        LEFT JOIN GAIA_SD_MEMBER_CARD gsmc on gsmc.CLIENT=sale.client and gsmc.GSMBC_CARD_ID=sale.GSSH_HYK_NO
        LEFT JOIN GAIA_SD_MEMBER_BASIC gsmb on gsmb.CLIENT=gsmc.CLIENT and gsmb.GSMB_MEMBER_ID=gsmc.GSMBC_MEMBER_ID
        LEFT JOIN GAIA_BATCH_INFO bi ON (sale.CLIENT = bi.CLIENT AND sale.GSSD_BR_ID = bi.BAT_SITE_CODE
        AND sale.GSSD_PRO_ID = bi.BAT_PRO_CODE AND sale.GSSD_BATCH = bi.BAT_BATCH)
        LEFT JOIN GAIA_BATCH_INFO bi2 ON (sale.CLIENT = bi2.CLIENT AND sto.STO_DC_CODE = bi2.BAT_SITE_CODE
        AND sale.GSSD_PRO_ID = bi2.BAT_PRO_CODE AND sale.GSSD_BATCH = bi2.BAT_BATCH)
        LEFT JOIN (
        SELECT
        *
        FROM
        (
        SELECT
        PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS
        )
        proClass
        GROUP BY
        classId
        ) pc ON pc.classId = pb.PRO_CLASS
        LEFT JOIN (
        SELECT
        GSSPM_BR_ID,
        GSSPM_BILL_NO,
        GROUP_CONCAT(GSSPM_NAME SEPARATOR ';') payName
        FROM
        GAIA_SD_SALE_PAY_MSG
        WHERE
        CLIENT = #{clientId}
        AND GSSPM_TYPE = '1'
        <if test="brIds != null and brIds.size">
            AND GSSPM_BR_ID in
            <foreach collection="brIds" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="siteArr != null and siteArr.size > 0">
            and GSSPM_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        GROUP BY
        GSSPM_BILL_NO
        ) msg ON msg.GSSPM_BR_ID = sale.GSSD_BR_ID AND msg.GSSPM_BILL_NO = sale.GSSD_BILL_NO
        WHERE 1=1
        AND not EXISTS (select 1 from GAIA_SALES_CATALOG where CLIENT = pb.CLIENT and PRO_SELF_CODE=pb.PRO_SELF_CODE and
        IS_DELETE = 0 and `STATUS` in (1,2))
        <if test="specialType != null and specialType!=''">
            <choose>
                <when test="specialType == '0'.toString()">
                    and  (pb.PRO_CLASS like '1%' or pb.PRO_CLASS like '2%')
                </when>
                <when test="specialType == '1'.toString()">
                    and pb.PRO_CLASS like '5%'
                </when>
                <when test="specialType == '2'.toString()">
                    and pb.PRO_CONTROL_CLASS like '3%'
                </when>
                <when test="specialType == '3'.toString()">
                    and pb.PRO_CLASS like '4%'
                </when>
            </choose>
        </if>
        <if test="flag == 1">
            AND (pb.PRO_OUT != '1' OR pb.PRO_OUT is null)
        </if>
        <if test="zdy1 != null and zdy1.length > 0">
            and pb.PRO_ZDY1 in
            <foreach collection="zdy1" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy2 != null and zdy2.length > 0">
            and pb.PRO_ZDY2 in
            <foreach collection="zdy2" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy3 != null and zdy3.length > 0">
            and pb.PRO_ZDY3 in
            <foreach collection="zdy3" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy4 != null and zdy4.length > 0">
            and pb.PRO_ZDY4 in
            <foreach collection="zdy4" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy5 != null and zdy5.length > 0">
            and pb.PRO_ZDY5 in
            <foreach collection="zdy5" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="saleClass != null and saleClass.length > 0">
            and pb.PRO_SLAE_CLASS in
            <foreach collection="saleClass" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="proPosition != null and proPosition.length > 0">
            and pb.PRO_POSITION in
            <foreach collection="proPosition" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="prosClass != null and prosClass.length > 0">
            and pb.PRO_SCLASS in
            <foreach collection="prosClass" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="purchase != null and purchase != ''">
            and pb.PRO_NO_PURCHASE = #{purchase}
        </if>
        <if test="payName != null and payName.length > 0">
            and
            <foreach collection="payName" item="item" index="index" open="(" close=")" separator="OR">
                msg.payName like CONCAT('%',#{item},'%')
            </foreach>
        </if>
        ) tab
        where 1=1
        <if test="memberName != null and memberName != ''">
            AND (tab.hykName LIKE '%${memberName}%' OR tab.hykMobile LIKE '%${memberName}%' OR tab.hykNo LIKE
            '%${memberName}%')
        </if>
        <if test="supplierCode != null and supplierCode != ''">
            AND tab.supplierCode = #{supplierCode}
        </if>
        <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
            AND replace(grossProfitMargin / amt * 100,'%','') &lt;= #{grossProfitRateMax} +0
        </if>
        <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
            AND replace(grossProfitMargin / amt * 100,'%','') &gt;= #{grossProfitRateMin} +0
        </if>
        <if test="classArrs != null and classArrs.size > 0">
            and tab.PRO_CLASS in
            <foreach collection="classArrs" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="expiryDay != null and expiryDay !=''">
            and tab.expiryDay &lt;=#{expiryDay}
        </if>
        <if test="factory != null and factory != ''">
            AND (tab.factoryCode LIKE '%${factory}%' OR tab.factoryName LIKE '%${factory}%')
        </if>
        <!--<if test="medProdctStatus != null and medProdctStatus != ''">
            <if test="medProdctStatus == '1'.toString() ">
                AND ( tab.PRO_IF_MED = #{medProdctStatus} OR ifnull(tab.medProdctCode,'') != '')
            </if>
            <if test="medProdctStatus == '0'.toString() ">
                AND (tab.PRO_IF_MED = #{medProdctStatus} OR (ifnull(tab.medProdctCode,'') = '' AND ifnull(tab.PRO_IF_MED
                ,'') = ''))
            </if>
        </if>-->
    </select>
    <select id="getSaleStores" resultType="com.gys.entity.data.consignment.vo.StoreVo">
              select  h.CLIENT    client,
                      d.STO_CODE  storeId,
                      d.STO_NAME storeName
              FROM
                  GAIA_SD_SALE_H h
                      LEFT JOIN GAIA_STORE_DATA d ON h.CLIENT = d.CLIENT
                      AND h.GSSH_BR_ID = d.STO_CODE
              WHERE
                  h.GSSH_BILL_TYPE = '5'
             <if test="client != null and client !=''">
            and  h.CLIENT=#{client}
              </if>
              GROUP BY d.CLIENT,d.STO_CODE
    </select>

    <select id="getRecommendedStores" resultType="com.gys.entity.data.consignment.vo.StoreVo">
        select  h.CLIENT    client,
        d.STO_CODE  storeId,
        d.STO_NAME storeName
        FROM
        GAIA_SD_SALE_H h
        LEFT JOIN GAIA_STORE_DATA d ON h.CLIENT = d.CLIENT
        AND h.GSSH_REPLACE_BR_ID = d.STO_CODE
        WHERE
        h.GSSH_BILL_TYPE = '5'
        <if test="client != null and client !=''">
            and  h.CLIENT=#{client}
        </if>
        GROUP BY d.CLIENT,d.STO_CODE
    </select>

    <select id="getRecommendedDocuments" resultType="com.gys.entity.data.consignment.vo.RecommendedDocumentsVo">
        select * from (
        SELECT
        sd.GSSH_TIME as datePart,
        sd.GSSD_DATE saleDate,
        sd.GSSD_BR_ID stoCode,
        sd.GSSH_REPLACE_BR_ID recommendCode,
        IFNULl( sto.STO_SHORT_NAME, sto.STO_NAME ) stoName,
        IFNULl( sto1.STO_SHORT_NAME, sto1.STO_NAME ) recommendName,
        sum( sd.amountReceivable) amountReceivable,
        sum( sd.GSSD_AMT) amt,
        sd.GSSD_ZK_JFDH zkJfdh,
        sd.GSSD_ZK_JFDX zkJfdx,
        sd.GSSD_ZK_DYQ zkDyq,
        sd.GSSD_ZK_DZQ zkDzq,
        sd.GSSD_ZK_PM zkPm,
        sum( sd.GSSD_MOV_PRICES) movPrices,
        sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES) grossProfitMargin,
        sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES ) / sum(sd.GSSD_AMT )*100 grossProfitRate,
        sd.GSSD_BILL_NO billNo,
        sd.cashier,
        sd.cashierName,
        <if test="flag == 1">
            IFNULL(db.diffAmt, 0) diffAmt,
        </if>
        <if test="payTypeOutData != null and payTypeOutData.size() > 0">
            s.payName,
            <foreach collection="payTypeOutData" item="item" separator=",">
                IFNULL(CONVERT(sum(${item.gspmKey}),DECIMAL(10,4)),0) As #{item.gspmKey}
            </foreach>
        </if>

        FROM
        (
        SELECT
        gssh.GSSH_TIME,
        gssd.CLIENT,
        gssd.GSSD_DATE,
        gssd.GSSD_BILL_NO,
        gssd.GSSD_BR_ID,
        gssh.GSSH_REPLACE_BR_ID,
        ud.USER_ID cashier,
        ud.USER_NAM cashierName,
        SUM( GSSD_AMT ) GSSD_AMT,
        IFNULL(SUM( GSSD_ZK_JFDH ),0) GSSD_ZK_JFDH,
        IFNULL(SUM( GSSD_ZK_JFDX ),0) GSSD_ZK_JFDX,
        IFNULL(SUM( GSSD_ZK_DYQ ),0) GSSD_ZK_DYQ,
        IFNULL(SUM( GSSD_ZK_DZQ ),0) GSSD_ZK_DZQ,
        IFNULL(SUM( GSSD_ZK_PM) ,0) GSSD_ZK_PM,
        SUM( gssd.GSSD_PRC1 * ABS(gssd.GSSD_QTY )) AS amountReceivable,
        SUM((case
        when gssh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX
        else
        (gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX) * -1
        end
        )) AS GSSD_MOV_PRICES
        FROM
        GAIA_SD_SALE_D gssd
        LEFT JOIN GAIA_SD_SALE_H gssh ON gssd.CLIENT = gssh.CLIENT
        AND gssd.GSSD_BR_ID = gssh.GSSH_BR_ID
        AND gssd.GSSD_BILL_NO = gssh.GSSH_BILL_NO
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb on gssd.CLIENT = pb.CLIENT
        AND gssd.GSSD_BR_ID = pb.PRO_SITE
        AND gssd.GSSD_PRO_ID = pb.PRO_SELF_CODE
        LEFT JOIN GAIA_USER_DATA ud ON ud.CLIENT = gssh.CLIENT
        AND ud.USER_ID = gssh.GSSH_EMP
        WHERE
        gssh.CLIENT = #{client}
        AND gssh.GSSH_HIDE_FLAG = '0'
        AND gssh.GSSH_BILL_TYPE = '5'
        <if test="recommendIds != null and recommendIds.size> 0">
            and gssh.GSSH_REPLACE_BR_ID in
            <foreach collection="recommendIds" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="saleIds != null and saleIds.size > 0">
            and gssh.GSSH_BR_ID in
            <foreach collection="saleIds" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="billNos != null and billNos.size > 0">
            and gssh.GSSH_BILL_NO in
            <foreach collection="billNos" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="stoCode != null and stoCode != ''">
            AND gssd.GSSD_BR_ID = #{stoCode}
        </if>
        <if test="cashier != null and cashier != ''">
            AND gssh.GSSH_EMP = #{cashier}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and gssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="startDate != null and startDate != ''">
            and gssh.GSSH_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and gssh.GSSH_DATE &lt;= #{endDate}
        </if>
        <if test="statDatePart!=null and statDatePart!=''">
            AND gssh.GSSH_TIME <![CDATA[ >= ]]> #{statDatePart}
        </if>
        <if test="endDatePart!=null and endDatePart!=''">
            AND gssh.GSSH_TIME <![CDATA[ <= ]]> #{endDatePart}
        </if>
        <if test="userId != null and userId != ''">
            and gssd.GSSD_SALER_ID = #{userId}
        </if>
        <if test="flag == 1">
            AND (pb.PRO_OUT != '1' OR pb.PRO_OUT IS NULL)
        </if>
        GROUP BY
        gssh.CLIENT,gssh.GSSH_BR_ID,gssh.GSSH_BILL_NO
        ) sd
        <if test="payTypeOutData != null and payTypeOutData.size() > 0">

            LEFT JOIN (SELECT GSSPM_BR_ID,
            GSSPM_BILL_NO,
            GROUP_CONCAT( GSSPM_NAME SEPARATOR ';' ) payName,
            <foreach collection="payTypeOutData" item="item" separator=",">
                IFNULL(CONVERT(SUM(CASE GSSPM_ID WHEN #{item.gspmId} THEN GSSPM_AMT END ),DECIMAL(10,2)),'0.00')
                #{item.gspmKey}
            </foreach>
            FROM GAIA_SD_SALE_PAY_MSG
            WHERE CLIENT = #{client}
            <if test="stoCode != null and stoCode != ''">
                AND GSSPM_BR_ID = #{stoCode}
            </if>
            <if test="siteArr != null and siteArr.length > 0">
                and GSSPM_BR_ID in
                <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="startDate != null and startDate != ''">
                and GSSPM_DATE &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                and GSSPM_DATE &lt;= #{endDate}
            </if>

            AND GSSPM_TYPE = 1
            group by CLIENT, GSSPM_BR_ID,GSSPM_BILL_NO) s on s.GSSPM_BR_ID = sd.GSSD_BR_ID AND s.GSSPM_BILL_NO =
            sd.GSSD_BILL_NO
        </if>
        LEFT JOIN GAIA_STORE_DATA sto ON sto.CLIENT = sd.CLIENT AND sto.STO_CODE = sd.GSSD_BR_ID
        LEFT JOIN GAIA_STORE_DATA sto1 ON sto1.CLIENT = sd.CLIENT AND sto1.STO_CODE = sd.GSSH_REPLACE_BR_ID

        <!--update begin -->
        <if test="flag == 1">
            LEFT JOIN (SELECT SUM(GSSD_AMT) diffAmt,
            GSSD_BILL_NO billNo,
            GSSD_BR_ID brId
            FROM GAIA_SD_SALE_D d LEFT JOIN GAIA_PRODUCT_BUSINESS b
            ON d.CLIENT = b.CLIENT
            AND d.GSSD_BR_ID = b.PRO_SITE
            AND d.GSSD_PRO_ID = b.PRO_SELF_CODE
            WHERE b.CLIENT=#{client} AND b.PRO_OUT = '1'
            <if test="stoCode != null and stoCode != ''">
                AND GSSD_BR_ID = #{stoCode}
            </if>
            <if test="startDate != null and startDate != ''">
                and GSSD_DATE &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                and GSSD_DATE &lt;= #{endDate}
            </if>
            group by GSSD_BR_ID,GSSD_BILL_NO) db ON db.brId = sd.GSSD_BR_ID AND db.billNo = sd.GSSD_BILL_NO
        </if>
        <!--update end -->
        group by sd.GSSD_BILL_NO
        ) tab
        <where>
            <if test="saleType != null and saleType != ''">
                and ${saleType} IS NOT NULL AND ${saleType} != 0
            </if>
            <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
                AND replace(tab.grossProfitRate,'%','') &lt;= #{grossProfitRateMax} +0
            </if>
            <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
                AND replace(tab.grossProfitRate,'%','') &gt;= #{grossProfitRateMin} +0
            </if>
            <if test="payTypeOutData != null and payTypeOutData.size() > 0">
                <if test="payName != null and payName.length > 0">
                    and
                    <foreach collection="payName" item="item" index="index" open="(" close=")" separator="OR">
                        tab.payName like CONCAT('%',#{item},'%')
                    </foreach>
                </if>
            </if>
        </where>
        ORDER BY tab.saleDate,tab.stoCode
    </select>

    <select id="getRecommendedDocumentsTotal" resultType="com.gys.entity.data.consignment.vo.RecommendedDocumentsVo">
        select
        sum(amountReceivable) amountReceivable,
        sum(amt) amt,
        sum(zkJfdh) zkJfdh,
        sum(zkJfdx) zkJfdx,
        sum(zkDyq) zkDyq,
        sum(zkDzq) zkDzq,
        sum(zkPm) zkPm,
        sum(movPrices) movPrices,
        sum(amt)-sum(movPrices) grossProfitMargin,
        ROUND((sum(amt)-sum(movPrices)) / sum(amt) *100,2) grossProfitRate,
        <if test="flag == 1">
            sum(diffAmt) diffAmt,
        </if>
        <if test="payTypeOutData != null and payTypeOutData.size() > 0">
            <foreach collection="payTypeOutData" item="item" separator=",">
                IFNULL(CONVERT(sum(${item.gspmKey}),DECIMAL(10,4)),0) As #{item.gspmKey}
            </foreach>
        </if>
        from
        (
        select * from (
        SELECT
        sd.GSSD_DATE saleDate,
        sd.GSSD_BR_ID stoCode,
        sd.GSSH_REPLACE_BR_ID,
        IFNULl( sto.STO_SHORT_NAME, sto.STO_NAME ) stoName,
        IFNULl( sto1.STO_SHORT_NAME, sto1.STO_NAME ) recommendName,
        sum( sd.amountReceivable) amountReceivable,
        sum( sd.GSSD_AMT) amt,
        sd.GSSD_ZK_JFDH zkJfdh,
        sd.GSSD_ZK_JFDX zkJfdx,
        sd.GSSD_ZK_DYQ zkDyq,
        sd.GSSD_ZK_DZQ zkDzq,
        sd.GSSD_ZK_PM zkPm,
        sum( sd.GSSD_MOV_PRICES) movPrices,
        sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES) grossProfitMargin,
        sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES ) / sum(sd.GSSD_AMT )*100 grossProfitRate,
        sd.GSSD_BILL_NO billNo,
        <if test="flag == 1">
            IFNULL(db.diffAmt, 0) diffAmt,
        </if>
        <if test="payTypeOutData != null and payTypeOutData.size() > 0">
            s.payName,
            <foreach collection="payTypeOutData" item="item" separator=",">
                IFNULL(CONVERT(sum(${item.gspmKey}),DECIMAL(10,4)),0) As #{item.gspmKey}
            </foreach>
        </if>

        FROM
        (
        SELECT
        gssd.CLIENT,
        gssd.GSSD_DATE,
        gssd.GSSD_BILL_NO,
        gssd.GSSD_BR_ID,
        gssh.GSSH_REPLACE_BR_ID,
        SUM( GSSD_AMT ) GSSD_AMT,
        IFNULL(SUM( GSSD_ZK_JFDH ),0) GSSD_ZK_JFDH,
        IFNULL(SUM( GSSD_ZK_JFDX ),0) GSSD_ZK_JFDX,
        IFNULL(SUM( GSSD_ZK_DYQ ),0) GSSD_ZK_DYQ,
        IFNULL(SUM( GSSD_ZK_DZQ ),0) GSSD_ZK_DZQ,
        IFNULL(SUM( GSSD_ZK_PM) ,0) GSSD_ZK_PM,
        SUM( gssd.GSSD_PRC1 * ABS(gssd.GSSD_QTY )) AS amountReceivable,
        SUM((case
        when gssh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX
        else
        (gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX) * -1
        end
        )) AS GSSD_MOV_PRICES
        FROM
        GAIA_SD_SALE_D gssd
        LEFT JOIN GAIA_SD_SALE_H gssh ON gssd.CLIENT = gssh.CLIENT
        AND gssd.GSSD_BR_ID = gssh.GSSH_BR_ID
        AND gssd.GSSD_BILL_NO = gssh.GSSH_BILL_NO
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb on gssd.CLIENT = pb.CLIENT
        AND gssd.GSSD_BR_ID = pb.PRO_SITE
        AND gssd.GSSD_PRO_ID = pb.PRO_SELF_CODE
        WHERE
        gssd.CLIENT = #{client}
        AND gssh.GSSH_HIDE_FLAG = '0'
        AND gssh.GSSH_BILL_TYPE = '5'
        <if test="stoCode != null and stoCode != ''">
            AND gssd.GSSD_BR_ID = #{stoCode}
        </if>
        <if test="cashier != null and cashier != ''">
            AND gssh.GSSH_EMP = #{cashier}
        </if>
        <if test="recommendIds != null and recommendIds.size> 0">
            and gssh.GSSH_REPLACE_BR_ID in
            <foreach collection="recommendIds" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="saleIds != null and saleIds.size > 0">
            and gssh.GSSH_BR_ID in
            <foreach collection="saleIds" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="billNos != null and billNos.size > 0">
            and gssh.GSSH_BILL_NO in
            <foreach collection="billNos" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and gssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="startDate != null and startDate != ''">
            and gssd.GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and gssd.GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="statDatePart!=null and statDatePart!=''">
            AND gssh.GSSH_TIME <![CDATA[ >= ]]> #{statDatePart}
        </if>
        <if test="endDatePart!=null and endDatePart!=''">
            AND gssh.GSSH_TIME <![CDATA[ <= ]]> #{endDatePart}
        </if>
        <if test="userId != null and userId != ''">
            and gssd.GSSD_SALER_ID = #{userId}
        </if>
        <if test="flag == 1">
            AND (pb.PRO_OUT != '1' OR pb.PRO_OUT IS NULL)
        </if>
        GROUP BY
        gssd.CLIENT,gssd.GSSD_BR_ID,gssd.GSSD_BILL_NO
        ) sd
        <if test="payTypeOutData != null and payTypeOutData.size() > 0">

            LEFT JOIN (SELECT GSSPM_BR_ID,GSSPM_BILL_NO,
            GROUP_CONCAT( GSSPM_NAME SEPARATOR ';' ) payName,
            <foreach collection="payTypeOutData" item="item" separator=",">
                IFNULL(CONVERT(SUM(CASE GSSPM_ID WHEN #{item.gspmId} THEN GSSPM_AMT END ),DECIMAL(10,2)),'0.00')
                #{item.gspmKey}
            </foreach>
            FROM GAIA_SD_SALE_PAY_MSG
            WHERE CLIENT = #{client}
            <if test="stoCode != null and stoCode != ''">
                AND GSSPM_BR_ID = #{stoCode}
            </if>
            <if test="siteArr != null and siteArr.length > 0">
                and GSSPM_BR_ID in
                <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="startDate != null and startDate != ''">
                and GSSPM_DATE &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                and GSSPM_DATE &lt;= #{endDate}
            </if>

            AND GSSPM_TYPE = 1
            group by CLIENT, GSSPM_BR_ID,GSSPM_BILL_NO) s on s.GSSPM_BR_ID = sd.GSSD_BR_ID AND s.GSSPM_BILL_NO =
            sd.GSSD_BILL_NO
        </if>
        LEFT JOIN GAIA_STORE_DATA sto ON sto.CLIENT = sd.CLIENT AND sto.STO_CODE = sd.GSSD_BR_ID
        LEFT JOIN GAIA_STORE_DATA sto1 ON sto1.CLIENT = sd.CLIENT AND sto1.STO_CODE = sd.GSSH_REPLACE_BR_ID

        <!--update begin -->
        <if test="flag == 1">
            LEFT JOIN (SELECT SUM(GSSD_AMT) diffAmt, GSSD_BILL_NO billNo, GSSD_BR_ID brId FROM GAIA_SD_SALE_D d LEFT
            JOIN GAIA_PRODUCT_BUSINESS b
            ON d.CLIENT = b.CLIENT
            AND d.GSSD_BR_ID = b.PRO_SITE
            AND d.GSSD_PRO_ID = b.PRO_SELF_CODE
            WHERE b.CLIENT=#{client} AND b.PRO_OUT = '1'
            <if test="stoCode != null and stoCode != ''">
                AND GSSD_BR_ID = #{stoCode}
            </if>
            <if test="startDate != null and startDate != ''">
                and GSSD_DATE &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                and GSSD_DATE &lt;= #{endDate}
            </if>
            group by GSSD_BR_ID,GSSD_BILL_NO) db ON db.brId = sd.GSSD_BR_ID AND db.billNo = sd.GSSD_BILL_NO
        </if>
        <!--update end -->
        group by sd.GSSD_BILL_NO
        ) tab
        <where>
            <if test="saleType != null and saleType != ''">
                and ${saleType} IS NOT NULL AND ${saleType} != 0
            </if>
            <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
                AND replace(tab.grossProfitRate,'%','') &lt;= #{grossProfitRateMax} +0
            </if>
            <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
                AND replace(tab.grossProfitRate,'%','') &gt;= #{grossProfitRateMin} +0
            </if>
            <if test="payTypeOutData != null and payTypeOutData.size() > 0">
                <if test="payName != null and payName.length > 0">
                    and
                    <foreach collection="payName" item="item" index="index" open="(" close=")" separator="OR">
                        tab.payName like CONCAT('%',#{item},'%')
                    </foreach>
                </if>
            </if>
        </where>
        ) a
    </select>

    <select id="getAllStores" resultType="com.gys.entity.data.consignment.vo.StoreVo">
        select  CLIENT    client,
        STO_CODE  storeId,
        ifNull(STO_SHORT_NAME,STO_NAME)  storeName
        FROM
         GAIA_STORE_DATA
        WHERE
        <if test="client != null and client !=''">
             CLIENT=#{client}
        </if>
        GROUP BY CLIENT,STO_CODE
    </select>

    <select id="queryMemberInfo" parameterType="com.gys.report.entity.GetMemberInfoInData"
            resultType="com.gys.report.entity.GetMemberInfoOutData">
        SELECT
        DISTINCT C.GSMBC_CARD_ID AS 'memberCardId',
        B.GSMB_NAME AS 'memberName',
        B.GSMB_MOBILE AS 'mobile',
        B.GSMB_SEX AS 'sex',
        B.GSMB_AGE AS 'age'
        FROM GAIA_SD_MEMBER_BASIC B
        LEFT JOIN GAIA_SD_MEMBER_CARD C ON B.GSMB_MEMBER_ID = C.GSMBC_MEMBER_ID AND B.CLIENT = C.CLIENT
        WHERE
        B.CLIENT = #{client}
        <if test="mateType == 0">
            <if test="memberCarArr != null and memberCarArr.length > 0 ">
                <trim prefix="AND (" prefixOverrides="OR" suffix=")">
                    <foreach collection="memberCarArr" separator="OR" item="item">
                        C.GSMBC_CARD_ID LIKE CONCAT('%',#{item},'%')
                    </foreach>
                </trim>
            </if>
        </if>
        <if test="mateType == 1">
            <if test="memberCarArr != null and memberCarArr.length > 0">
                AND C.GSMBC_CARD_ID IN
                <foreach collection="memberCarArr" open="(" separator="," item="item" close=")">
                    #{item}
                </foreach>
            </if>
        </if>
        ORDER BY
        C.GSMBC_CARD_ID
    </select>

    <select id="selectStoreSaleByDate" resultType="java.util.Map">

        SELECT
        *,count(tab.stoCode) as stoCodeCount
        FROM
        (
        SELECT
        sd.saleYear,
        sd.saleMonth,
        sd.saleDay,
        count( DISTINCT sd.GSSD_DATE ) daysSales,
        <if test="dateType != null and dateType != ''">
            <if test=" dateType == '1'.toString() ">
                sd.saleYear saleDate,
            </if>
            <if test=" dateType == '2'.toString() ">
                CONCAT(sd.saleYear,LPAD(sd.saleMonth,2,'0')) saleDate,
            </if>
            <if test=" dateType == '3'.toString() ">
                CONCAT(sd.saleYear,LPAD(sd.saleMonth,2,'0'),LPAD(sd.saleDay,2,'0')) saleDate,
            </if>
        </if>
        sd.GSSD_BR_ID stoCode,
        IFNULl( STO_SHORT_NAME, STO_NAME ) stoName,
        sum( sd.amountReceivable ) amountReceivable,
        count( DISTINCT sd.GSSD_BILL_NO ) numberTrades,
        sum( sd.GSSD_AMT )/ count( DISTINCT sd.GSSD_BILL_NO ) perTicketSales,
        sum( sd.GSSD_AMT ) amt,
        sum( sd.GSSD_ZK_JFDX ) zkJfdx,
        sum( sd.GSSD_ZK_DYQ ) zkDyq,
        sum( sd.GSSD_ZK_DZQ ) zkDzq,
        sum( sd.GSSD_MOV_PRICES ) movPrices,
        sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES ) grossProfitMargin,
        sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES )/ count( DISTINCT sd.GSSD_DATE ) grossProfitMarginByDay,
        IFNULL(sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES ) / sum( sd.GSSD_AMT )* 100,0)grossProfitRate,
        sum( sd.amountReceivable ) - sum( sd.GSSD_AMT ) discountAmt,
        (
        sum( sd.amountReceivable ) - sum( sd.GSSD_AMT ))/ sum( sd.amountReceivable )* 100 discountRate,
        sum( sd.GSSD_AMT )/ count( DISTINCT sd.GSSD_DATE ) amtByDay,
        count( DISTINCT sd.GSSD_BILL_NO )/ count( DISTINCT sd.GSSD_DATE ) numberTradesByDay,
        sum( sd.memberSale ) memberSale,
        IFNULL(sum( sd.memberSale )/ sum( sd.GSSD_AMT ) * 100,0) memberSaleRate
        <if test="payTypeOutData != null and payTypeOutData.size() > 0">
            ,s.payName
            <foreach collection="payTypeOutData" item="item">
                ,IFNULL(CONVERT(sum(${item.gspmKey}),DECIMAL(15,4)),0) As #{item.gspmKey}
            </foreach>
        </if>
        FROM
        (
        SELECT
        sale.CLIENT,
        sale.GSSD_DATE,
        sale.GSSD_BILL_NO,
        YEAR (
        STR_TO_DATE( sale.GSSD_DATE, '%Y%m%d' )) saleYear,
        MONTH (
        STR_TO_DATE( sale.GSSD_DATE, '%Y%m%d' )) saleMonth,
        DAY (
        STR_TO_DATE( sale.GSSD_DATE, '%Y%m%d' )) saleDay,
        sale.GSSD_BR_ID,
        SUM( sale.GSSD_AMT ) GSSD_AMT,
        SUM( CASE WHEN sale.GSSH_HYK_NO IS NOT NULL THEN sale.GSSD_AMT ELSE 0 END ) AS memberSale,
        IFNULL( SUM( sale.GSSD_ZK_JFDX ), 0 ) GSSD_ZK_JFDX,
        IFNULL( SUM( sale.GSSD_ZK_DYQ ), 0 ) GSSD_ZK_DYQ,
        IFNULL( SUM( sale.GSSD_ZK_DZQ ), 0 ) GSSD_ZK_DZQ,
        SUM(sale.GSSD_PRC1 * ABS( sale.GSSD_QTY )) AS amountReceivable,
        SUM(sale.GSSD_MOV_PRICES) GSSD_MOV_PRICES
        FROM
        (
        SELECT
        gssd.CLIENT,
        gssd.GSSD_DATE,
        gssd.GSSD_BILL_NO,
        gssd.GSSD_BR_ID,
        GSSD_AMT,
        gssh.GSSH_HYK_NO,
        GSSD_ZK_JFDX,
        GSSD_ZK_DYQ,
        GSSD_ZK_DZQ,
        gssd.GSSD_PRC1,
        gssd.GSSD_QTY,
        CASE

        WHEN gssh.GSSH_BILL_NO_RETURN IS NULL THEN
        gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ELSE ( gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ) * - 1
        END AS GSSD_MOV_PRICES
        FROM
        GAIA_SD_SALE_D gssd
        LEFT JOIN GAIA_SD_SALE_H gssh ON gssd.CLIENT = gssh.CLIENT
        AND gssd.GSSD_BR_ID = gssh.GSSH_BR_ID
        AND gssd.GSSD_BILL_NO = gssh.GSSH_BILL_NO
        WHERE
        gssd.CLIENT = #{client}
        AND gssh.GSSH_HIDE_FLAG = '0'
        <if test="userRestrictInfo!=null">
            <if test="userRestrictInfo.restrictType != '0'.toString()">
                AND gssd.GSSD_BR_ID IN
                <foreach collection="userRestrictInfo.restrictStoCodes" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </if>
        <if test="stoCode != null and stoCode != ''">
            AND gssd.GSSD_BR_ID = #{stoCode}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and gssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="startDate != null and startDate != ''">
            and gssd.GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and gssd.GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="statDatePart!=null and statDatePart!=''">
            AND gssh.GSSH_TIME <![CDATA[ >= ]]> #{statDatePart}
        </if>
        <if test="endDatePart!=null and endDatePart!=''">
            AND gssh.GSSH_TIME <![CDATA[ <= ]]> #{endDatePart}
        </if>
        ) sale
        <where>
            <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
                AND (sale.GSSD_AMT - sale.GSSD_MOV_PRICES )/ sale.GSSD_AMT * 100 &lt;= #{grossProfitRateMax} +0
            </if>
            <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
                AND (sale.GSSD_AMT - sale.GSSD_MOV_PRICES )/ sale.GSSD_AMT * 100 &gt;= #{grossProfitRateMin} +0
            </if>
        </where>

        GROUP BY
        sale.CLIENT,
        sale.GSSD_BR_ID,
        sale.GSSD_BILL_NO
        ) sd
        <if test="payTypeOutData != null and payTypeOutData.size() > 0">
            LEFT JOIN (
            SELECT
            GSSPM_BR_ID,
            GSSPM_BILL_NO,
            GROUP_CONCAT(DISTINCT GSSPM_NAME SEPARATOR ';' ) payName,
            <foreach collection="payTypeOutData" item="item" separator=",">
                IFNULL(CONVERT(SUM(CASE GSSPM_ID WHEN #{item.gspmId} THEN GSSPM_AMT END ),DECIMAL(15,4)),'0.00')
                #{item.gspmKey}
            </foreach>
            FROM
            GAIA_SD_SALE_PAY_MSG
            WHERE
            CLIENT = #{client}
            <if test="stoCode != null and stoCode != ''">
                AND GSSPM_BR_ID = #{stoCode}
            </if>
            <if test="siteArr != null and siteArr.length > 0">
                and GSSPM_BR_ID in
                <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="startDate != null and startDate != ''">
                and GSSPM_DATE &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                and GSSPM_DATE &lt;= #{endDate}
            </if>
            AND GSSPM_TYPE = 1
            GROUP BY
            CLIENT,
            GSSPM_BR_ID,
            GSSPM_BILL_NO
            ) s ON s.GSSPM_BR_ID = sd.GSSD_BR_ID
            AND s.GSSPM_BILL_NO = sd.GSSD_BILL_NO
        </if>
        LEFT JOIN GAIA_STORE_DATA sto ON sto.CLIENT = sd.CLIENT AND sto.STO_CODE = sd.GSSD_BR_ID
        <where>
            <if test="payTypeOutData != null and payTypeOutData.size() > 0">
                <if test="payName != null and payName.length > 0">
                    and
                    <foreach collection="payName" item="item" index="index" open="(" close=")" separator="OR">
                        s.payName like CONCAT('%',#{item},'%')
                    </foreach>
                </if>
            </if>
            <include refid="STORE_CATEGORY_CONDITION" />
        </where>
        GROUP BY
        sd.GSSD_BR_ID,
        sd.saleYear
        <if test="dateType != null and dateType != ''">
            <if test=" dateType == '2'.toString() ">
                ,sd.saleMonth
            </if>
            <if test=" dateType == '3'.toString() ">
                ,sd.saleMonth
                ,sd.saleDay
            </if>
        </if>
        ) tab
        <where>
            <if test="saleType != null and saleType != ''">
                and ${saleType} IS NOT NULL AND ${saleType} != 0
            </if>
        </where>
        group by
        tab.stoCode,
        tab.saleYear
        <if test="dateType != null and dateType != ''">
            <if test=" dateType == '2'.toString() ">
                ,tab.saleMonth
            </if>
            <if test=" dateType == '3'.toString() ">
                ,tab.saleMonth
                ,tab.saleDay
            </if>
        </if>
        ORDER BY
        tab.stoCode,
        tab.saleYear
        <if test="dateType != null and dateType != ''">
            <if test=" dateType == '2'.toString() ">
                ,tab.saleMonth
            </if>
            <if test=" dateType == '3'.toString() ">
                ,tab.saleMonth
                ,tab.saleDay
            </if>
        </if>

    </select>

    <select id="selectStoreSaleByTatol" resultType="java.util.Map">
        select
        sum( daysSales)daysSales,
        sum( amountReceivable) amountReceivable,
        sum( numberTrades) numberTrades,
        sum( amt) amt,
        sum( amt) /sum( numberTrades) perTicketSales,
        sum( zkJfdx) zkJfdx,
        sum( zkDyq) zkDyq,
        sum( zkDzq) zkDzq,
        sum( movPrices) movPrices,
        sum( grossProfitMargin) grossProfitMargin,
        sum( grossProfitMargin ) / sum(amt )*100 grossProfitRate,
        sum( discountAmt) discountAmt,
        (sum( amountReceivable ) - sum( amt ))/ sum( amountReceivable ) *100 discountRate,
        sum(numberTradesByDay) numberTradesByDay,
        sum(memberSale) memberSale,
        sum(amtByDay) amtByDay,
        sum(memberSale)/sum( amt )*100 memberSaleRate,
        <if test="payTypeOutData != null and payTypeOutData.size() > 0">
            <foreach collection="payTypeOutData" item="item" separator=",">
                IFNULL(CONVERT(sum(${item.gspmKey}),DECIMAL(15,4)),0) As #{item.gspmKey}
            </foreach>
        </if>
        FROM
        (
        SELECT
        sd.saleYear,
        sd.saleMonth,
        sd.saleDay,
        count( DISTINCT sd.GSSD_DATE ) daysSales,
        sum( sd.amountReceivable ) amountReceivable,
        count( DISTINCT sd.GSSD_BILL_NO ) numberTrades,
        sum( sd.GSSD_AMT )/ count( DISTINCT sd.GSSD_BILL_NO ) perTicketSales,
        sum( sd.GSSD_AMT ) amt,
        sum( sd.GSSD_ZK_JFDX ) zkJfdx,
        sum( sd.GSSD_ZK_DYQ ) zkDyq,
        sum( sd.GSSD_ZK_DZQ ) zkDzq,
        sum( sd.GSSD_MOV_PRICES ) movPrices,
        sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES ) grossProfitMargin,
        sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES )/ count( DISTINCT sd.GSSD_DATE ) grossProfitMarginByDay,
        sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES ) / sum( sd.GSSD_AMT )* 100 grossProfitRate,
        sum( sd.amountReceivable ) - sum( sd.GSSD_AMT ) discountAmt,
        (
        sum( sd.amountReceivable ) - sum( sd.GSSD_AMT ))/ sum( sd.amountReceivable )* 100 discountRate,
        sum( sd.GSSD_AMT )/ count( DISTINCT sd.GSSD_DATE ) amtByDay,
        count( DISTINCT sd.GSSD_BILL_NO )/ count( DISTINCT sd.GSSD_DATE ) numberTradesByDay,
        sum( sd.memberSale ) memberSale,
        sum( sd.memberSale )/ sum( sd.GSSD_AMT ) * 100 memberSaleRate
        <if test="payTypeOutData != null and payTypeOutData.size() > 0">
            ,s.payName
            <foreach collection="payTypeOutData" item="item">
                ,IFNULL(CONVERT(sum(${item.gspmKey}),DECIMAL(15,4)),0) As #{item.gspmKey}
            </foreach>
        </if>
        FROM
        (
        SELECT
        sale.CLIENT,
        sale.GSSD_DATE,
        sale.GSSD_BILL_NO,
        YEAR (
        STR_TO_DATE( sale.GSSD_DATE, '%Y%m%d' )) saleYear,
        MONTH (
        STR_TO_DATE( sale.GSSD_DATE, '%Y%m%d' )) saleMonth,
        DAY (
        STR_TO_DATE( sale.GSSD_DATE, '%Y%m%d' )) saleDay,
        sale.GSSD_BR_ID,
        SUM( sale.GSSD_AMT ) GSSD_AMT,
        SUM( CASE WHEN sale.GSSH_HYK_NO IS NOT NULL THEN sale.GSSD_AMT ELSE 0 END ) AS memberSale,
        IFNULL( SUM( sale.GSSD_ZK_JFDX ), 0 ) GSSD_ZK_JFDX,
        IFNULL( SUM( sale.GSSD_ZK_DYQ ), 0 ) GSSD_ZK_DYQ,
        IFNULL( SUM( sale.GSSD_ZK_DZQ ), 0 ) GSSD_ZK_DZQ,
        SUM(sale.GSSD_PRC1 * ABS( sale.GSSD_QTY )) AS amountReceivable,
        SUM(sale.GSSD_MOV_PRICES) GSSD_MOV_PRICES
        FROM
        (
        SELECT
        gssd.CLIENT,
        gssd.GSSD_DATE,
        gssd.GSSD_BILL_NO,
        gssd.GSSD_BR_ID,
        GSSD_AMT,
        gssh.GSSH_HYK_NO,
        GSSD_ZK_JFDX,
        GSSD_ZK_DYQ,
        GSSD_ZK_DZQ,
        gssd.GSSD_PRC1,
        gssd.GSSD_QTY,
        CASE

        WHEN gssh.GSSH_BILL_NO_RETURN IS NULL THEN
        gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ELSE ( gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ) * - 1
        END AS GSSD_MOV_PRICES
        FROM
        GAIA_SD_SALE_D gssd
        LEFT JOIN GAIA_SD_SALE_H gssh ON gssd.CLIENT = gssh.CLIENT
        AND gssd.GSSD_BR_ID = gssh.GSSH_BR_ID
        AND gssd.GSSD_BILL_NO = gssh.GSSH_BILL_NO
        WHERE
        gssd.CLIENT = #{client}
        AND gssh.GSSH_HIDE_FLAG = '0'
        <if test="stoCode != null and stoCode != ''">
            AND gssd.GSSD_BR_ID = #{stoCode}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and gssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="startDate != null and startDate != ''">
            and gssd.GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and gssd.GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="statDatePart!=null and statDatePart!=''">
            AND gssh.GSSH_TIME <![CDATA[ >= ]]> #{statDatePart}
        </if>
        <if test="endDatePart!=null and endDatePart!=''">
            AND gssh.GSSH_TIME <![CDATA[ <= ]]> #{endDatePart}
        </if>
        ) sale
        <where>
            <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
                AND (sale.GSSD_AMT - sale.GSSD_MOV_PRICES )/ sale.GSSD_AMT * 100 &lt;= #{grossProfitRateMax} +0
            </if>
            <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
                AND (sale.GSSD_AMT - sale.GSSD_MOV_PRICES )/ sale.GSSD_AMT * 100 &gt;= #{grossProfitRateMin} +0
            </if>
        </where>

        GROUP BY
        sale.CLIENT,
        sale.GSSD_BR_ID,
        sale.GSSD_BILL_NO
        ) sd
        <if test="payTypeOutData != null and payTypeOutData.size() > 0">
            LEFT JOIN (
            SELECT
            GSSPM_BR_ID,
            GSSPM_BILL_NO,
            GROUP_CONCAT(DISTINCT GSSPM_NAME SEPARATOR ';' ) payName,
            <foreach collection="payTypeOutData" item="item" separator=",">
                IFNULL(CONVERT(SUM(CASE GSSPM_ID WHEN #{item.gspmId} THEN GSSPM_AMT END ),DECIMAL(15,4)),'0.00')
                #{item.gspmKey}
            </foreach>
            FROM
            GAIA_SD_SALE_PAY_MSG
            WHERE
            CLIENT = #{client}
            <if test="stoCode != null and stoCode != ''">
                AND GSSPM_BR_ID = #{stoCode}
            </if>
            <if test="siteArr != null and siteArr.length > 0">
                and GSSPM_BR_ID in
                <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="startDate != null and startDate != ''">
                and GSSPM_DATE &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                and GSSPM_DATE &lt;= #{endDate}
            </if>
            AND GSSPM_TYPE = 1
            GROUP BY
            CLIENT,
            GSSPM_BR_ID,
            GSSPM_BILL_NO
            ) s ON s.GSSPM_BR_ID = sd.GSSD_BR_ID
            AND s.GSSPM_BILL_NO = sd.GSSD_BILL_NO
            <where>
                <if test="payTypeOutData != null and payTypeOutData.size() > 0">
                    <if test="payName != null and payName.length > 0">
                        and
                        <foreach collection="payName" item="item" index="index" open="(" close=")" separator="OR">
                            s.payName like CONCAT('%',#{item},'%')
                        </foreach>
                    </if>
                </if>
            </where>
        </if>
        GROUP BY
        sd.GSSD_BR_ID,
        sd.saleYear
        <if test="dateType != null and dateType != ''">
            <if test=" dateType == '2'.toString() ">
                ,sd.saleMonth
            </if>
            <if test=" dateType == '3'.toString() ">
                ,sd.saleMonth
                ,sd.saleDay
            </if>
        </if>
        ) tab
        <where>
            <if test="saleType != null and saleType != ''">
                and ${saleType} IS NOT NULL AND ${saleType} != 0
            </if>
        </where>
    </select>

    <select id="selectRenHeStoreSaleByDate" resultType="java.util.Map">
        SELECT
        *,count(tab.stoCode) as stoCodeCount
        FROM
        (
        SELECT
        sd.saleYear,
        sd.saleMonth,
        sd.saleDay,
        count( DISTINCT sd.GSSD_DATE ) daysSales,
        <if test="dateType != null and dateType != ''">
            <if test=" dateType == '1'.toString() ">
                sd.saleYear saleDate,
            </if>
            <if test=" dateType == '2'.toString() ">
                CONCAT(sd.saleYear,LPAD(sd.saleMonth,2,'0')) saleDate,
            </if>
            <if test=" dateType == '3'.toString() ">
                CONCAT(sd.saleYear,LPAD(sd.saleMonth,2,'0'),LPAD(sd.saleDay,2,'0')) saleDate,
            </if>
        </if>
        sd.GSSD_BR_ID stoCode,
        IFNULl( STO_SHORT_NAME, STO_NAME ) stoName,
        sum( sd.amountReceivable ) amountReceivable,
        count( DISTINCT sd.GSSD_BILL_NO ) numberTrades,
        sum( sd.GSSD_AMT )/ count( DISTINCT sd.GSSD_BILL_NO ) perTicketSales,
        sum( sd.GSSD_AMT ) amt,
        sum( sd.GSSD_ZK_JFDX ) zkJfdx,
        sum( sd.GSSD_ZK_DYQ ) zkDyq,
        sum( sd.GSSD_ZK_DZQ ) zkDzq,
        sum( sd.doctorGssdAmt ) doctorGssdAmt,
        sum( sd.doctorGrossProfitAmt ) doctorGrossProfitAmt,
        <!-- 医疗毛利率 -->
        IFNULL(CONVERT(SUM( sd.doctorGssdAmt - sd.doctorGssdMovPrices )/ SUM( sd.doctorGssdAmt ) * 100,DECIMAL ( 10, 2 )),0) doctorGrossProfitRate,
        <!-- 医疗客单价 -->
        IFNULL(sum( sd.doctorGssdAmt ) / sd.doctorPayCount,0) AS doctorGsshSinglePrice,
        ( sd.doctorPayCount ) doctorPayCount,
        sum( sd.therapyGssdAmt ) therapyGssdAmt,
        sum( sd.therapyGrossProfitAmt ) therapyGrossProfitAmt,
        <!-- 诊疗毛利率 -->
        IFNULL(CONVERT(SUM( sd.therapyGssdAmt - sd.therapyGssdMovPrices )/ SUM( sd.therapyGssdAmt ) * 100,DECIMAL ( 10, 2 )),0) therapyGrossProfitRate,
        sum( sd.restoreSaleAmt ) restoreSaleAmt,
        sum( sd.GSSD_MOV_PRICES ) movPrices,
        sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES ) grossProfitMargin,
        sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES )/ count( DISTINCT sd.GSSD_DATE ) grossProfitMarginByDay,
        sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES ) / sum( sd.GSSD_AMT )* 100 grossProfitRate,
        sum( sd.amountReceivable ) - sum( sd.GSSD_AMT ) discountAmt,
        (sum( sd.amountReceivable ) - sum( sd.GSSD_AMT ))/ sum( sd.amountReceivable )* 100 discountRate,
        sum( sd.GSSD_AMT )/ count( DISTINCT sd.GSSD_DATE ) amtByDay,
        count( DISTINCT sd.GSSD_BILL_NO )/ count( DISTINCT sd.GSSD_DATE ) numberTradesByDay,
        sum( sd.memberSale ) memberSale,
        sum( sd.memberSale )/ sum( sd.GSSD_AMT ) * 100 memberSaleRate
        FROM
        (
        SELECT
        sale.CLIENT,
        sale.GSSD_DATE,
        sale.GSSD_BILL_NO,
        YEAR (
        STR_TO_DATE( sale.GSSD_DATE, '%Y%m%d' )) saleYear,
        MONTH (
        STR_TO_DATE( sale.GSSD_DATE, '%Y%m%d' )) saleMonth,
        DAY (
        STR_TO_DATE( sale.GSSD_DATE, '%Y%m%d' )) saleDay,
        sale.GSSD_BR_ID,
        SUM( sale.GSSD_AMT ) GSSD_AMT,
        SUM( sale.doctorGssdAmt ) doctorGssdAmt,
        SUM( sale.doctorGrossProfitAmt ) doctorGrossProfitAmt,
        ( sale.doctorPayCount ) doctorPayCount,
        SUM( sale.therapyGssdAmt ) therapyGssdAmt,
        SUM( sale.therapyGrossProfitAmt ) therapyGrossProfitAmt,
        SUM( sale.restoreSaleAmt ) restoreSaleAmt,
        SUM( CASE WHEN sale.GSSH_HYK_NO IS NOT NULL THEN sale.GSSD_AMT ELSE 0 END ) AS memberSale,
        IFNULL( SUM( sale.GSSD_ZK_JFDX ), 0 ) GSSD_ZK_JFDX,
        IFNULL( SUM( sale.GSSD_ZK_DYQ ), 0 ) GSSD_ZK_DYQ,
        IFNULL( SUM( sale.GSSD_ZK_DZQ ), 0 ) GSSD_ZK_DZQ,
        SUM(sale.GSSD_PRC1 * ABS( sale.GSSD_QTY )) AS amountReceivable,
        SUM(sale.GSSD_MOV_PRICES) GSSD_MOV_PRICES,
        SUM(sale.doctorGssdMovPrices) doctorGssdMovPrices,
        SUM(sale.therapyGssdMovPrices) therapyGssdMovPrices
        FROM
        (
        SELECT
        gssd.CLIENT,
        gssd.GSSD_DATE,
        gssd.GSSD_BILL_NO,
        gssd.GSSD_BR_ID,
        GSSD_AMT,
        gssh.GSSH_HYK_NO,
        GSSD_ZK_JFDX,
        GSSD_ZK_DYQ,
        GSSD_ZK_DZQ,
        (IFNULL(GSSD_AMT,0)+IFNULL(GSSD_ZK_JFDX,0)+IFNULL(GSSD_ZK_DYQ,0)+IFNULL(GSSD_ZK_DZQ,0)) AS restoreSaleAmt,
        gssd.GSSD_PRC1,
        gssd.GSSD_QTY,
        CASE
        WHEN gssh.GSSH_BILL_NO_RETURN IS NULL THEN
        gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ELSE ( gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ) * - 1
        END AS GSSD_MOV_PRICES,
        <!-- 诊疗成本 -->
        CASE
        WHEN gpb.PRO_CLASS LIKE 'H%' THEN
        (CASE
        WHEN gssh.GSSH_BILL_NO_RETURN IS NULL THEN
        gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ELSE ( gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ) * - 1
        END)
        END AS therapyGssdMovPrices,
        <!-- 医疗成本 -->
        CASE
        WHEN gud.USER_STATUS = '0' THEN
        (CASE
        WHEN gssh.GSSH_BILL_NO_RETURN IS NULL THEN
        gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ELSE ( gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ) * - 1
        END)
        END AS doctorGssdMovPrices,
        <!-- 医疗销售 -->
        (CASE gud.USER_STATUS WHEN 0 THEN IFNULL( CONVERT (GSSD_AMT, DECIMAL ( 19, 4 )), 0 ) ELSE 0 END)
        AS doctorGssdAmt,
        <!-- 医疗毛利额 -->
        ( CASE gud.USER_STATUS WHEN 0 THEN IFNULL( CONVERT (GSSD_AMT - CASE
        WHEN gssh.GSSH_BILL_NO_RETURN IS NULL THEN
        gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ELSE ( gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ) * - 1
        END ,DECIMAL ( 19, 4 )),0 ) ELSE 0 END)
        AS doctorGrossProfitAmt,
        <!-- 医疗交易次数 -->
        IFNULL(i.doctorPayCount,0) AS doctorPayCount,
        <!-- 诊疗销售 -->
        ( CASE WHEN gpb.PRO_CLASS LIKE 'H%' THEN IFNULL( CONVERT (GSSD_AMT, DECIMAL ( 19, 4 )), 0 ) ELSE 0 END)
        AS therapyGssdAmt,
        <!-- 诊疗毛利额 -->
        ( CASE WHEN gpb.PRO_CLASS LIKE 'H%' THEN IFNULL( CONVERT (GSSD_AMT - CASE
        WHEN gssh.GSSH_BILL_NO_RETURN IS NULL THEN
        gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ELSE ( gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ) * - 1
        END,DECIMAL ( 19, 4 )),0 ) ELSE 0 END)
        AS therapyGrossProfitAmt
        FROM
        GAIA_SD_SALE_D gssd
        LEFT JOIN GAIA_SD_SALE_H gssh ON gssd.CLIENT = gssh.CLIENT
        AND gssd.GSSD_BR_ID = gssh.GSSH_BR_ID
        AND gssd.GSSD_BILL_NO = gssh.GSSH_BILL_NO
        LEFT JOIN GAIA_USER_DATA gud ON gud.USER_ID = gssd.GSSD_SALER_ID AND gud.CLIENT = gssd.CLIENT
        LEFT JOIN GAIA_PRODUCT_BUSINESS gpb ON gpb.PRO_SELF_CODE = gssd.GSSD_PRO_ID AND gssd.CLIENT = gpb.CLIENT AND gpb.PRO_SITE = gssd.GSSD_BR_ID
        LEFT JOIN (SELECT count(s.GSSH_BILL_NO) count,
        count( s.doctorPayCount ) doctorPayCount,
        count( s.therapyPayCount ) therapyPayCount,
        s.GSSH_BR_ID
        FROM
        (SELECT
        hs.CLIENT,
        hs.GSSH_BR_ID,
        hs.GSSH_BILL_NO,
        IF( gud.USER_STATUS = '0', 1, NULL ) doctorPayCount,
        IF( gpb.PRO_CLASS LIKE 'H%', 1, NULL ) therapyPayCount
        FROM
        GAIA_SD_SALE_H hs
        LEFT JOIN GAIA_SD_SALE_D d ON d.GSSD_BR_ID = hs.GSSH_BR_ID
        AND d.CLIENT = hs.CLIENT
        AND d.GSSD_BILL_NO = hs.GSSH_BILL_NO
        LEFT JOIN GAIA_USER_DATA gud ON gud.USER_ID = d.GSSD_SALER_ID
        AND gud.CLIENT = hs.CLIENT
        LEFT JOIN GAIA_PRODUCT_BUSINESS gpb ON gpb.PRO_SELF_CODE = d.GSSD_PRO_ID
        AND d.CLIENT = gpb.CLIENT
        AND gpb.PRO_SITE = hs.GSSH_BR_ID
        WHERE hs.GSSH_HIDE_FLAG = '0' AND hs.CLIENT = #{client} AND hs.GSSH_DATE <![CDATA[ >= ]]> #{startDate} AND
        hs.GSSH_DATE <![CDATA[ <= ]]> #{endDate} GROUP BY hs.CLIENT,hs.GSSH_BR_ID,hs.GSSH_BILL_NO ) s GROUP BY
        s.GSSH_BR_ID) i ON i.GSSH_BR_ID = gssh.GSSH_BR_ID
        WHERE
        gssd.CLIENT = #{client}
        AND gssh.GSSH_HIDE_FLAG = '0'
        <if test="stoCode != null and stoCode != ''">
            AND gssd.GSSD_BR_ID = #{stoCode}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and gssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="startDate != null and startDate != ''">
            and gssd.GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and gssd.GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="statDatePart!=null and statDatePart!=''">
            AND gssh.GSSH_TIME <![CDATA[ >= ]]> #{statDatePart}
        </if>
        <if test="endDatePart!=null and endDatePart!=''">
            AND gssh.GSSH_TIME <![CDATA[ <= ]]> #{endDatePart}
        </if>
        ) sale
        <where>
            <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
                AND (sale.GSSD_AMT - sale.GSSD_MOV_PRICES )/ sale.GSSD_AMT * 100 &lt;= #{grossProfitRateMax} +0
            </if>
            <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
                AND (sale.GSSD_AMT - sale.GSSD_MOV_PRICES )/ sale.GSSD_AMT * 100 &gt;= #{grossProfitRateMin} +0
            </if>
        </where>
        GROUP BY
        sale.CLIENT,
        sale.GSSD_BR_ID,
        sale.GSSD_BILL_NO
        ) sd
        <if test="payTypeOutData != null and payTypeOutData.size() > 0">
            LEFT JOIN (
            SELECT
            GSSPM_BR_ID,
            GSSPM_BILL_NO,
            GROUP_CONCAT(DISTINCT GSSPM_NAME SEPARATOR ';' ) payName,
            <foreach collection="payTypeOutData" item="item" separator=",">
                IFNULL(CONVERT(SUM(CASE GSSPM_ID WHEN #{item.gspmId} THEN GSSPM_AMT END ),DECIMAL(15,4)),'0.00')
                #{item.gspmKey}
            </foreach>
            FROM
            GAIA_SD_SALE_PAY_MSG
            WHERE
            CLIENT = #{client}
            <if test="stoCode != null and stoCode != ''">
                AND GSSPM_BR_ID = #{stoCode}
            </if>
            <if test="siteArr != null and siteArr.length > 0">
                and GSSPM_BR_ID in
                <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="startDate != null and startDate != ''">
                and GSSPM_DATE &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                and GSSPM_DATE &lt;= #{endDate}
            </if>
            AND GSSPM_TYPE = 1
            GROUP BY
            CLIENT,
            GSSPM_BR_ID,
            GSSPM_BILL_NO
            ) s ON s.GSSPM_BR_ID = sd.GSSD_BR_ID
            AND s.GSSPM_BILL_NO = sd.GSSD_BILL_NO
        </if>
        LEFT JOIN GAIA_STORE_DATA sto ON sto.CLIENT = sd.CLIENT AND sto.STO_CODE = sd.GSSD_BR_ID
        <where>
            <if test="payTypeOutData != null and payTypeOutData.size() > 0">
                <if test="payName != null and payName.length > 0">
                    and
                    <foreach collection="payName" item="item" index="index" open="(" close=")" separator="OR">
                        s.payName like CONCAT('%',#{item},'%')
                    </foreach>
                </if>
            </if>
            <include refid="STORE_CATEGORY_CONDITION" />
        </where>
        GROUP BY
        sd.GSSD_BR_ID,
        sd.saleYear
        <if test="dateType != null and dateType != ''">
            <if test=" dateType == '2'.toString() ">
                ,sd.saleMonth
            </if>
            <if test=" dateType == '3'.toString() ">
                ,sd.saleMonth
                ,sd.saleDay
            </if>
        </if>
        ) tab
        <where>
            <if test="saleType != null and saleType != ''">
                and ${saleType} IS NOT NULL AND ${saleType} != 0
            </if>
        </where>
        group by
        tab.stoCode,
        tab.saleYear
        <if test="dateType != null and dateType != ''">
            <if test=" dateType == '2'.toString() ">
                ,tab.saleMonth
            </if>
            <if test=" dateType == '3'.toString() ">
                ,tab.saleMonth
                ,tab.saleDay
            </if>
        </if>
        ORDER BY
        tab.stoCode,
        tab.saleYear
        <if test="dateType != null and dateType != ''">
            <if test=" dateType == '2'.toString() ">
                ,tab.saleMonth
            </if>
            <if test=" dateType == '3'.toString() ">
                ,tab.saleMonth
                ,tab.saleDay
            </if>
        </if>
    </select>
    <select id="selectRenHeStoreSaleByDateTotal" resultType="java.util.Map">
        select
        sum( daysSales)daysSales,
        sum( amountReceivable) amountReceivable,
        sum( numberTrades) numberTrades,
        sum( amt) amt,
        sum( amt) /sum( numberTrades) perTicketSales,
        sum( zkJfdx) zkJfdx,
        sum( zkDyq) zkDyq,
        sum( zkDzq) zkDzq,
        ifnull(sum(tab.doctorGssdAmt),0) doctorGssdAmt,
        ifnull(sum(tab.doctorGrossProfitAmt),0) doctorGrossProfitAmt,
        <!-- 医疗毛利率 -->
        IFNULL(CONCAT(CONVERT(SUM( tab.doctorGssdAmt - tab.doctorGssdMovPrices )/ SUM( tab.doctorGssdAmt ) * 100,DECIMAL ( 10, 2 )),'%'),'0.00%') doctorGrossProfitRate,
        ifnull(sum(tab.doctorPayCount),0) doctorPayCount,
        <!-- 医疗客单价 -->
        IFNULL(sum(tab.doctorGssdAmt) / sum(tab.doctorPayCount),0) AS doctorGsshSinglePrice,
        ifnull(sum(tab.therapyGssdAmt),0) therapyGssdAmt,
        ifnull(sum(tab.therapyGrossProfitAmt),0) therapyGrossProfitAmt,
        <!-- 诊疗毛利率 -->
        IFNULL(CONCAT(CONVERT(SUM( tab.therapyGssdAmt - tab.therapyGssdMovPrices )/ SUM( tab.therapyGssdAmt ) * 100,DECIMAL ( 10, 2 )),'%'),'0.00%') therapyGrossProfitRate,
        ifnull(sum(tab.restoreSaleAmt),0) restoreSaleAmt,
        sum( movPrices) movPrices,
        sum( grossProfitMargin) grossProfitMargin,
        IFNULL(CONCAT(CONVERT(sum( grossProfitMargin ) / sum(amt )*100,DECIMAL ( 10, 2 )),'%'),'0.00%') grossProfitRate,
        sum( discountAmt) discountAmt,
        IFNULL(CONCAT(CONVERT((sum( amountReceivable ) - sum( amt ))/ sum( amountReceivable ) *100,DECIMAL ( 10, 2 )),'%'),'0.00%') discountRate,
        sum(numberTradesByDay) numberTradesByDay,
        sum(memberSale) memberSale,
        sum(amtByDay) amtByDay,
        IFNULL(CONCAT(CONVERT(sum(memberSale)/sum( amt )*100,DECIMAL ( 10, 2 )),'%'),'0.00%') memberSaleRate
        FROM
        (
        SELECT
        sd.saleYear,
        sd.saleMonth,
        sd.saleDay,
        count( DISTINCT sd.GSSD_DATE ) daysSales,
        sum( sd.amountReceivable ) amountReceivable,
        count( DISTINCT sd.GSSD_BILL_NO ) numberTrades,
        sum( sd.GSSD_AMT )/ count( DISTINCT sd.GSSD_BILL_NO ) perTicketSales,
        sum( sd.GSSD_AMT ) amt,
        sum( sd.GSSD_ZK_JFDX ) zkJfdx,
        sum( sd.GSSD_ZK_DYQ ) zkDyq,
        sum( sd.GSSD_ZK_DZQ ) zkDzq,
        sum( sd.doctorGssdAmt ) doctorGssdAmt,
        sum( sd.doctorGrossProfitAmt ) doctorGrossProfitAmt,
        ( sd.doctorPayCount ) doctorPayCount,
        sum( sd.therapyGssdAmt ) therapyGssdAmt,
        sum( sd.therapyGrossProfitAmt ) therapyGrossProfitAmt,
        sum( sd.restoreSaleAmt ) restoreSaleAmt,
        sum( sd.GSSD_MOV_PRICES ) movPrices,
        SUM( sd.doctorGssdMovPrices) doctorGssdMovPrices,
        SUM( sd.therapyGssdMovPrices) therapyGssdMovPrices,
        sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES ) grossProfitMargin,
        sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES )/ count( DISTINCT sd.GSSD_DATE ) grossProfitMarginByDay,
        sum( sd.GSSD_AMT - sd.GSSD_MOV_PRICES ) / sum( sd.GSSD_AMT )* 100 grossProfitRate,
        sum( sd.amountReceivable ) - sum( sd.GSSD_AMT ) discountAmt,
        (sum( sd.amountReceivable ) - sum( sd.GSSD_AMT ))/ sum( sd.amountReceivable )* 100 discountRate,
        sum( sd.GSSD_AMT )/ count( DISTINCT sd.GSSD_DATE ) amtByDay,
        count( DISTINCT sd.GSSD_BILL_NO )/ count( DISTINCT sd.GSSD_DATE ) numberTradesByDay,
        sum( sd.memberSale ) memberSale,
        sum( sd.memberSale )/ sum( sd.GSSD_AMT ) * 100 memberSaleRate
        FROM
        (
        SELECT
        sale.CLIENT,
        sale.GSSD_DATE,
        sale.GSSD_BILL_NO,
        YEAR (
        STR_TO_DATE( sale.GSSD_DATE, '%Y%m%d' )) saleYear,
        MONTH (
        STR_TO_DATE( sale.GSSD_DATE, '%Y%m%d' )) saleMonth,
        DAY (
        STR_TO_DATE( sale.GSSD_DATE, '%Y%m%d' )) saleDay,
        sale.GSSD_BR_ID,
        SUM( sale.GSSD_AMT ) GSSD_AMT,
        SUM( sale.doctorGssdAmt ) doctorGssdAmt,
        SUM( sale.doctorGrossProfitAmt ) doctorGrossProfitAmt,
        ( sale.doctorPayCount ) doctorPayCount,
        SUM( sale.therapyGssdAmt ) therapyGssdAmt,
        SUM( sale.therapyGrossProfitAmt ) therapyGrossProfitAmt,
        SUM( sale.restoreSaleAmt ) restoreSaleAmt,
        SUM( CASE WHEN sale.GSSH_HYK_NO IS NOT NULL THEN sale.GSSD_AMT ELSE 0 END ) AS memberSale,
        IFNULL( SUM( sale.GSSD_ZK_JFDX ), 0 ) GSSD_ZK_JFDX,
        IFNULL( SUM( sale.GSSD_ZK_DYQ ), 0 ) GSSD_ZK_DYQ,
        IFNULL( SUM( sale.GSSD_ZK_DZQ ), 0 ) GSSD_ZK_DZQ,
        SUM(sale.GSSD_PRC1 * ABS( sale.GSSD_QTY )) AS amountReceivable,
        SUM(sale.GSSD_MOV_PRICES) GSSD_MOV_PRICES,
        SUM(sale.doctorGssdMovPrices) doctorGssdMovPrices,
        SUM(sale.therapyGssdMovPrices) therapyGssdMovPrices
        FROM
        (
        SELECT
        gssd.CLIENT,
        gssd.GSSD_DATE,
        gssd.GSSD_BILL_NO,
        gssd.GSSD_BR_ID,
        GSSD_AMT,
        gssh.GSSH_HYK_NO,
        GSSD_ZK_JFDX,
        GSSD_ZK_DYQ,
        GSSD_ZK_DZQ,
        (IFNULL(GSSD_AMT,0)+IFNULL(GSSD_ZK_JFDX,0)+IFNULL(GSSD_ZK_DYQ,0)+IFNULL(GSSD_ZK_DZQ,0)) AS restoreSaleAmt,
        gssd.GSSD_PRC1,
        gssd.GSSD_QTY,
        CASE
        WHEN gssh.GSSH_BILL_NO_RETURN IS NULL THEN
        gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ELSE ( gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ) * - 1
        END AS GSSD_MOV_PRICES,
        <!-- 诊疗成本 -->
        CASE
        WHEN gpb.PRO_CLASS LIKE 'H%' THEN
        (CASE
        WHEN gssh.GSSH_BILL_NO_RETURN IS NULL THEN
        gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ELSE ( gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ) * - 1
        END)
        END AS therapyGssdMovPrices,
        <!-- 医疗成本 -->
        CASE
        WHEN gud.USER_STATUS = '0' THEN
        (CASE
        WHEN gssh.GSSH_BILL_NO_RETURN IS NULL THEN
        gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ELSE ( gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ) * - 1
        END)
        END AS doctorGssdMovPrices,
        <!-- 医疗销售 -->
        (CASE gud.USER_STATUS WHEN 0 THEN IFNULL( CONVERT (GSSD_AMT, DECIMAL ( 19, 4 )), 0 ) ELSE 0 END)
        AS doctorGssdAmt,
        <!-- 医疗毛利额 -->
        ( CASE gud.USER_STATUS WHEN 0 THEN IFNULL( CONVERT (GSSD_AMT - CASE
        WHEN gssh.GSSH_BILL_NO_RETURN IS NULL THEN
        gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ELSE ( gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ) * - 1
        END ,DECIMAL ( 19, 4 )),0 ) ELSE 0 END)
        AS doctorGrossProfitAmt,
        <!-- 医疗交易次数 -->
        IFNULL(i.doctorPayCount,0) AS doctorPayCount,
        <!-- 诊疗销售 -->
        ( CASE WHEN gpb.PRO_CLASS LIKE 'H%' THEN IFNULL( CONVERT (GSSD_AMT, DECIMAL ( 19, 4 )), 0 ) ELSE 0 END)
        AS therapyGssdAmt,
        <!-- 诊疗毛利额 -->
        ( CASE WHEN gpb.PRO_CLASS LIKE 'H%' THEN IFNULL( CONVERT (GSSD_AMT - CASE
        WHEN gssh.GSSH_BILL_NO_RETURN IS NULL THEN
        gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ELSE ( gssd.GSSD_ADD_AMT + gssd.GSSD_ADD_TAX ) * - 1
        END,DECIMAL ( 19, 4 )),0 ) ELSE 0 END)
        AS therapyGrossProfitAmt
        FROM
        GAIA_SD_SALE_D gssd
        LEFT JOIN GAIA_SD_SALE_H gssh ON gssd.CLIENT = gssh.CLIENT
        AND gssd.GSSD_BR_ID = gssh.GSSH_BR_ID
        AND gssd.GSSD_BILL_NO = gssh.GSSH_BILL_NO
        LEFT JOIN GAIA_USER_DATA gud ON gud.USER_ID = gssd.GSSD_SALER_ID AND gud.CLIENT = gssd.CLIENT
        LEFT JOIN GAIA_PRODUCT_BUSINESS gpb ON gpb.PRO_SELF_CODE = gssd.GSSD_PRO_ID AND gssd.CLIENT = gpb.CLIENT AND gpb.PRO_SITE = gssd.GSSD_BR_ID
        LEFT JOIN (SELECT count(s.GSSH_BILL_NO) count,
        count( s.doctorPayCount ) doctorPayCount,
        count( s.therapyPayCount ) therapyPayCount,
        s.GSSH_BR_ID
        FROM
        (SELECT
        hs.CLIENT,
        hs.GSSH_BR_ID,
        hs.GSSH_BILL_NO,
        IF( gud.USER_STATUS = '0', 1, NULL ) doctorPayCount,
        IF( gpb.PRO_CLASS LIKE 'H%', 1, NULL ) therapyPayCount
        FROM
        GAIA_SD_SALE_H hs
        LEFT JOIN GAIA_SD_SALE_D d ON d.GSSD_BR_ID = hs.GSSH_BR_ID
        AND d.CLIENT = hs.CLIENT
        AND d.GSSD_BILL_NO = hs.GSSH_BILL_NO
        LEFT JOIN GAIA_USER_DATA gud ON gud.USER_ID = d.GSSD_SALER_ID
        AND gud.CLIENT = hs.CLIENT
        LEFT JOIN GAIA_PRODUCT_BUSINESS gpb ON gpb.PRO_SELF_CODE = d.GSSD_PRO_ID
        AND d.CLIENT = gpb.CLIENT
        AND gpb.PRO_SITE = hs.GSSH_BR_ID
        WHERE hs.GSSH_HIDE_FLAG = '0' AND hs.CLIENT = #{client} AND hs.GSSH_DATE <![CDATA[ >= ]]> #{startDate} AND
        hs.GSSH_DATE <![CDATA[ <= ]]> #{endDate} GROUP BY hs.CLIENT,hs.GSSH_BR_ID,hs.GSSH_BILL_NO ) s GROUP BY
        s.GSSH_BR_ID) i ON i.GSSH_BR_ID = gssh.GSSH_BR_ID
        WHERE
        gssd.CLIENT = #{client}
        AND gssh.GSSH_HIDE_FLAG = '0'
        <if test="stoCode != null and stoCode != ''">
            AND gssd.GSSD_BR_ID = #{stoCode}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and gssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="startDate != null and startDate != ''">
            and gssd.GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and gssd.GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="statDatePart!=null and statDatePart!=''">
            AND gssh.GSSH_TIME <![CDATA[ >= ]]> #{statDatePart}
        </if>
        <if test="endDatePart!=null and endDatePart!=''">
            AND gssh.GSSH_TIME <![CDATA[ <= ]]> #{endDatePart}
        </if>
        ) sale
        <where>
            <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
                AND (sale.GSSD_AMT - sale.GSSD_MOV_PRICES )/ sale.GSSD_AMT * 100 &lt;= #{grossProfitRateMax} +0
            </if>
            <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
                AND (sale.GSSD_AMT - sale.GSSD_MOV_PRICES )/ sale.GSSD_AMT * 100 &gt;= #{grossProfitRateMin} +0
            </if>
        </where>

        GROUP BY
        sale.CLIENT,
        sale.GSSD_BR_ID,
        sale.GSSD_BILL_NO
        ) sd
        GROUP BY
        sd.GSSD_BR_ID,
        sd.saleYear
        <if test="dateType != null and dateType != ''">
            <if test=" dateType == '2'.toString() ">
                ,sd.saleMonth
            </if>
            <if test=" dateType == '3'.toString() ">
                ,sd.saleMonth
                ,sd.saleDay
            </if>
        </if>
        ) tab
        <where>
            <if test="saleType != null and saleType != ''">
                and ${saleType} IS NOT NULL AND ${saleType} != 0
            </if>
        </where>
    </select>
    <select id="getSalespersonsSalesDetailsNew"
            resultType="com.gys.report.entity.SalespersonsSalesDetailsOutData">
        select * from (
        SELECT
        sto.CLIENT,
        sto.STO_CODE stoCode,
        IFNULL( sto.STO_SHORT_NAME, sto.STO_NAME ) stoName,
        DATE_FORMAT(CONCAT(sale.GSSD_DATE,sale.GSSH_TIME),'%Y-%m-%d %H:%i:%s') saleDate,
        sale.GSSD_BILL_NO billNo,
        ifnull(sale.GSSH_REGISTER_VOUCHER_ID,'') thirdVoucherId,
        pb.PRO_SELF_CODE selfCode,
        IFNULL( pb.PRO_NAME, pb.PRO_COMMONNAME ) proName,
        pb.PRO_COMMONNAME proCommonName,
        pb.PRO_DEPICT as proDepict,
        pb.PRO_SPECS specs,
        pb.PRO_REGISTER_NO proRegisterNo,
        pb.PRO_UNIT unit,
        pb.PRO_FACTORY_CODE factoryCode,
        pb.PRO_FACTORY_NAME factoryName,
        pb.PRO_MED_ID medProdctCode,
        pb.PRO_IF_MED,
        pb.PRO_ZDY1 AS zdy1,
        pb.PRO_ZDY2 AS zdy2,
        pb.PRO_ZDY3 AS zdy3,
        pb.PRO_ZDY4 AS zdy4,
        pb.PRO_ZDY5 AS zdy5,
        pb.PRO_SLAE_CLASS AS proSaleClass,
        pb.PRO_SCLASS AS prosClass,
        case pb.PRO_TSSX when '1' then '防疫'
        else '' end AS proTssx,
        case pb.PRO_NO_PURCHASE
        when '1' then '是'
        when '0' then '否'
        end AS purchase,
        pb.PRO_POSITION proPosition,
        CASE
        WHEN pb.PRO_IF_MED = '1' THEN
        '是'
        WHEN pb.PRO_MED_ID IS NOT NULL THEN
        '是' ELSE '否'
        END ifMed,
        sale.GSSD_PRC1 prcOne,
        sale.GSSD_QTY qty,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) AS amountReceivable,
        sale.GSSD_AMT amt,
        sale.GSSD_ADD_AMT addAmt,
        sale.GSSD_ADD_TAX addTxa,
        sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX includeTaxSale,
        sale.GSSD_AMT - (sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX) grossProfitMargin,
        (sale.GSSD_AMT - sale.GSSD_ADD_AMT - sale.GSSD_ADD_TAX)
        / sale.GSSD_AMT
        * 100 grossProfitRate,
        ABS(sale.GSSD_QTY) as jdQty,
        sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) - sale.GSSD_AMT discount,
        (sale.GSSD_PRC1 * ABS(sale.GSSD_QTY) - sale.GSSD_AMT )/( sale.GSSD_PRC1 * sale.GSSD_QTY )* 100 discountRate,
        sale.GSSD_SALER_ID salerId,
        ud1.USER_NAM salerName,
        sale.GSSD_DOCTOR_ID doctorId,
        ud2.USER_NAM doctorName,
        sale.GSSH_EMP empId,
        ud3.USER_NAM empName,
        sale.GSSH_HYK_NO hykNo,
        gsmb.GSMB_NAME hykName,
        gsmb.GSMB_MOBILE hykMobile,
        gsmb.GSMB_MEMBER_ID memberId,
        concat( pc.PRO_BIG_CLASS_CODE, '-', pc.PRO_BIG_CLASS_NAME ) bigClass,
        concat( pc.PRO_MID_CLASS_CODE, '-', pc.PRO_MID_CLASS_NAME ) midClass,
        concat( pc.PRO_CLASS_CODE, '-', pc.PRO_CLASS_NAME ) proClass,
        pb.PRO_CLASS,
        sale.GSSD_BATCH_NO batchNo,
        sale.GSSD_VALID_DATE validData,
        sale.expiryDay,
        sale.BAT_SUPPLIER_CODE  AS supplierCode,
        sale.BAT_SUPPLIER_NAME  AS supplierName,
        msg.payName,
        sale.GSSD_PRO_STATUS as saleStatus,
        sto.STO_ATTRIBUTE stoAttribute,
        sto.STO_IF_DTP stoIfDtp,
        sto.STO_IF_MEDICALCARE stoIfMedical,
        sto.STO_TAX_CLASS stoTaxClass
        FROM
        (
        SELECT
        ssd.CLIENT,
        ssd.GSSD_BR_ID,
        ssd.GSSD_BILL_NO,
        ssd.GSSD_DATE,
        ssh.GSSH_TIME,
        ssd.GSSD_PRC1,
        ssd.GSSD_QTY,
        ssd.GSSD_AMT,
        ssd.GSSD_PRO_ID,
        ssd.GSSD_MOV_TAX,
        ssd.GSSD_SALER_ID,
        ssd.GSSD_DOCTOR_ID,
        ssh.GSSH_EMP,
        ssh.GSSH_HYK_NO,
        ssd.GSSD_BATCH_NO,
        ssd.GSSD_BATCH,
        ssd.GSSD_VALID_DATE,
        ssd.GSSD_SERIAL,
        bi.BAT_SUPPLIER_CODE,
        bi.BAT_SUPPLIER_NAME,
        ssd.GSSD_PRO_STATUS,
        ssh.GSSH_REGISTER_VOUCHER_ID,
        DATEDIFF(date_format( ssd.GSSD_VALID_DATE, '%Y-%m-%d' ),date_format( ssd.GSSD_DATE , '%Y-%m-%d' )) expiryDay,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_AMT ELSE ssd.GSSD_ADD_AMT * - 1
        END
        AS GSSD_ADD_AMT,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_TAX ELSE ssd.GSSD_ADD_TAX * - 1
        END
        AS GSSD_ADD_TAX
        FROM
        GAIA_SD_SALE_H ssh
        LEFT JOIN GAIA_SD_SALE_D ssd ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND
        ssd.GSSD_BR_ID = ssh.GSSH_BR_ID)
        LEFT JOIN
        (
        SELECT
        CLIENT,
        BAT_SITE_CODE,
        BAT_PRO_CODE,
        BAT_BATCH_NO,
        SUBSTRING_INDEX(GROUP_CONCAT( BAT_BATCH ORDER BY BAT_CREATE_DATE DESC,BAT_CREATE_TIME DESC),',',1 ) AS BAT_BATCH,
        BAT_SUPPLIER_CODE,
        BAT_SUPPLIER_NAME
        FROM
        GAIA_BATCH_INFO
        WHERE
        CLIENT = #{clientId}
        GROUP BY
        CLIENT,
        BAT_SITE_CODE,
        BAT_PRO_CODE,
        BAT_BATCH_NO
        ) bi ON ssd.CLIENT = bi.CLIENT and ssd.GSSD_BR_ID = bi.BAT_SITE_CODE and ssd.GSSD_PRO_ID = bi.BAT_PRO_CODE and ssd.GSSD_BATCH_NO = bi.BAT_BATCH_NO
        WHERE
        ssh.CLIENT = #{clientId}
        AND ssh.GSSH_HIDE_FLAG = '0'
        <if test="memberCarArr != null and memberCarArr.length > 0">
            AND ssh.GSSH_HYK_NO IN
            <foreach collection="memberCarArr" open="(" separator="," item="item" close=")">
                #{item}
            </foreach>
        </if>
        <if test="brId != null and brId != ''">
            AND ssd.GSSD_BR_ID = #{brId}
        </if>
        <if test="saleStatusList != null and saleStatusList.size() > 0">
            and ssd.GSSD_PRO_STATUS in
            <foreach collection="saleStatusList" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and ssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="queryUserId != null and queryUserId != ''">
            AND ssd.GSSD_SALER_ID = #{queryUserId}
        </if>
        <if test="empUserId != null and empUserId != ''">
            AND ssh.GSSH_EMP = #{empUserId}
        </if>

        <if test="queryDoctorId != null and queryDoctorId != ''">
            AND ssd.GSSD_DOCTOR_ID = #{queryDoctorId}
        </if>
        <if test="proArr != null and proArr.length > 0 ">
            and ssd.GSSD_PRO_ID IN
            <foreach collection="proArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="queryStartDate != null and queryStartDate != ''">
            and ssd.GSSD_DATE &gt;= #{queryStartDate}
        </if>
        <if test="queryEndDate != null and queryEndDate != ''">
            and ssd.GSSD_DATE &lt;= #{queryEndDate}
        </if>

        <if test="batchNo != null and batchNo != ''">
            AND ssd.GSSD_BATCH_NO = #{batchNo}
        </if>

        <if test="billNoArr != null and billNoArr.length > 0">
            AND ssd.GSSD_BILL_NO IN
            <foreach collection="billNoArr" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="thirdVoucherId != null and thirdVoucherId != ''">
            and ssh.GSSH_REGISTER_VOUCHER_ID=#{thirdVoucherId}
        </if>
        GROUP BY ssd.CLIENT,ssd.GSSD_BR_ID,ssd.GSSD_BILL_NO, ssd.GSSD_SERIAL,ssd.GSSD_PRO_ID,ssd.GSSD_BATCH_NO
        ) sale
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON ( pb.CLIENT = sale.CLIENT AND pb.PRO_SITE = sale.GSSD_BR_ID AND
        pb.PRO_SELF_CODE = sale.GSSD_PRO_ID )
        LEFT JOIN GAIA_STORE_DATA sto ON ( sto.CLIENT = sale.CLIENT AND sto.STO_CODE = sale.GSSD_BR_ID )
        LEFT JOIN GAIA_USER_DATA ud1 ON ( ud1.CLIENT = sale.CLIENT AND ud1.USER_ID = sale.GSSD_SALER_ID )
        LEFT JOIN GAIA_USER_DATA ud2 ON ( ud2.CLIENT = sale.CLIENT AND ud2.USER_ID = sale.GSSD_DOCTOR_ID )
        LEFT JOIN GAIA_USER_DATA ud3 ON ( ud3.CLIENT = sale.CLIENT AND ud3.USER_ID = sale.GSSH_EMP )
        LEFT JOIN GAIA_SD_MEMBER_CARD gsmc on gsmc.CLIENT=sale.client and gsmc.GSMBC_CARD_ID=sale.GSSH_HYK_NO
        LEFT JOIN GAIA_SD_MEMBER_BASIC gsmb on gsmb.CLIENT=gsmc.CLIENT and gsmb.GSMB_MEMBER_ID=gsmc.GSMBC_MEMBER_ID
        LEFT JOIN (
        SELECT
        *
        FROM
        (
        SELECT
        PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS UNION ALL
        SELECT
        PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM
        GAIA_PRODUCT_CLASS
        )
        proClass
        GROUP BY
        classId
        ) pc ON pc.classId = pb.PRO_CLASS
        LEFT JOIN (
        SELECT
        GSSPM_BR_ID,
        GSSPM_BILL_NO,
        GROUP_CONCAT(GSSPM_NAME SEPARATOR ';') payName
        FROM
        GAIA_SD_SALE_PAY_MSG
        WHERE
        CLIENT = #{clientId}
        AND GSSPM_TYPE = '1'
        <if test="brId != null and brId != ''">
            AND GSSPM_BR_ID = #{brId}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and GSSPM_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        GROUP BY
        GSSPM_BILL_NO
        ) msg ON msg.GSSPM_BR_ID = sale.GSSD_BR_ID AND msg.GSSPM_BILL_NO = sale.GSSD_BILL_NO
        WHERE 1=1
        AND not EXISTS (select 1 from GAIA_SALES_CATALOG where CLIENT = pb.CLIENT and PRO_SELF_CODE=pb.PRO_SELF_CODE and
        IS_DELETE = 0 and `STATUS` in (1,2))
        <if test="flag == 1">
            AND (pb.PRO_OUT != '1' OR pb.PRO_OUT is null)
        </if>
        <if test="zdy1 != null and zdy1.length > 0">
            and pb.PRO_ZDY1 in
            <foreach collection="zdy1" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy2 != null and zdy2.length > 0">
            and pb.PRO_ZDY2 in
            <foreach collection="zdy2" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy3 != null and zdy3.length > 0">
            and pb.PRO_ZDY3 in
            <foreach collection="zdy3" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy4 != null and zdy4.length > 0">
            and pb.PRO_ZDY4 in
            <foreach collection="zdy4" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="zdy5 != null and zdy5.length > 0">
            and pb.PRO_ZDY5 in
            <foreach collection="zdy5" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="saleClass != null and saleClass.length > 0">
            and pb.PRO_SLAE_CLASS in
            <foreach collection="saleClass" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="proPosition != null and proPosition.length > 0">
            and pb.PRO_POSITION in
            <foreach collection="proPosition" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="specialType != null and specialType!=''">
            <choose>
                <when test="specialType == '0'.toString()">
                    and  (pb.PRO_CLASS like '1%' or pb.PRO_CLASS like '2%')
                </when>
                <when test="specialType == '1'.toString()">
                    and pb.PRO_CLASS like '5%'
                </when>
                <when test="specialType == '2'.toString()">
                    and pb.PRO_CONTROL_CLASS like '5%'
                </when>
                <when test="specialType == '3'.toString()">
                    and pb.PRO_CLASS like '4%'
                </when>
            </choose>
        </if>
        <!--<if test="proSaleClass != null and proSaleClass != ''">-->
        <!--AND pb.PRO_SLAE_CLASS = #{proSaleClass}-->
        <!--</if>-->
        <if test="proSaleClassList != null and proSaleClassList.size > 0">
            AND pb.PRO_SLAE_CLASS in
            <foreach collection="proSaleClassList" separator="," open="(" close=")" item="proSaleClass" >
                #{proSaleClass}
            </foreach>
        </if>
        <if test="purchase != null and purchase != ''">
            and pb.PRO_NO_PURCHASE = #{purchase}
        </if>
        <if test="payName != null and payName.length > 0">
            and
            <foreach collection="payName" item="item" index="index" open="(" close=")" separator="OR">
                msg.payName like CONCAT('%',#{item},'%')
            </foreach>
        </if>
        <if test="proTssx != null and proTssx.size() > 0">
            AND pb.PRO_TSSX in
            <foreach collection="proTssx" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        ) tab
        where 1=1
        <if test="memberName != null and memberName != ''">
            AND (tab.hykName LIKE '%${memberName}%' OR tab.hykMobile LIKE '%${memberName}%' OR tab.hykNo LIKE
            '%${memberName}%')
        </if>
        <if test="supplierCode != null and supplierCode != ''">
            AND tab.supplierCode = #{supplierCode}
        </if>
        <if test="grossProfitRateMax != null and grossProfitRateMax != ''">
            AND (tab.amt-tab.addAmt-tab.addTxa)/tab.amt*100 &lt;= #{grossProfitRateMax} +0
        </if>
        <if test="grossProfitRateMin != null and grossProfitRateMin != ''">
            AND (tab.amt-tab.addAmt-tab.addTxa)/tab.amt*100 &gt;= #{grossProfitRateMin} +0
        </if>
        <if test="classArrs != null and classArrs.size > 0">
            and tab.PRO_CLASS in
            <foreach collection="classArrs" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="expiryDay != null and expiryDay !=''">
            and tab.expiryDay &lt;=#{expiryDay}
        </if>
        <if test="factory != null and factory != ''">
            AND (tab.factoryCode LIKE '%${factory}%' OR tab.factoryName LIKE '%${factory}%')
        </if>
        <if test="medProdctStatus != null and medProdctStatus != ''">
            <if test="medProdctStatus == '1'.toString() ">
                AND ( tab.PRO_IF_MED = #{medProdctStatus} OR ifnull(tab.medProdctCode,'') != '')
            </if>
            <if test="medProdctStatus == '0'.toString() ">
                AND (tab.PRO_IF_MED = #{medProdctStatus} OR (ifnull(tab.medProdctCode,'') = '' AND ifnull(tab.PRO_IF_MED
                ,'') = ''))
            </if>
        </if>
        <include refid="STORE_PERSON_SALE_DETAIL" />
        ORDER BY
        saleDate,
        stoCode,
        selfCode
    </select>

    <select id="selectRenHeStoreProductSaleSummary"
            resultType="com.gys.entity.renhe.StoreProductSaleSummaryOutData">
        select ssd.*,
        ROUND(cast(IFNULL(onlineSale.qty,0) as CHAR),2) as 'onlineSaleQty',
        ROUND(cast(IFNULL(onlineSale.amt,0) as CHAR),2) as 'onlineAmt',
        ROUND(cast(IFNULL(onlineSale.grossAmt,0) AS CHAR),2) as 'onlineGrossAmt',
        ROUND(CAST(IFNULL(onlineSale.mov,0) AS CHAR),2) as 'onlineMov',
        ROUND((onlineSale.grossAmt
        /
        onlineSale.amt) * 100,2) as 'onlineGrossRate'
        from
        (
        SELECT
        sto.ClIENT,
        sto.STO_CODE stoCode,
        IFNULL(STO_SHORT_NAME,STO_NAME) stoName,
        sd.GSSD_PRO_ID proCode,
        pb.PRO_NAME proName,
        pb.PRO_COMMONNAME proCommonName,
        pb.PRO_SPECS specs,
        pb.PRO_UNIT unit,
        pb.PRO_FACTORY_NAME factoryName,
        IF(pb.PRO_IF_WHOLESALE ='1' ,'是','否') noWholesale,
        tc.TAX_CODE_VALUE proOutputTax,
        CASE
        WHEN pb.PRO_IF_MED = '1' THEN
        '是'
        WHEN pb.PRO_MED_ID IS NOT NULL THEN
        '是' ELSE '否'
        END ifMed,
        pb.PRO_MED_ID proMedId,
        concat(pc.PRO_BIG_CLASS_CODE,'-',pc.PRO_BIG_CLASS_NAME) bigClass,
        concat(pc.PRO_MID_CLASS_CODE,'-',pc.PRO_MID_CLASS_NAME) midClass,
        concat(pc.PRO_CLASS_CODE,'-',pc.PRO_CLASS_NAME) proClass,
        sd.GSSD_BATCH_NO batchNo,
        SUM(sd.GSSD_QTY) qty,
        SUM( sd.GSSD_PRC1 * ABS(sd.GSSD_QTY)) AS amountReceivable,
        SUM( sd.GSSD_AMT) AS amt,
        SUM(( sd.GSSD_PRC1 * ABS(sd.GSSD_QTY) )- sd.GSSD_AMT) deduction,
        SUM( sd.GSSD_AMT / ( 1 + sd.GSSD_MOV_TAX )) removeTaxSale,

        SUM(sd.GSSD_MOV_PRICES) movPrices,

        SUM( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX)) includeTaxSale,

        SUM( sd.GSSD_AMT - ( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX))) grossProfitMargin,

        ROUND((SUM(sd.GSSD_AMT - ( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX))) / SUM( sd.GSSD_AMT))*100,2)
        grossProfitRate,

        SUM( sd.GSSD_ADD_AMT) addMovPrices,

        SUM( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX) addIncludeTaxSale,

        SUM( sd.GSSD_AMT - ( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)) addGrossProfitMargin,

        ROUND((SUM(sd.GSSD_AMT - ( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)) / SUM( sd.GSSD_AMT))*100,2) addGrossProfitRate,
        pb.PRO_ZDY1 AS zdy1,
        pb.PRO_ZDY2 AS zdy2,
        pb.PRO_ZDY3 AS zdy3,
        pb.PRO_ZDY4 AS zdy4,
        pb.PRO_ZDY5 AS zdy5,
        pb.PRO_SLAE_CLASS AS saleClass,
        pb.PRO_SCLASS AS prosClass,
        case pb.PRO_TSSX when '1' then '防疫'
        else '' end AS proTssx,
        case pb.PRO_NO_PURCHASE
        when '1' then '是'
        when '0' then '否'
        end AS purchase,
        pb.PRO_POSITION proPosition,
        pb.PRO_BARCODE proBarcode,
        sto.STO_ATTRIBUTE stoAttribute,
        sto.STO_IF_DTP stoIfDtp,
        sto.STO_IF_MEDICALCARE stoIfMedical,
        sto.STO_TAX_CLASS stoTaxClass
        FROM
        (select a.* ,
        (a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX))) / ( a.GSSD_AMT )* 100
        from (
        SELECT gssd.CLIENT,
        gssd.GSSD_BR_ID,
        gssd.GSSD_BATCH_NO,
        gssd.GSSD_MOV_TAX,
        gssd.GSSD_PRC1,
        gssd.GSSD_QTY,
        gssd.GSSD_AMT,
        gssd.GSSD_PRO_ID,
        (case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_MOV_PRICES
        else
        gssd.GSSD_MOV_PRICES* -1
        end
        ) GSSD_MOV_PRICES,
        case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_AMT
        else
        gssd.GSSD_ADD_AMT* -1
        end
        GSSD_ADD_AMT,
        case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_TAX
        else
        gssd.GSSD_ADD_TAX* -1
        end
        GSSD_ADD_TAX
        FROM GAIA_SD_SALE_H sh
        LEFT JOIN GAIA_SD_SALE_D gssd ON gssd.CLIENT = sh.CLIENT
        AND gssd.GSSD_BR_ID = sh.GSSH_BR_ID
        AND gssd.GSSD_BILL_NO = sh.GSSH_BILL_NO
        WHERE gssd.CLIENT =#{client}
        and sh.GSSH_HIDE_FLAG = '0'
        <if test="startDate != null and startDate != ''">
            and gssd.GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and gssd.GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="gsstBrId != null and gsstBrId != ''">
            and gssd.GSSD_BR_ID = #{gsstBrId}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and gssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        )a
        ) sd
        LEFT JOIN GAIA_STORE_DATA sto ON sto.CLIENT =sd.CLIENT AND sto.STO_CODE = sd. GSSD_BR_ID
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON sd.CLIENT = pb.CLIENT AND sd.GSSD_BR_ID = pb.PRO_SITE AND sd.GSSD_PRO_ID =
        pb.PRO_SELF_CODE
        LEFT JOIN GAIA_TAX_CODE tc ON tc.TAX_CODE = pb.PRO_OUTPUT_TAX
        LEFT JOIN ( SELECT * FROM(
        SELECT PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        UNION ALL
        SELECT PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        UNION ALL
        SELECT PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        ) proClass GROUP BY classId
        ) pc ON pc.classId = pb.PRO_CLASS
        <where>
            NOT EXISTS ( SELECT 1 FROM GAIA_SALES_CATALOG WHERE CLIENT = pb.CLIENT AND PRO_SELF_CODE = pb.PRO_SELF_CODE
            AND IS_DELETE = 0 AND `STATUS` IN ( 1, 2))
            <if test="classArrs != null and classArrs.size > 0">
                and pb.PRO_CLASS in
                <foreach collection="classArrs" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
        GROUP BY
        sd.GSSD_PRO_ID,
        sd.GSSD_BR_ID
        ORDER BY
        sd.GSSD_PRO_ID,
        sd.GSSD_BR_ID
        ) ssd
        left join
        (
        SELECT GSSD_PRO_ID,GSSD_BR_ID,SUM(qty) qty,SUM(amt) amt,sum(mov) mov,sum(grossAmt) grossAmt from (
        SELECT
        sale.CLIENT,
        sale.GSSD_BILL_NO,
        sale.GSSD_BR_ID,
        sale.GSSD_PRO_ID,
        sale.GSSD_QTY qty,
        sale.GSSD_AMT amt,
        sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX mov,
        sale.GSSD_AMT - ( sale.GSSD_ADD_AMT + sale.GSSD_ADD_TAX ) grossAmt
        FROM
        (
        SELECT
        ssd.CLIENT,
        ssd.GSSD_BR_ID,
        ssd.GSSD_BILL_NO,
        ssd.GSSD_PRO_ID,
        ssd.GSSD_DATE,
        ssd.GSSD_PRC1,
        ssd.GSSD_PRC2,
        ssd.GSSD_QTY,
        ssd.GSSD_AMT,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_AMT ELSE ssd.GSSD_ADD_AMT * - 1
        END AS GSSD_ADD_AMT,
        CASE
        WHEN ssh.GSSH_BILL_NO_RETURN IS NULL THEN
        ssd.GSSD_ADD_TAX ELSE ssd.GSSD_ADD_TAX * - 1
        END AS GSSD_ADD_TAX
        FROM GAIA_SD_SALE_D ssd
        left JOIN GAIA_SD_SALE_H ssh ON ( ssd.CLIENT = ssh.CLIENT AND ssd.GSSD_BILL_NO = ssh.GSSH_BILL_NO AND
        ssd.GSSD_BR_ID = ssh.GSSH_BR_ID )
        left join (
        SELECT GSSPM_BR_ID, GSSPM_BILL_NO, GROUP_CONCAT( GSSPM_NAME SEPARATOR ';' ) payName
        FROM GAIA_SD_SALE_PAY_MSG
        WHERE CLIENT = #{client} AND GSSPM_TYPE = '1'
        GROUP BY GSSPM_BILL_NO
        ) spm on ssh.GSSH_BR_ID=spm.GSSPM_BR_ID and spm.GSSPM_BILL_NO = ssh.GSSH_BILL_NO
        WHERE
        ssh.CLIENT = #{client}
        AND ssh.GSSH_HIDE_FLAG = '0'
        AND ssd.GSSD_DATE &gt;= #{startDate}
        AND ssd.GSSD_DATE &lt;= #{endDate}
        and (spm.payName like CONCAT('%','京东到家','%') or spm.payName like CONCAT('%','美团','%') or spm.payName like
        CONCAT('%','饿了么','%'))
        ) sale ) temp GROUP BY GSSD_PRO_ID,GSSD_BR_ID
        ) onlineSale on ssd.proCode=onlineSale.GSSD_PRO_ID AND ssd.stoCode=onlineSale.GSSD_BR_ID
        <where>
            <include refid="STORE_CATEGORY_CONDITION" />
        </where>
    </select>

    <select id="selectRenHeStoreProductSaleSummaryTotal"
            resultType="com.gys.report.entity.StoreProductSaleStoreOutTotal">
        SELECT
        SUM(sd.GSSD_QTY) qty,
        SUM( sd.GSSD_PRC1 * ABS(sd.GSSD_QTY)) AS amountReceivable,
        SUM( sd.GSSD_AMT) AS amt,
        SUM(( sd.GSSD_PRC1 * ABS(sd.GSSD_QTY) )- sd.GSSD_AMT) deduction,
        SUM( sd.GSSD_AMT / ( 1 + sd.GSSD_MOV_TAX )) removeTaxSale,
        SUM(sd.GSSD_MOV_PRICES) movPrices,

        SUM( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX)) includeTaxSale,

        SUM( sd.GSSD_AMT - ( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX))) grossProfitMargin,

        concat(ROUND((SUM(sd.GSSD_AMT - ( sd.GSSD_MOV_PRICES * (1+ sd.GSSD_MOV_TAX))) / SUM( sd.GSSD_AMT))*100,2),'%')
        grossProfitRate,

        SUM( sd.GSSD_ADD_AMT) addMovPrices,

        SUM( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX) addIncludeTaxSale,

        SUM( sd.GSSD_AMT - ( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)) addGrossProfitMargin,

        concat(ROUND((SUM(sd.GSSD_AMT - ( sd.GSSD_ADD_AMT + sd.GSSD_ADD_TAX)) / SUM( sd.GSSD_AMT))*100,2),'%')
        addGrossProfitRate
        FROM
        (select a.* ,
        (a.GSSD_AMT - ( a.GSSD_MOV_PRICES * ( 1 + a.GSSD_MOV_TAX))) / ( a.GSSD_AMT )* 100
        from (
        SELECT gssd.CLIENT,
        gssd.GSSD_BR_ID,
        gssd.GSSD_BILL_NO,
        gssd.GSSD_BATCH_NO,
        gssd.GSSD_MOV_TAX,
        gssd.GSSD_PRC1,
        gssd.GSSD_QTY,
        gssd.GSSD_AMT,
        gssd.GSSD_PRO_ID,
        (case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_MOV_PRICES
        else
        gssd.GSSD_MOV_PRICES* -1
        end
        ) GSSD_MOV_PRICES,
        case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_AMT
        else
        gssd.GSSD_ADD_AMT* -1
        end
        GSSD_ADD_AMT,
        case when sh.GSSH_BILL_NO_RETURN is null then
        gssd.GSSD_ADD_TAX
        else
        gssd.GSSD_ADD_TAX* -1
        end
        GSSD_ADD_TAX
        FROM GAIA_SD_SALE_H sh
        LEFT JOIN GAIA_SD_SALE_D gssd ON gssd.CLIENT = sh.CLIENT AND gssd.GSSD_BR_ID = sh.GSSH_BR_ID AND
        gssd.GSSD_BILL_NO = sh.GSSH_BILL_NO
        WHERE gssd.CLIENT =#{client}
        and sh.GSSH_HIDE_FLAG = '0'
        <if test="startDate != null and startDate != ''">
            and gssd.GSSD_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and gssd.GSSD_DATE &lt;= #{endDate}
        </if>
        <if test="gsstBrId != null and gsstBrId != ''">
            and gssd.GSSD_BR_ID = #{gsstBrId}
        </if>
        <if test="siteArr != null and siteArr.length > 0">
            and gssd.GSSD_BR_ID in
            <foreach collection="siteArr" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        )a
        ) sd
        LEFT JOIN GAIA_PRODUCT_BUSINESS pb ON sd.CLIENT = pb.CLIENT AND sd.GSSD_BR_ID = pb.PRO_SITE AND sd.GSSD_PRO_ID =
        pb.PRO_SELF_CODE
        LEFT JOIN ( SELECT * FROM(
        SELECT PRO_BIG_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        NULL AS PRO_MID_CLASS_CODE,
        NULL AS PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        UNION ALL
        SELECT PRO_MID_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        NULL AS PRO_CLASS_CODE,
        NULL AS PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        UNION ALL
        SELECT PRO_CLASS_CODE AS classId,
        PRO_BIG_CLASS_CODE,
        PRO_BIG_CLASS_NAME,
        PRO_MID_CLASS_CODE,
        PRO_MID_CLASS_NAME,
        PRO_CLASS_CODE,
        PRO_CLASS_NAME
        FROM GAIA_PRODUCT_CLASS
        ) proClass GROUP BY classId
        ) pc ON pc.classId = pb.PRO_CLASS
        <where>
            NOT EXISTS ( SELECT 1 FROM GAIA_SALES_CATALOG WHERE CLIENT = pb.CLIENT AND PRO_SELF_CODE = pb.PRO_SELF_CODE
            AND IS_DELETE = 0 AND `STATUS` IN ( 1, 2))
            <if test="classArrs != null and classArrs.size > 0">
                and pb.PRO_CLASS in
                <foreach collection="classArrs" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
    </select>
    <select id="selectClientUser" resultType="com.gys.report.entity.GaiaUserData">
        SELECT DISTINCT
            d.USER_ID as userId,
            d.USER_NAM as userNam,
            d.USER_STA as userSta
        FROM
            GAIA_AUTHCONFI_DATA a
                LEFT JOIN GAIA_FRANCHISEE b ON ( a.CLIENT = b.CLIENT )
                LEFT JOIN GAIA_STORE_DATA c ON ( a.CLIENT = c.CLIENT AND a.AUTHOBJ_SITE = c.STO_CODE )
                LEFT JOIN GAIA_USER_DATA d ON ( a.CLIENT = d.CLIENT AND a.AUTHCONFI_USER = d.USER_ID )
        where a.CLIENT = #{client}
          and a.AUTH_GROUP_ID NOT IN ('SD_23','SD_24' )
          and d.USER_NAM is not null
        ORDER BY
            d.USER_ID DESC
    </select>

</mapper>